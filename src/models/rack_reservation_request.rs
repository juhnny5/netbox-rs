/*
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0 (3.6)
 * 
 * Generated by: https://openapi-generator.tech
 */

/// RackReservationRequest : Adds support for custom fields and tags.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RackReservationRequest {
    #[serde(rename = "rack")]
    pub rack: Box<crate::models::NestedRackRequest>,
    #[serde(rename = "units")]
    pub units: Vec<i32>,
    #[serde(rename = "user")]
    pub user: Box<crate::models::NestedUserRequest>,
    #[serde(rename = "tenant", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tenant: Option<Option<Box<crate::models::NestedTenantRequest>>>,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::NestedTagRequest>>,
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<::std::collections::HashMap<String, serde_json::Value>>,
}

impl RackReservationRequest {
    /// Adds support for custom fields and tags.
    pub fn new(rack: crate::models::NestedRackRequest, units: Vec<i32>, user: crate::models::NestedUserRequest, description: String) -> RackReservationRequest {
        RackReservationRequest {
            rack: Box::new(rack),
            units,
            user: Box::new(user),
            tenant: None,
            description,
            comments: None,
            tags: None,
            custom_fields: None,
        }
    }
}



/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WritableDeviceWithConfigContext {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "display", skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[serde(rename = "name", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub name: Option<Option<String>>,
    #[serde(rename = "device_type")]
    pub device_type: i32,
    #[serde(rename = "device_role")]
    pub device_role: i32,
    #[serde(rename = "tenant", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tenant: Option<Option<i32>>,
    #[serde(rename = "platform", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub platform: Option<Option<i32>>,
    #[serde(rename = "serial", skip_serializing_if = "Option::is_none")]
    pub serial: Option<String>,
    /// A unique tag used to identify this device
    #[serde(rename = "asset_tag", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub asset_tag: Option<Option<String>>,
    #[serde(rename = "site")]
    pub site: i32,
    #[serde(rename = "location", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub location: Option<Option<i32>>,
    #[serde(rename = "rack", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub rack: Option<Option<i32>>,
    #[serde(rename = "position", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub position: Option<Option<f32>>,
    #[serde(rename = "face", skip_serializing_if = "Option::is_none")]
    pub face: Option<Face>,
    #[serde(rename = "parent_device", skip_serializing_if = "Option::is_none")]
    pub parent_device: Option<Box<crate::models::NestedDevice>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Status>,
    #[serde(rename = "airflow", skip_serializing_if = "Option::is_none")]
    pub airflow: Option<Airflow>,
    #[serde(rename = "primary_ip", skip_serializing_if = "Option::is_none")]
    pub primary_ip: Option<String>,
    #[serde(rename = "primary_ip4", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub primary_ip4: Option<Option<i32>>,
    #[serde(rename = "primary_ip6", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub primary_ip6: Option<Option<i32>>,
    #[serde(rename = "cluster", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub cluster: Option<Option<i32>>,
    #[serde(rename = "virtual_chassis", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub virtual_chassis: Option<Option<i32>>,
    #[serde(rename = "vc_position", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vc_position: Option<Option<i32>>,
    #[serde(rename = "vc_priority", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vc_priority: Option<Option<i32>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "local_context_data", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub local_context_data: Option<Option<serde_json::Value>>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::NestedTag>>,
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<serde_json::Value>,
    #[serde(rename = "config_context", skip_serializing_if = "Option::is_none")]
    pub config_context: Option<serde_json::Value>,
    #[serde(rename = "created", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub created: Option<Option<String>>,
    #[serde(rename = "last_updated", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<Option<String>>,
}

impl WritableDeviceWithConfigContext {
    pub fn new(device_type: i32, device_role: i32, site: i32) -> WritableDeviceWithConfigContext {
        WritableDeviceWithConfigContext {
            id: None,
            url: None,
            display: None,
            name: None,
            device_type,
            device_role,
            tenant: None,
            platform: None,
            serial: None,
            asset_tag: None,
            site,
            location: None,
            rack: None,
            position: None,
            face: None,
            parent_device: None,
            status: None,
            airflow: None,
            primary_ip: None,
            primary_ip4: None,
            primary_ip6: None,
            cluster: None,
            virtual_chassis: None,
            vc_position: None,
            vc_priority: None,
            description: None,
            comments: None,
            local_context_data: None,
            tags: None,
            custom_fields: None,
            config_context: None,
            created: None,
            last_updated: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Face {
    #[serde(rename = "front")]
    Front,
    #[serde(rename = "rear")]
    Rear,
}

impl Default for Face {
    fn default() -> Face {
        Self::Front
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Status {
    #[serde(rename = "offline")]
    Offline,
    #[serde(rename = "active")]
    Active,
    #[serde(rename = "planned")]
    Planned,
    #[serde(rename = "staged")]
    Staged,
    #[serde(rename = "failed")]
    Failed,
    #[serde(rename = "inventory")]
    Inventory,
    #[serde(rename = "decommissioning")]
    Decommissioning,
}

impl Default for Status {
    fn default() -> Status {
        Self::Offline
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Airflow {
    #[serde(rename = "front-to-rear")]
    FrontToRear,
    #[serde(rename = "rear-to-front")]
    RearToFront,
    #[serde(rename = "left-to-right")]
    LeftToRight,
    #[serde(rename = "right-to-left")]
    RightToLeft,
    #[serde(rename = "side-to-rear")]
    SideToRear,
    #[serde(rename = "passive")]
    Passive,
    #[serde(rename = "mixed")]
    Mixed,
}

impl Default for Airflow {
    fn default() -> Airflow {
        Self::FrontToRear
    }
}


/*
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0 (3.6)
 * 
 * Generated by: https://openapi-generator.tech
 */

/// PatchedWritableCustomFieldRequest : Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PatchedWritableCustomFieldRequest {
    #[serde(rename = "content_types", skip_serializing_if = "Option::is_none")]
    pub content_types: Option<Vec<String>>,
    /// The type of data this custom field holds  * `text` - Text * `longtext` - Text (long) * `integer` - Integer * `decimal` - Decimal * `boolean` - Boolean (true/false) * `date` - Date * `datetime` - Date & time * `url` - URL * `json` - JSON * `select` - Selection * `multiselect` - Multiple selection * `object` - Object * `multiobject` - Multiple objects
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "object_type", skip_serializing_if = "Option::is_none")]
    pub object_type: Option<String>,
    /// Internal field name
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// Name of the field as displayed to users (if not provided, 'the field's name will be used)
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Custom fields within the same group will be displayed together
    #[serde(rename = "group_name", skip_serializing_if = "Option::is_none")]
    pub group_name: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If true, this field is required when creating new objects or editing an existing object.
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    /// Weighting for search. Lower values are considered more important. Fields with a search weight of zero will be ignored.
    #[serde(rename = "search_weight", skip_serializing_if = "Option::is_none")]
    pub search_weight: Option<i32>,
    /// Loose matches any instance of a given string; exact matches the entire field.  * `disabled` - Disabled * `loose` - Loose * `exact` - Exact
    #[serde(rename = "filter_logic", skip_serializing_if = "Option::is_none")]
    pub filter_logic: Option<FilterLogic>,
    /// Specifies the visibility of custom field in the UI  * `read-write` - Read/write * `read-only` - Read-only * `hidden` - Hidden * `hidden-ifunset` - Hidden (if unset)
    #[serde(rename = "ui_visibility", skip_serializing_if = "Option::is_none")]
    pub ui_visibility: Option<UiVisibility>,
    /// Replicate this value when cloning objects
    #[serde(rename = "is_cloneable", skip_serializing_if = "Option::is_none")]
    pub is_cloneable: Option<bool>,
    /// Default value for the field (must be a JSON value). Encapsulate strings with double quotes (e.g. \"Foo\").
    #[serde(rename = "default", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub default: Option<Option<::std::collections::HashMap<String, serde_json::Value>>>,
    /// Fields with higher weights appear lower in a form.
    #[serde(rename = "weight", skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
    /// Minimum allowed value (for numeric fields)
    #[serde(rename = "validation_minimum", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub validation_minimum: Option<Option<i32>>,
    /// Maximum allowed value (for numeric fields)
    #[serde(rename = "validation_maximum", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub validation_maximum: Option<Option<i32>>,
    /// Regular expression to enforce on text field values. Use ^ and $ to force matching of entire string. For example, <code>^[A-Z]{3}$</code> will limit values to exactly three uppercase letters.
    #[serde(rename = "validation_regex", skip_serializing_if = "Option::is_none")]
    pub validation_regex: Option<String>,
    #[serde(rename = "choice_set", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub choice_set: Option<Option<i32>>,
}

impl PatchedWritableCustomFieldRequest {
    /// Extends the built-in ModelSerializer to enforce calling full_clean() on a copy of the associated instance during validation. (DRF does not do this by default; see https://github.com/encode/django-rest-framework/issues/3144)
    pub fn new() -> PatchedWritableCustomFieldRequest {
        PatchedWritableCustomFieldRequest {
            content_types: None,
            r#type: None,
            object_type: None,
            name: None,
            label: None,
            group_name: None,
            description: None,
            required: None,
            search_weight: None,
            filter_logic: None,
            ui_visibility: None,
            is_cloneable: None,
            default: None,
            weight: None,
            validation_minimum: None,
            validation_maximum: None,
            validation_regex: None,
            choice_set: None,
        }
    }
}

/// The type of data this custom field holds  * `text` - Text * `longtext` - Text (long) * `integer` - Integer * `decimal` - Decimal * `boolean` - Boolean (true/false) * `date` - Date * `datetime` - Date & time * `url` - URL * `json` - JSON * `select` - Selection * `multiselect` - Multiple selection * `object` - Object * `multiobject` - Multiple objects
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "text")]
    Text,
    #[serde(rename = "longtext")]
    Longtext,
    #[serde(rename = "integer")]
    Integer,
    #[serde(rename = "decimal")]
    Decimal,
    #[serde(rename = "boolean")]
    Boolean,
    #[serde(rename = "date")]
    Date,
    #[serde(rename = "datetime")]
    Datetime,
    #[serde(rename = "url")]
    Url,
    #[serde(rename = "json")]
    Json,
    #[serde(rename = "select")]
    Select,
    #[serde(rename = "multiselect")]
    Multiselect,
    #[serde(rename = "object")]
    Object,
    #[serde(rename = "multiobject")]
    Multiobject,
}

impl Default for Type {
    fn default() -> Type {
        Self::Text
    }
}
/// Loose matches any instance of a given string; exact matches the entire field.  * `disabled` - Disabled * `loose` - Loose * `exact` - Exact
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum FilterLogic {
    #[serde(rename = "disabled")]
    Disabled,
    #[serde(rename = "loose")]
    Loose,
    #[serde(rename = "exact")]
    Exact,
}

impl Default for FilterLogic {
    fn default() -> FilterLogic {
        Self::Disabled
    }
}
/// Specifies the visibility of custom field in the UI  * `read-write` - Read/write * `read-only` - Read-only * `hidden` - Hidden * `hidden-ifunset` - Hidden (if unset)
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum UiVisibility {
    #[serde(rename = "read-write")]
    ReadWrite,
    #[serde(rename = "read-only")]
    ReadOnly,
    #[serde(rename = "hidden")]
    Hidden,
    #[serde(rename = "hidden-ifunset")]
    HiddenIfunset,
}

impl Default for UiVisibility {
    fn default() -> UiVisibility {
        Self::ReadWrite
    }
}


/*
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0 (3.6)
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Circuit : Adds support for custom fields and tags.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Circuit {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "display")]
    pub display: String,
    /// Unique circuit ID
    #[serde(rename = "cid")]
    pub cid: String,
    #[serde(rename = "provider")]
    pub provider: Box<crate::models::NestedProvider>,
    #[serde(rename = "provider_account", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub provider_account: Option<Option<Box<crate::models::NestedProviderAccount>>>,
    #[serde(rename = "type")]
    pub r#type: Box<crate::models::NestedCircuitType>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Box<crate::models::CircuitStatus>>,
    #[serde(rename = "tenant", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tenant: Option<Option<Box<crate::models::NestedTenant>>>,
    #[serde(rename = "install_date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub install_date: Option<Option<String>>,
    #[serde(rename = "termination_date", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub termination_date: Option<Option<String>>,
    /// Committed rate
    #[serde(rename = "commit_rate", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub commit_rate: Option<Option<i32>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "termination_a", deserialize_with = "Option::deserialize")]
    pub termination_a: Option<Box<crate::models::CircuitCircuitTermination>>,
    #[serde(rename = "termination_z", deserialize_with = "Option::deserialize")]
    pub termination_z: Option<Box<crate::models::CircuitCircuitTermination>>,
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::NestedTag>>,
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "created", deserialize_with = "Option::deserialize")]
    pub created: Option<String>,
    #[serde(rename = "last_updated", deserialize_with = "Option::deserialize")]
    pub last_updated: Option<String>,
}

impl Circuit {
    /// Adds support for custom fields and tags.
    pub fn new(id: i32, url: String, display: String, cid: String, provider: crate::models::NestedProvider, r#type: crate::models::NestedCircuitType, termination_a: Option<crate::models::CircuitCircuitTermination>, termination_z: Option<crate::models::CircuitCircuitTermination>, created: Option<String>, last_updated: Option<String>) -> Circuit {
        Circuit {
            id,
            url,
            display,
            cid,
            provider: Box::new(provider),
            provider_account: None,
            r#type: Box::new(r#type),
            status: None,
            tenant: None,
            install_date: None,
            termination_date: None,
            commit_rate: None,
            description: None,
            termination_a: if let Some(x) = termination_a {Some(Box::new(x))} else {None},
            termination_z: if let Some(x) = termination_z {Some(Box::new(x))} else {None},
            comments: None,
            tags: None,
            custom_fields: None,
            created,
            last_updated,
        }
    }
}



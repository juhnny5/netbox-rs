/*
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0 (3.6)
 * 
 * Generated by: https://openapi-generator.tech
 */

/// PatchedWritableDeviceTypeRequest : Adds support for custom fields and tags.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PatchedWritableDeviceTypeRequest {
    #[serde(rename = "manufacturer", skip_serializing_if = "Option::is_none")]
    pub manufacturer: Option<i32>,
    #[serde(rename = "default_platform", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub default_platform: Option<Option<i32>>,
    #[serde(rename = "model", skip_serializing_if = "Option::is_none")]
    pub model: Option<String>,
    #[serde(rename = "slug", skip_serializing_if = "Option::is_none")]
    pub slug: Option<String>,
    /// Discrete part number (optional)
    #[serde(rename = "part_number", skip_serializing_if = "Option::is_none")]
    pub part_number: Option<String>,
    #[serde(rename = "u_height", skip_serializing_if = "Option::is_none")]
    pub u_height: Option<f64>,
    /// Device consumes both front and rear rack faces
    #[serde(rename = "is_full_depth", skip_serializing_if = "Option::is_none")]
    pub is_full_depth: Option<bool>,
    /// Parent devices house child devices in device bays. Leave blank if this device type is neither a parent nor a child.  * `parent` - Parent * `child` - Child
    #[serde(rename = "subdevice_role", skip_serializing_if = "Option::is_none")]
    pub subdevice_role: Option<SubdeviceRole>,
    /// * `front-to-rear` - Front to rear * `rear-to-front` - Rear to front * `left-to-right` - Left to right * `right-to-left` - Right to left * `side-to-rear` - Side to rear * `passive` - Passive * `mixed` - Mixed
    #[serde(rename = "airflow", skip_serializing_if = "Option::is_none")]
    pub airflow: Option<Airflow>,
    #[serde(rename = "weight", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub weight: Option<Option<f64>>,
    /// * `kg` - Kilograms * `g` - Grams * `lb` - Pounds * `oz` - Ounces
    #[serde(rename = "weight_unit", skip_serializing_if = "Option::is_none")]
    pub weight_unit: Option<WeightUnit>,
    #[serde(rename = "front_image", skip_serializing_if = "Option::is_none")]
    pub front_image: Option<std::path::PathBuf>,
    #[serde(rename = "rear_image", skip_serializing_if = "Option::is_none")]
    pub rear_image: Option<std::path::PathBuf>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::NestedTagRequest>>,
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<::std::collections::HashMap<String, serde_json::Value>>,
}

impl PatchedWritableDeviceTypeRequest {
    /// Adds support for custom fields and tags.
    pub fn new() -> PatchedWritableDeviceTypeRequest {
        PatchedWritableDeviceTypeRequest {
            manufacturer: None,
            default_platform: None,
            model: None,
            slug: None,
            part_number: None,
            u_height: None,
            is_full_depth: None,
            subdevice_role: None,
            airflow: None,
            weight: None,
            weight_unit: None,
            front_image: None,
            rear_image: None,
            description: None,
            comments: None,
            tags: None,
            custom_fields: None,
        }
    }
}

/// Parent devices house child devices in device bays. Leave blank if this device type is neither a parent nor a child.  * `parent` - Parent * `child` - Child
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum SubdeviceRole {
    #[serde(rename = "parent")]
    Parent,
    #[serde(rename = "child")]
    Child,
    #[serde(rename = "")]
    Empty,
}

impl Default for SubdeviceRole {
    fn default() -> SubdeviceRole {
        Self::Parent
    }
}
/// * `front-to-rear` - Front to rear * `rear-to-front` - Rear to front * `left-to-right` - Left to right * `right-to-left` - Right to left * `side-to-rear` - Side to rear * `passive` - Passive * `mixed` - Mixed
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Airflow {
    #[serde(rename = "front-to-rear")]
    FrontToRear,
    #[serde(rename = "rear-to-front")]
    RearToFront,
    #[serde(rename = "left-to-right")]
    LeftToRight,
    #[serde(rename = "right-to-left")]
    RightToLeft,
    #[serde(rename = "side-to-rear")]
    SideToRear,
    #[serde(rename = "passive")]
    Passive,
    #[serde(rename = "mixed")]
    Mixed,
    #[serde(rename = "")]
    Empty,
}

impl Default for Airflow {
    fn default() -> Airflow {
        Self::FrontToRear
    }
}
/// * `kg` - Kilograms * `g` - Grams * `lb` - Pounds * `oz` - Ounces
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum WeightUnit {
    #[serde(rename = "kg")]
    Kg,
    #[serde(rename = "g")]
    G,
    #[serde(rename = "lb")]
    Lb,
    #[serde(rename = "oz")]
    Oz,
    #[serde(rename = "")]
    Empty,
}

impl Default for WeightUnit {
    fn default() -> WeightUnit {
        Self::Kg
    }
}


/*
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0 (3.6)
 * 
 * Generated by: https://openapi-generator.tech
 */

/// CircuitCircuitTermination : Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a dictionary of attributes which can be used to uniquely identify the related object. This class should be subclassed to return a full representation of the related object on read.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CircuitCircuitTermination {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "display")]
    pub display: String,
    #[serde(rename = "site", deserialize_with = "Option::deserialize")]
    pub site: Option<Box<crate::models::NestedSite>>,
    #[serde(rename = "provider_network", deserialize_with = "Option::deserialize")]
    pub provider_network: Option<Box<crate::models::NestedProviderNetwork>>,
    /// Physical circuit speed
    #[serde(rename = "port_speed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub port_speed: Option<Option<i32>>,
    /// Upstream speed, if different from port speed
    #[serde(rename = "upstream_speed", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub upstream_speed: Option<Option<i32>>,
    /// ID of the local cross-connect
    #[serde(rename = "xconnect_id", skip_serializing_if = "Option::is_none")]
    pub xconnect_id: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
}

impl CircuitCircuitTermination {
    /// Represents an object related through a ForeignKey field. On write, it accepts a primary key (PK) value or a dictionary of attributes which can be used to uniquely identify the related object. This class should be subclassed to return a full representation of the related object on read.
    pub fn new(id: i32, url: String, display: String, site: Option<crate::models::NestedSite>, provider_network: Option<crate::models::NestedProviderNetwork>) -> CircuitCircuitTermination {
        CircuitCircuitTermination {
            id,
            url,
            display,
            site: if let Some(x) = site {Some(Box::new(x))} else {None},
            provider_network: if let Some(x) = provider_network {Some(Box::new(x))} else {None},
            port_speed: None,
            upstream_speed: None,
            xconnect_id: None,
            description: None,
        }
    }
}



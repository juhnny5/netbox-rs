/*
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0 (3.6)
 * 
 * Generated by: https://openapi-generator.tech
 */

/// PatchedWritableJournalEntryRequest : Adds support for custom fields and tags.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PatchedWritableJournalEntryRequest {
    #[serde(rename = "assigned_object_type", skip_serializing_if = "Option::is_none")]
    pub assigned_object_type: Option<String>,
    #[serde(rename = "assigned_object_id", skip_serializing_if = "Option::is_none")]
    pub assigned_object_id: Option<i64>,
    #[serde(rename = "created_by", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub created_by: Option<Option<i32>>,
    /// * `info` - Info * `success` - Success * `warning` - Warning * `danger` - Danger
    #[serde(rename = "kind", skip_serializing_if = "Option::is_none")]
    pub kind: Option<Kind>,
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::NestedTagRequest>>,
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<::std::collections::HashMap<String, serde_json::Value>>,
}

impl PatchedWritableJournalEntryRequest {
    /// Adds support for custom fields and tags.
    pub fn new() -> PatchedWritableJournalEntryRequest {
        PatchedWritableJournalEntryRequest {
            assigned_object_type: None,
            assigned_object_id: None,
            created_by: None,
            kind: None,
            comments: None,
            tags: None,
            custom_fields: None,
        }
    }
}

/// * `info` - Info * `success` - Success * `warning` - Warning * `danger` - Danger
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Kind {
    #[serde(rename = "info")]
    Info,
    #[serde(rename = "success")]
    Success,
    #[serde(rename = "warning")]
    Warning,
    #[serde(rename = "danger")]
    Danger,
}

impl Default for Kind {
    fn default() -> Kind {
        Self::Info
    }
}


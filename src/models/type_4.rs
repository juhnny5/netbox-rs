/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Type4 {
    #[serde(rename = "label")]
    pub label: Label,
    #[serde(rename = "value")]
    pub value: Value,
}

impl Type4 {
    pub fn new(label: Label, value: Value) -> Type4 {
        Type4 {
            label,
            value,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Label {
    #[serde(rename = "C5")]
    C5,
    #[serde(rename = "C7")]
    C7,
    #[serde(rename = "C13")]
    C13,
    #[serde(rename = "C15")]
    C15,
    #[serde(rename = "C19")]
    C19,
    #[serde(rename = "C21")]
    C21,
    #[serde(rename = "P+N+E 4H")]
    PPlusNPlusE4H,
    #[serde(rename = "P+N+E 6H")]
    PPlusNPlusE6H,
    #[serde(rename = "P+N+E 9H")]
    PPlusNPlusE9H,
    #[serde(rename = "2P+E 4H")]
    Variant2PPlusE4H,
    #[serde(rename = "2P+E 6H")]
    Variant2PPlusE6H,
    #[serde(rename = "2P+E 9H")]
    Variant2PPlusE9H,
    #[serde(rename = "3P+E 4H")]
    Variant3PPlusE4H,
    #[serde(rename = "3P+E 6H")]
    Variant3PPlusE6H,
    #[serde(rename = "3P+E 9H")]
    Variant3PPlusE9H,
    #[serde(rename = "3P+N+E 4H")]
    Variant3PPlusNPlusE4H,
    #[serde(rename = "3P+N+E 6H")]
    Variant3PPlusNPlusE6H,
    #[serde(rename = "3P+N+E 9H")]
    Variant3PPlusNPlusE9H,
    #[serde(rename = "NEMA 1-15R")]
    Nema115R,
    #[serde(rename = "NEMA 5-15R")]
    Nema515R,
    #[serde(rename = "NEMA 5-20R")]
    Nema520R,
    #[serde(rename = "NEMA 5-30R")]
    Nema530R,
    #[serde(rename = "NEMA 5-50R")]
    Nema550R,
    #[serde(rename = "NEMA 6-15R")]
    Nema615R,
    #[serde(rename = "NEMA 6-20R")]
    Nema620R,
    #[serde(rename = "NEMA 6-30R")]
    Nema630R,
    #[serde(rename = "NEMA 6-50R")]
    Nema650R,
    #[serde(rename = "NEMA 10-30R")]
    Nema1030R,
    #[serde(rename = "NEMA 10-50R")]
    Nema1050R,
    #[serde(rename = "NEMA 14-20R")]
    Nema1420R,
    #[serde(rename = "NEMA 14-30R")]
    Nema1430R,
    #[serde(rename = "NEMA 14-50R")]
    Nema1450R,
    #[serde(rename = "NEMA 14-60R")]
    Nema1460R,
    #[serde(rename = "NEMA 15-15R")]
    Nema1515R,
    #[serde(rename = "NEMA 15-20R")]
    Nema1520R,
    #[serde(rename = "NEMA 15-30R")]
    Nema1530R,
    #[serde(rename = "NEMA 15-50R")]
    Nema1550R,
    #[serde(rename = "NEMA 15-60R")]
    Nema1560R,
    #[serde(rename = "NEMA L1-15R")]
    NemaL115R,
    #[serde(rename = "NEMA L5-15R")]
    NemaL515R,
    #[serde(rename = "NEMA L5-20R")]
    NemaL520R,
    #[serde(rename = "NEMA L5-30R")]
    NemaL530R,
    #[serde(rename = "NEMA L5-50R")]
    NemaL550R,
    #[serde(rename = "NEMA L6-15R")]
    NemaL615R,
    #[serde(rename = "NEMA L6-20R")]
    NemaL620R,
    #[serde(rename = "NEMA L6-30R")]
    NemaL630R,
    #[serde(rename = "NEMA L6-50R")]
    NemaL650R,
    #[serde(rename = "NEMA L10-30R")]
    NemaL1030R,
    #[serde(rename = "NEMA L14-20R")]
    NemaL1420R,
    #[serde(rename = "NEMA L14-30R")]
    NemaL1430R,
    #[serde(rename = "NEMA L14-50R")]
    NemaL1450R,
    #[serde(rename = "NEMA L14-60R")]
    NemaL1460R,
    #[serde(rename = "NEMA L15-20R")]
    NemaL1520R,
    #[serde(rename = "NEMA L15-30R")]
    NemaL1530R,
    #[serde(rename = "NEMA L15-50R")]
    NemaL1550R,
    #[serde(rename = "NEMA L15-60R")]
    NemaL1560R,
    #[serde(rename = "NEMA L21-20R")]
    NemaL2120R,
    #[serde(rename = "NEMA L21-30R")]
    NemaL2130R,
    #[serde(rename = "NEMA L22-30R")]
    NemaL2230R,
    #[serde(rename = "CS6360C")]
    Cs6360C,
    #[serde(rename = "CS6364C")]
    Cs6364C,
    #[serde(rename = "CS8164C")]
    Cs8164C,
    #[serde(rename = "CS8264C")]
    Cs8264C,
    #[serde(rename = "CS8364C")]
    Cs8364C,
    #[serde(rename = "CS8464C")]
    Cs8464C,
    #[serde(rename = "ITA Type E (CEE 7/5)")]
    ItaTypeELeftParenthesisCee7Slash5RightParenthesis,
    #[serde(rename = "ITA Type F (CEE 7/3)")]
    ItaTypeFLeftParenthesisCee7Slash3RightParenthesis,
    #[serde(rename = "ITA Type G (BS 1363)")]
    ItaTypeGLeftParenthesisBs1363RightParenthesis,
    #[serde(rename = "ITA Type H")]
    ItaTypeH,
    #[serde(rename = "ITA Type I")]
    ItaTypeI,
    #[serde(rename = "ITA Type J")]
    ItaTypeJ,
    #[serde(rename = "ITA Type K")]
    ItaTypeK,
    #[serde(rename = "ITA Type L (CEI 23-50)")]
    ItaTypeLLeftParenthesisCei2350RightParenthesis,
    #[serde(rename = "ITA Type M (BS 546)")]
    ItaTypeMLeftParenthesisBs546RightParenthesis,
    #[serde(rename = "ITA Type N")]
    ItaTypeN,
    #[serde(rename = "ITA Type O")]
    ItaTypeO,
    #[serde(rename = "ITA Multistandard")]
    ItaMultistandard,
    #[serde(rename = "USB Type A")]
    UsbTypeA,
    #[serde(rename = "USB Micro B")]
    UsbMicroB,
    #[serde(rename = "USB Type C")]
    UsbTypeC,
    #[serde(rename = "DC Terminal")]
    DcTerminal,
    #[serde(rename = "HDOT Cx")]
    HdotCx,
    #[serde(rename = "Saf-D-Grid")]
    SafDGrid,
    #[serde(rename = "Neutrik powerCON (20A)")]
    NeutrikPowerConLeftParenthesis20ARightParenthesis,
    #[serde(rename = "Neutrik powerCON (32A)")]
    NeutrikPowerConLeftParenthesis32ARightParenthesis,
    #[serde(rename = "Neutrik powerCON TRUE1")]
    NeutrikPowerConTrue1,
    #[serde(rename = "Neutrik powerCON TRUE1 TOP")]
    NeutrikPowerConTrue1Top,
    #[serde(rename = "Ubiquiti SmartPower")]
    UbiquitiSmartPower,
    #[serde(rename = "Hardwired")]
    Hardwired,
    #[serde(rename = "Other")]
    Other,
}

impl Default for Label {
    fn default() -> Label {
        Self::C5
    }
}
/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Value {
    #[serde(rename = "iec-60320-c5")]
    Iec60320C5,
    #[serde(rename = "iec-60320-c7")]
    Iec60320C7,
    #[serde(rename = "iec-60320-c13")]
    Iec60320C13,
    #[serde(rename = "iec-60320-c15")]
    Iec60320C15,
    #[serde(rename = "iec-60320-c19")]
    Iec60320C19,
    #[serde(rename = "iec-60320-c21")]
    Iec60320C21,
    #[serde(rename = "iec-60309-p-n-e-4h")]
    Iec60309PNE4h,
    #[serde(rename = "iec-60309-p-n-e-6h")]
    Iec60309PNE6h,
    #[serde(rename = "iec-60309-p-n-e-9h")]
    Iec60309PNE9h,
    #[serde(rename = "iec-60309-2p-e-4h")]
    Iec603092pE4h,
    #[serde(rename = "iec-60309-2p-e-6h")]
    Iec603092pE6h,
    #[serde(rename = "iec-60309-2p-e-9h")]
    Iec603092pE9h,
    #[serde(rename = "iec-60309-3p-e-4h")]
    Iec603093pE4h,
    #[serde(rename = "iec-60309-3p-e-6h")]
    Iec603093pE6h,
    #[serde(rename = "iec-60309-3p-e-9h")]
    Iec603093pE9h,
    #[serde(rename = "iec-60309-3p-n-e-4h")]
    Iec603093pNE4h,
    #[serde(rename = "iec-60309-3p-n-e-6h")]
    Iec603093pNE6h,
    #[serde(rename = "iec-60309-3p-n-e-9h")]
    Iec603093pNE9h,
    #[serde(rename = "nema-1-15r")]
    Nema115r,
    #[serde(rename = "nema-5-15r")]
    Nema515r,
    #[serde(rename = "nema-5-20r")]
    Nema520r,
    #[serde(rename = "nema-5-30r")]
    Nema530r,
    #[serde(rename = "nema-5-50r")]
    Nema550r,
    #[serde(rename = "nema-6-15r")]
    Nema615r,
    #[serde(rename = "nema-6-20r")]
    Nema620r,
    #[serde(rename = "nema-6-30r")]
    Nema630r,
    #[serde(rename = "nema-6-50r")]
    Nema650r,
    #[serde(rename = "nema-10-30r")]
    Nema1030r,
    #[serde(rename = "nema-10-50r")]
    Nema1050r,
    #[serde(rename = "nema-14-20r")]
    Nema1420r,
    #[serde(rename = "nema-14-30r")]
    Nema1430r,
    #[serde(rename = "nema-14-50r")]
    Nema1450r,
    #[serde(rename = "nema-14-60r")]
    Nema1460r,
    #[serde(rename = "nema-15-15r")]
    Nema1515r,
    #[serde(rename = "nema-15-20r")]
    Nema1520r,
    #[serde(rename = "nema-15-30r")]
    Nema1530r,
    #[serde(rename = "nema-15-50r")]
    Nema1550r,
    #[serde(rename = "nema-15-60r")]
    Nema1560r,
    #[serde(rename = "nema-l1-15r")]
    NemaL115r,
    #[serde(rename = "nema-l5-15r")]
    NemaL515r,
    #[serde(rename = "nema-l5-20r")]
    NemaL520r,
    #[serde(rename = "nema-l5-30r")]
    NemaL530r,
    #[serde(rename = "nema-l5-50r")]
    NemaL550r,
    #[serde(rename = "nema-l6-15r")]
    NemaL615r,
    #[serde(rename = "nema-l6-20r")]
    NemaL620r,
    #[serde(rename = "nema-l6-30r")]
    NemaL630r,
    #[serde(rename = "nema-l6-50r")]
    NemaL650r,
    #[serde(rename = "nema-l10-30r")]
    NemaL1030r,
    #[serde(rename = "nema-l14-20r")]
    NemaL1420r,
    #[serde(rename = "nema-l14-30r")]
    NemaL1430r,
    #[serde(rename = "nema-l14-50r")]
    NemaL1450r,
    #[serde(rename = "nema-l14-60r")]
    NemaL1460r,
    #[serde(rename = "nema-l15-20r")]
    NemaL1520r,
    #[serde(rename = "nema-l15-30r")]
    NemaL1530r,
    #[serde(rename = "nema-l15-50r")]
    NemaL1550r,
    #[serde(rename = "nema-l15-60r")]
    NemaL1560r,
    #[serde(rename = "nema-l21-20r")]
    NemaL2120r,
    #[serde(rename = "nema-l21-30r")]
    NemaL2130r,
    #[serde(rename = "nema-l22-30r")]
    NemaL2230r,
    #[serde(rename = "CS6360C")]
    Cs6360C,
    #[serde(rename = "CS6364C")]
    Cs6364C,
    #[serde(rename = "CS8164C")]
    Cs8164C,
    #[serde(rename = "CS8264C")]
    Cs8264C,
    #[serde(rename = "CS8364C")]
    Cs8364C,
    #[serde(rename = "CS8464C")]
    Cs8464C,
    #[serde(rename = "ita-e")]
    ItaE,
    #[serde(rename = "ita-f")]
    ItaF,
    #[serde(rename = "ita-g")]
    ItaG,
    #[serde(rename = "ita-h")]
    ItaH,
    #[serde(rename = "ita-i")]
    ItaI,
    #[serde(rename = "ita-j")]
    ItaJ,
    #[serde(rename = "ita-k")]
    ItaK,
    #[serde(rename = "ita-l")]
    ItaL,
    #[serde(rename = "ita-m")]
    ItaM,
    #[serde(rename = "ita-n")]
    ItaN,
    #[serde(rename = "ita-o")]
    ItaO,
    #[serde(rename = "ita-multistandard")]
    ItaMultistandard,
    #[serde(rename = "usb-a")]
    UsbA,
    #[serde(rename = "usb-micro-b")]
    UsbMicroB,
    #[serde(rename = "usb-c")]
    UsbC,
    #[serde(rename = "dc-terminal")]
    DcTerminal,
    #[serde(rename = "hdot-cx")]
    HdotCx,
    #[serde(rename = "saf-d-grid")]
    SafDGrid,
    #[serde(rename = "neutrik-powercon-20a")]
    NeutrikPowercon20a,
    #[serde(rename = "neutrik-powercon-32a")]
    NeutrikPowercon32a,
    #[serde(rename = "neutrik-powercon-true1")]
    NeutrikPowerconTrue1,
    #[serde(rename = "neutrik-powercon-true1-top")]
    NeutrikPowerconTrue1Top,
    #[serde(rename = "ubiquiti-smartpower")]
    UbiquitiSmartpower,
    #[serde(rename = "hardwired")]
    Hardwired,
    #[serde(rename = "other")]
    Other,
}

impl Default for Value {
    fn default() -> Value {
        Self::Iec60320C5
    }
}


/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RackReservation {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "display", skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[serde(rename = "rack", deserialize_with = "Option::deserialize")]
    pub rack: Option<Box<crate::models::NestedRack>>,
    #[serde(rename = "units")]
    pub units: Vec<i32>,
    #[serde(rename = "created", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub created: Option<Option<String>>,
    #[serde(rename = "last_updated", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<Option<String>>,
    #[serde(rename = "user")]
    pub user: Box<crate::models::NestedUser>,
    #[serde(rename = "tenant", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tenant: Option<Option<Box<crate::models::NestedTenant>>>,
    #[serde(rename = "description")]
    pub description: String,
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::NestedTag>>,
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<serde_json::Value>,
}

impl RackReservation {
    pub fn new(rack: Option<crate::models::NestedRack>, units: Vec<i32>, user: crate::models::NestedUser, description: String) -> RackReservation {
        RackReservation {
            id: None,
            url: None,
            display: None,
            rack: if let Some(x) = rack {Some(Box::new(x))} else {None},
            units,
            created: None,
            last_updated: None,
            user: Box::new(user),
            tenant: None,
            description,
            comments: None,
            tags: None,
            custom_fields: None,
        }
    }
}



/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CableTermination {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "display", skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[serde(rename = "cable")]
    pub cable: i32,
    #[serde(rename = "cable_end")]
    pub cable_end: CableEnd,
    #[serde(rename = "termination_type")]
    pub termination_type: String,
    #[serde(rename = "termination_id")]
    pub termination_id: i32,
    #[serde(rename = "termination", skip_serializing_if = "Option::is_none")]
    pub termination: Option<serde_json::Value>,
}

impl CableTermination {
    pub fn new(cable: i32, cable_end: CableEnd, termination_type: String, termination_id: i32) -> CableTermination {
        CableTermination {
            id: None,
            url: None,
            display: None,
            cable,
            cable_end,
            termination_type,
            termination_id,
            termination: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum CableEnd {
    #[serde(rename = "A")]
    A,
    #[serde(rename = "B")]
    B,
}

impl Default for CableEnd {
    fn default() -> CableEnd {
        Self::A
    }
}


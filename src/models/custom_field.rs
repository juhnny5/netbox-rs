/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct CustomField {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "display", skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[serde(rename = "content_types")]
    pub content_types: Vec<String>,
    #[serde(rename = "type")]
    pub r#type: Box<crate::models::Type7>,
    #[serde(rename = "object_type", skip_serializing_if = "Option::is_none")]
    pub object_type: Option<String>,
    #[serde(rename = "data_type", skip_serializing_if = "Option::is_none")]
    pub data_type: Option<String>,
    /// Internal field name
    #[serde(rename = "name")]
    pub name: String,
    /// Name of the field as displayed to users (if not provided, the field's name will be used)
    #[serde(rename = "label", skip_serializing_if = "Option::is_none")]
    pub label: Option<String>,
    /// Custom fields within the same group will be displayed together
    #[serde(rename = "group_name", skip_serializing_if = "Option::is_none")]
    pub group_name: Option<String>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    /// If true, this field is required when creating new objects or editing an existing object.
    #[serde(rename = "required", skip_serializing_if = "Option::is_none")]
    pub required: Option<bool>,
    /// Weighting for search. Lower values are considered more important. Fields with a search weight of zero will be ignored.
    #[serde(rename = "search_weight", skip_serializing_if = "Option::is_none")]
    pub search_weight: Option<i32>,
    #[serde(rename = "filter_logic", skip_serializing_if = "Option::is_none")]
    pub filter_logic: Option<Box<crate::models::FilterLogic>>,
    #[serde(rename = "ui_visibility", skip_serializing_if = "Option::is_none")]
    pub ui_visibility: Option<Box<crate::models::UiVisibility>>,
    /// Default value for the field (must be a JSON value). Encapsulate strings with double quotes (e.g. \"Foo\").
    #[serde(rename = "default", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub default: Option<Option<serde_json::Value>>,
    /// Fields with higher weights appear lower in a form.
    #[serde(rename = "weight", skip_serializing_if = "Option::is_none")]
    pub weight: Option<i32>,
    /// Minimum allowed value (for numeric fields)
    #[serde(rename = "validation_minimum", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub validation_minimum: Option<Option<i32>>,
    /// Maximum allowed value (for numeric fields)
    #[serde(rename = "validation_maximum", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub validation_maximum: Option<Option<i32>>,
    /// Regular expression to enforce on text field values. Use ^ and $ to force matching of entire string. For example, <code>^[A-Z]{3}$</code> will limit values to exactly three uppercase letters.
    #[serde(rename = "validation_regex", skip_serializing_if = "Option::is_none")]
    pub validation_regex: Option<String>,
    /// Comma-separated list of available choices (for selection fields)
    #[serde(rename = "choices", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub choices: Option<Option<Vec<String>>>,
    #[serde(rename = "created", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub created: Option<Option<String>>,
    #[serde(rename = "last_updated", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<Option<String>>,
}

impl CustomField {
    pub fn new(content_types: Vec<String>, r#type: crate::models::Type7, name: String) -> CustomField {
        CustomField {
            id: None,
            url: None,
            display: None,
            content_types,
            r#type: Box::new(r#type),
            object_type: None,
            data_type: None,
            name,
            label: None,
            group_name: None,
            description: None,
            required: None,
            search_weight: None,
            filter_logic: None,
            ui_visibility: None,
            default: None,
            weight: None,
            validation_minimum: None,
            validation_maximum: None,
            validation_regex: None,
            choices: None,
            created: None,
            last_updated: None,
        }
    }
}



/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct WritableVmInterface {
    #[serde(rename = "id", skip_serializing_if = "Option::is_none")]
    pub id: Option<i32>,
    #[serde(rename = "url", skip_serializing_if = "Option::is_none")]
    pub url: Option<String>,
    #[serde(rename = "display", skip_serializing_if = "Option::is_none")]
    pub display: Option<String>,
    #[serde(rename = "virtual_machine")]
    pub virtual_machine: i32,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "parent", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub parent: Option<Option<i32>>,
    #[serde(rename = "bridge", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub bridge: Option<Option<i32>>,
    #[serde(rename = "mtu", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mtu: Option<Option<i32>>,
    #[serde(rename = "mac_address", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mac_address: Option<Option<String>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "mode", skip_serializing_if = "Option::is_none")]
    pub mode: Option<Mode>,
    #[serde(rename = "untagged_vlan", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub untagged_vlan: Option<Option<i32>>,
    #[serde(rename = "tagged_vlans", skip_serializing_if = "Option::is_none")]
    pub tagged_vlans: Option<Vec<i32>>,
    #[serde(rename = "vrf", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub vrf: Option<Option<i32>>,
    #[serde(rename = "l2vpn_termination", skip_serializing_if = "Option::is_none")]
    pub l2vpn_termination: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::NestedTag>>,
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<serde_json::Value>,
    #[serde(rename = "created", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub created: Option<Option<String>>,
    #[serde(rename = "last_updated", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub last_updated: Option<Option<String>>,
    #[serde(rename = "count_ipaddresses", skip_serializing_if = "Option::is_none")]
    pub count_ipaddresses: Option<i32>,
    #[serde(rename = "count_fhrp_groups", skip_serializing_if = "Option::is_none")]
    pub count_fhrp_groups: Option<i32>,
}

impl WritableVmInterface {
    pub fn new(virtual_machine: i32, name: String) -> WritableVmInterface {
        WritableVmInterface {
            id: None,
            url: None,
            display: None,
            virtual_machine,
            name,
            enabled: None,
            parent: None,
            bridge: None,
            mtu: None,
            mac_address: None,
            description: None,
            mode: None,
            untagged_vlan: None,
            tagged_vlans: None,
            vrf: None,
            l2vpn_termination: None,
            tags: None,
            custom_fields: None,
            created: None,
            last_updated: None,
            count_ipaddresses: None,
            count_fhrp_groups: None,
        }
    }
}

/// 
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Mode {
    #[serde(rename = "access")]
    Access,
    #[serde(rename = "tagged")]
    Tagged,
    #[serde(rename = "tagged-all")]
    TaggedAll,
}

impl Default for Mode {
    fn default() -> Mode {
        Self::Access
    }
}


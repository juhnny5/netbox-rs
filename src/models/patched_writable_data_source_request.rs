/*
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0 (3.6)
 * 
 * Generated by: https://openapi-generator.tech
 */

/// PatchedWritableDataSourceRequest : Adds support for custom fields and tags.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PatchedWritableDataSourceRequest {
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// * `local` - Local * `git` - Git * `amazon-s3` - Amazon S3
    #[serde(rename = "type", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Type>,
    #[serde(rename = "source_url", skip_serializing_if = "Option::is_none")]
    pub source_url: Option<String>,
    #[serde(rename = "enabled", skip_serializing_if = "Option::is_none")]
    pub enabled: Option<bool>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "parameters", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub parameters: Option<Option<::std::collections::HashMap<String, serde_json::Value>>>,
    /// Patterns (one per line) matching files to ignore when syncing
    #[serde(rename = "ignore_rules", skip_serializing_if = "Option::is_none")]
    pub ignore_rules: Option<String>,
}

impl PatchedWritableDataSourceRequest {
    /// Adds support for custom fields and tags.
    pub fn new() -> PatchedWritableDataSourceRequest {
        PatchedWritableDataSourceRequest {
            name: None,
            r#type: None,
            source_url: None,
            enabled: None,
            description: None,
            comments: None,
            parameters: None,
            ignore_rules: None,
        }
    }
}

/// * `local` - Local * `git` - Git * `amazon-s3` - Amazon S3
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "local")]
    Local,
    #[serde(rename = "git")]
    Git,
    #[serde(rename = "amazon-s3")]
    AmazonS3,
}

impl Default for Type {
    fn default() -> Type {
        Self::Local
    }
}


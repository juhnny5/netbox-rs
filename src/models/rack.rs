/*
 * NetBox REST API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 3.6.0 (3.6)
 * 
 * Generated by: https://openapi-generator.tech
 */

/// Rack : Adds support for custom fields and tags.



#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Rack {
    #[serde(rename = "id")]
    pub id: i32,
    #[serde(rename = "url")]
    pub url: String,
    #[serde(rename = "display")]
    pub display: String,
    #[serde(rename = "name")]
    pub name: String,
    #[serde(rename = "facility_id", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub facility_id: Option<Option<String>>,
    #[serde(rename = "site")]
    pub site: Box<crate::models::NestedSite>,
    #[serde(rename = "location", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub location: Option<Option<Box<crate::models::NestedLocation>>>,
    #[serde(rename = "tenant", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub tenant: Option<Option<Box<crate::models::NestedTenant>>>,
    #[serde(rename = "status", skip_serializing_if = "Option::is_none")]
    pub status: Option<Box<crate::models::RackStatus>>,
    #[serde(rename = "role", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub role: Option<Option<Box<crate::models::NestedRackRole>>>,
    #[serde(rename = "serial", skip_serializing_if = "Option::is_none")]
    pub serial: Option<String>,
    /// A unique tag used to identify this rack
    #[serde(rename = "asset_tag", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub asset_tag: Option<Option<String>>,
    #[serde(rename = "type", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub r#type: Option<Option<Box<crate::models::RackType>>>,
    #[serde(rename = "width", skip_serializing_if = "Option::is_none")]
    pub width: Option<Box<crate::models::RackWidth>>,
    /// Height in rack units
    #[serde(rename = "u_height", skip_serializing_if = "Option::is_none")]
    pub u_height: Option<i32>,
    /// Starting unit for rack
    #[serde(rename = "starting_unit", skip_serializing_if = "Option::is_none")]
    pub starting_unit: Option<i32>,
    #[serde(rename = "weight", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub weight: Option<Option<f64>>,
    /// Maximum load capacity for the rack
    #[serde(rename = "max_weight", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub max_weight: Option<Option<i32>>,
    #[serde(rename = "weight_unit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub weight_unit: Option<Option<Box<crate::models::DeviceTypeWeightUnit>>>,
    /// Units are numbered top-to-bottom
    #[serde(rename = "desc_units", skip_serializing_if = "Option::is_none")]
    pub desc_units: Option<bool>,
    /// Outer dimension of rack (width)
    #[serde(rename = "outer_width", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub outer_width: Option<Option<i32>>,
    /// Outer dimension of rack (depth)
    #[serde(rename = "outer_depth", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub outer_depth: Option<Option<i32>>,
    #[serde(rename = "outer_unit", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub outer_unit: Option<Option<Box<crate::models::RackOuterUnit>>>,
    /// Maximum depth of a mounted device, in millimeters. For four-post racks, this is the distance between the front and rear rails.
    #[serde(rename = "mounting_depth", default, with = "::serde_with::rust::double_option", skip_serializing_if = "Option::is_none")]
    pub mounting_depth: Option<Option<i32>>,
    #[serde(rename = "description", skip_serializing_if = "Option::is_none")]
    pub description: Option<String>,
    #[serde(rename = "comments", skip_serializing_if = "Option::is_none")]
    pub comments: Option<String>,
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<crate::models::NestedTag>>,
    #[serde(rename = "custom_fields", skip_serializing_if = "Option::is_none")]
    pub custom_fields: Option<::std::collections::HashMap<String, serde_json::Value>>,
    #[serde(rename = "created", deserialize_with = "Option::deserialize")]
    pub created: Option<String>,
    #[serde(rename = "last_updated", deserialize_with = "Option::deserialize")]
    pub last_updated: Option<String>,
    #[serde(rename = "device_count")]
    pub device_count: i32,
    #[serde(rename = "powerfeed_count")]
    pub powerfeed_count: i32,
}

impl Rack {
    /// Adds support for custom fields and tags.
    pub fn new(id: i32, url: String, display: String, name: String, site: crate::models::NestedSite, created: Option<String>, last_updated: Option<String>, device_count: i32, powerfeed_count: i32) -> Rack {
        Rack {
            id,
            url,
            display,
            name,
            facility_id: None,
            site: Box::new(site),
            location: None,
            tenant: None,
            status: None,
            role: None,
            serial: None,
            asset_tag: None,
            r#type: None,
            width: None,
            u_height: None,
            starting_unit: None,
            weight: None,
            max_weight: None,
            weight_unit: None,
            desc_units: None,
            outer_width: None,
            outer_depth: None,
            outer_unit: None,
            mounting_depth: None,
            description: None,
            comments: None,
            tags: None,
            custom_fields: None,
            created,
            last_updated,
            device_count,
            powerfeed_count,
        }
    }
}



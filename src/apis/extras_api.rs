/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`extras_config_contexts_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasConfigContextsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_config_contexts_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasConfigContextsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_config_contexts_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasConfigContextsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_config_contexts_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasConfigContextsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_config_contexts_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasConfigContextsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_config_contexts_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasConfigContextsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_config_contexts_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasConfigContextsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_config_contexts_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasConfigContextsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_config_contexts_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasConfigContextsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_content_types_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasContentTypesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_content_types_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasContentTypesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_custom_fields_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomFieldsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_custom_fields_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomFieldsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_custom_fields_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomFieldsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_custom_fields_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomFieldsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_custom_fields_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomFieldsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_custom_fields_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomFieldsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_custom_fields_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomFieldsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_custom_fields_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomFieldsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_custom_fields_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomFieldsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_custom_links_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomLinksBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_custom_links_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomLinksBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_custom_links_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomLinksBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_custom_links_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomLinksCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_custom_links_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomLinksDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_custom_links_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomLinksListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_custom_links_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomLinksPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_custom_links_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomLinksReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_custom_links_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasCustomLinksUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_export_templates_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasExportTemplatesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_export_templates_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasExportTemplatesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_export_templates_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasExportTemplatesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_export_templates_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasExportTemplatesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_export_templates_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasExportTemplatesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_export_templates_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasExportTemplatesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_export_templates_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasExportTemplatesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_export_templates_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasExportTemplatesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_export_templates_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasExportTemplatesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_image_attachments_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasImageAttachmentsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_image_attachments_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasImageAttachmentsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_image_attachments_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasImageAttachmentsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_image_attachments_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasImageAttachmentsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_image_attachments_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasImageAttachmentsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_image_attachments_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasImageAttachmentsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_image_attachments_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasImageAttachmentsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_image_attachments_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasImageAttachmentsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_image_attachments_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasImageAttachmentsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_job_results_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasJobResultsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_job_results_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasJobResultsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_journal_entries_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasJournalEntriesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_journal_entries_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasJournalEntriesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_journal_entries_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasJournalEntriesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_journal_entries_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasJournalEntriesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_journal_entries_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasJournalEntriesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_journal_entries_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasJournalEntriesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_journal_entries_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasJournalEntriesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_journal_entries_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasJournalEntriesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_journal_entries_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasJournalEntriesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_object_changes_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasObjectChangesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_object_changes_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasObjectChangesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_reports_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasReportsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_reports_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasReportsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_reports_run`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasReportsRunError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_saved_filters_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasSavedFiltersBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_saved_filters_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasSavedFiltersBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_saved_filters_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasSavedFiltersBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_saved_filters_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasSavedFiltersCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_saved_filters_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasSavedFiltersDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_saved_filters_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasSavedFiltersListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_saved_filters_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasSavedFiltersPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_saved_filters_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasSavedFiltersReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_saved_filters_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasSavedFiltersUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_scripts_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasScriptsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_scripts_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasScriptsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_tags_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasTagsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_tags_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasTagsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_tags_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasTagsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_tags_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasTagsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_tags_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasTagsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_tags_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasTagsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_tags_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasTagsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_tags_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasTagsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_tags_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasTagsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_webhooks_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasWebhooksBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_webhooks_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasWebhooksBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_webhooks_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasWebhooksBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_webhooks_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasWebhooksCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_webhooks_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasWebhooksDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_webhooks_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasWebhooksListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_webhooks_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasWebhooksPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_webhooks_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasWebhooksReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`extras_webhooks_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum ExtrasWebhooksUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}


pub async fn extras_config_contexts_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<ExtrasConfigContextsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/config-contexts/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasConfigContextsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_config_contexts_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableConfigContext) -> Result<crate::models::ConfigContext, Error<ExtrasConfigContextsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/config-contexts/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasConfigContextsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_config_contexts_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableConfigContext) -> Result<crate::models::ConfigContext, Error<ExtrasConfigContextsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/config-contexts/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasConfigContextsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_config_contexts_create(configuration: &configuration::Configuration, data: crate::models::WritableConfigContext) -> Result<crate::models::ConfigContext, Error<ExtrasConfigContextsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/config-contexts/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasConfigContextsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_config_contexts_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<ExtrasConfigContextsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/config-contexts/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasConfigContextsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_config_contexts_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, is_active: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, region_id: Option<&str>, region: Option<&str>, site_group: Option<&str>, site_group_id: Option<&str>, site_id: Option<&str>, site: Option<&str>, location_id: Option<&str>, location: Option<&str>, device_type_id: Option<&str>, role_id: Option<&str>, role: Option<&str>, platform_id: Option<&str>, platform: Option<&str>, cluster_type_id: Option<&str>, cluster_type: Option<&str>, cluster_group_id: Option<&str>, cluster_group: Option<&str>, cluster_id: Option<&str>, tenant_group_id: Option<&str>, tenant_group: Option<&str>, tenant_id: Option<&str>, tenant: Option<&str>, tag_id: Option<&str>, tag: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, site_group__n: Option<&str>, site_group_id__n: Option<&str>, site_id__n: Option<&str>, site__n: Option<&str>, location_id__n: Option<&str>, location__n: Option<&str>, device_type_id__n: Option<&str>, role_id__n: Option<&str>, role__n: Option<&str>, platform_id__n: Option<&str>, platform__n: Option<&str>, cluster_type_id__n: Option<&str>, cluster_type__n: Option<&str>, cluster_group_id__n: Option<&str>, cluster_group__n: Option<&str>, cluster_id__n: Option<&str>, tenant_group_id__n: Option<&str>, tenant_group__n: Option<&str>, tenant_id__n: Option<&str>, tenant__n: Option<&str>, tag_id__n: Option<&str>, tag__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::ExtrasConfigContextsList200Response, Error<ExtrasConfigContextsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/config-contexts/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_active {
        local_var_req_builder = local_var_req_builder.query(&[("is_active", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder = local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id {
        local_var_req_builder = local_var_req_builder.query(&[("location_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location {
        local_var_req_builder = local_var_req_builder.query(&[("location", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_type_id {
        local_var_req_builder = local_var_req_builder.query(&[("device_type_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role_id {
        local_var_req_builder = local_var_req_builder.query(&[("role_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role {
        local_var_req_builder = local_var_req_builder.query(&[("role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platform_id {
        local_var_req_builder = local_var_req_builder.query(&[("platform_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platform {
        local_var_req_builder = local_var_req_builder.query(&[("platform", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_type_id {
        local_var_req_builder = local_var_req_builder.query(&[("cluster_type_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_type {
        local_var_req_builder = local_var_req_builder.query(&[("cluster_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("cluster_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_group {
        local_var_req_builder = local_var_req_builder.query(&[("cluster_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_id {
        local_var_req_builder = local_var_req_builder.query(&[("cluster_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant {
        local_var_req_builder = local_var_req_builder.query(&[("tenant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag_id {
        local_var_req_builder = local_var_req_builder.query(&[("tag_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder = local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("location_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location__n {
        local_var_req_builder = local_var_req_builder.query(&[("location__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_type_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("device_type_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("role_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role__n {
        local_var_req_builder = local_var_req_builder.query(&[("role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platform_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("platform_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platform__n {
        local_var_req_builder = local_var_req_builder.query(&[("platform__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_type_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("cluster_type_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_type__n {
        local_var_req_builder = local_var_req_builder.query(&[("cluster_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("cluster_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("cluster_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("cluster_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasConfigContextsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_config_contexts_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableConfigContext) -> Result<crate::models::ConfigContext, Error<ExtrasConfigContextsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/config-contexts/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasConfigContextsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_config_contexts_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::ConfigContext, Error<ExtrasConfigContextsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/config-contexts/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasConfigContextsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_config_contexts_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableConfigContext) -> Result<crate::models::ConfigContext, Error<ExtrasConfigContextsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/config-contexts/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasConfigContextsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
pub async fn extras_content_types_list(configuration: &configuration::Configuration, id: Option<f32>, app_label: Option<&str>, model: Option<&str>, q: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::ExtrasContentTypesList200Response, Error<ExtrasContentTypesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/content-types/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = app_label {
        local_var_req_builder = local_var_req_builder.query(&[("app_label", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model {
        local_var_req_builder = local_var_req_builder.query(&[("model", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasContentTypesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Read-only list of ContentTypes. Limit results to ContentTypes pertinent to NetBox objects.
pub async fn extras_content_types_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::ContentType, Error<ExtrasContentTypesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/content-types/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasContentTypesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_fields_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<ExtrasCustomFieldsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/custom-fields/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasCustomFieldsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_fields_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableCustomField) -> Result<crate::models::CustomField, Error<ExtrasCustomFieldsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/custom-fields/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasCustomFieldsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_fields_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableCustomField) -> Result<crate::models::CustomField, Error<ExtrasCustomFieldsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/custom-fields/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasCustomFieldsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_fields_create(configuration: &configuration::Configuration, data: crate::models::WritableCustomField) -> Result<crate::models::CustomField, Error<ExtrasCustomFieldsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/custom-fields/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasCustomFieldsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_fields_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<ExtrasCustomFieldsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/custom-fields/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasCustomFieldsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_fields_list(configuration: &configuration::Configuration, id: Option<&str>, content_types: Option<&str>, name: Option<&str>, group_name: Option<&str>, required: Option<&str>, search_weight: Option<&str>, filter_logic: Option<&str>, ui_visibility: Option<&str>, weight: Option<&str>, description: Option<&str>, q: Option<&str>, r#type: Option<&str>, content_type_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, content_types__n: Option<&str>, content_types__ic: Option<&str>, content_types__nic: Option<&str>, content_types__iew: Option<&str>, content_types__niew: Option<&str>, content_types__isw: Option<&str>, content_types__nisw: Option<&str>, content_types__ie: Option<&str>, content_types__nie: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, group_name__n: Option<&str>, group_name__ic: Option<&str>, group_name__nic: Option<&str>, group_name__iew: Option<&str>, group_name__niew: Option<&str>, group_name__isw: Option<&str>, group_name__nisw: Option<&str>, group_name__ie: Option<&str>, group_name__nie: Option<&str>, group_name__empty: Option<&str>, search_weight__n: Option<&str>, search_weight__lte: Option<&str>, search_weight__lt: Option<&str>, search_weight__gte: Option<&str>, search_weight__gt: Option<&str>, filter_logic__n: Option<&str>, ui_visibility__n: Option<&str>, weight__n: Option<&str>, weight__lte: Option<&str>, weight__lt: Option<&str>, weight__gte: Option<&str>, weight__gt: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, type__n: Option<&str>, content_type_id__n: Option<&str>, content_type_id__lte: Option<&str>, content_type_id__lt: Option<&str>, content_type_id__gte: Option<&str>, content_type_id__gt: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::ExtrasCustomFieldsList200Response, Error<ExtrasCustomFieldsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/custom-fields/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types {
        local_var_req_builder = local_var_req_builder.query(&[("content_types", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name {
        local_var_req_builder = local_var_req_builder.query(&[("group_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = required {
        local_var_req_builder = local_var_req_builder.query(&[("required", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = search_weight {
        local_var_req_builder = local_var_req_builder.query(&[("search_weight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_logic {
        local_var_req_builder = local_var_req_builder.query(&[("filter_logic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ui_visibility {
        local_var_req_builder = local_var_req_builder.query(&[("ui_visibility", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight {
        local_var_req_builder = local_var_req_builder.query(&[("weight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__n {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__ic {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__nic {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__iew {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__niew {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__isw {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__ie {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__nie {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__n {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = search_weight__n {
        local_var_req_builder = local_var_req_builder.query(&[("search_weight__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = search_weight__lte {
        local_var_req_builder = local_var_req_builder.query(&[("search_weight__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = search_weight__lt {
        local_var_req_builder = local_var_req_builder.query(&[("search_weight__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = search_weight__gte {
        local_var_req_builder = local_var_req_builder.query(&[("search_weight__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = search_weight__gt {
        local_var_req_builder = local_var_req_builder.query(&[("search_weight__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = filter_logic__n {
        local_var_req_builder = local_var_req_builder.query(&[("filter_logic__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ui_visibility__n {
        local_var_req_builder = local_var_req_builder.query(&[("ui_visibility__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__n {
        local_var_req_builder = local_var_req_builder.query(&[("weight__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__lte {
        local_var_req_builder = local_var_req_builder.query(&[("weight__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__lt {
        local_var_req_builder = local_var_req_builder.query(&[("weight__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__gte {
        local_var_req_builder = local_var_req_builder.query(&[("weight__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__gt {
        local_var_req_builder = local_var_req_builder.query(&[("weight__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder = local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasCustomFieldsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_fields_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableCustomField) -> Result<crate::models::CustomField, Error<ExtrasCustomFieldsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/custom-fields/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasCustomFieldsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_fields_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::CustomField, Error<ExtrasCustomFieldsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/custom-fields/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasCustomFieldsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_fields_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableCustomField) -> Result<crate::models::CustomField, Error<ExtrasCustomFieldsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/custom-fields/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasCustomFieldsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_links_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<ExtrasCustomLinksBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/custom-links/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasCustomLinksBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_links_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::CustomLink) -> Result<crate::models::CustomLink, Error<ExtrasCustomLinksBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/custom-links/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasCustomLinksBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_links_bulk_update(configuration: &configuration::Configuration, data: crate::models::CustomLink) -> Result<crate::models::CustomLink, Error<ExtrasCustomLinksBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/custom-links/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasCustomLinksBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_links_create(configuration: &configuration::Configuration, data: crate::models::CustomLink) -> Result<crate::models::CustomLink, Error<ExtrasCustomLinksCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/custom-links/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasCustomLinksCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_links_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<ExtrasCustomLinksDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/custom-links/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasCustomLinksDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_links_list(configuration: &configuration::Configuration, id: Option<&str>, content_types: Option<&str>, name: Option<&str>, enabled: Option<&str>, link_text: Option<&str>, link_url: Option<&str>, weight: Option<&str>, group_name: Option<&str>, new_window: Option<&str>, q: Option<&str>, content_type_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, content_types__n: Option<&str>, content_types__ic: Option<&str>, content_types__nic: Option<&str>, content_types__iew: Option<&str>, content_types__niew: Option<&str>, content_types__isw: Option<&str>, content_types__nisw: Option<&str>, content_types__ie: Option<&str>, content_types__nie: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, link_text__n: Option<&str>, link_text__ic: Option<&str>, link_text__nic: Option<&str>, link_text__iew: Option<&str>, link_text__niew: Option<&str>, link_text__isw: Option<&str>, link_text__nisw: Option<&str>, link_text__ie: Option<&str>, link_text__nie: Option<&str>, link_url__n: Option<&str>, link_url__ic: Option<&str>, link_url__nic: Option<&str>, link_url__iew: Option<&str>, link_url__niew: Option<&str>, link_url__isw: Option<&str>, link_url__nisw: Option<&str>, link_url__ie: Option<&str>, link_url__nie: Option<&str>, weight__n: Option<&str>, weight__lte: Option<&str>, weight__lt: Option<&str>, weight__gte: Option<&str>, weight__gt: Option<&str>, group_name__n: Option<&str>, group_name__ic: Option<&str>, group_name__nic: Option<&str>, group_name__iew: Option<&str>, group_name__niew: Option<&str>, group_name__isw: Option<&str>, group_name__nisw: Option<&str>, group_name__ie: Option<&str>, group_name__nie: Option<&str>, group_name__empty: Option<&str>, content_type_id__n: Option<&str>, content_type_id__lte: Option<&str>, content_type_id__lt: Option<&str>, content_type_id__gte: Option<&str>, content_type_id__gt: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::ExtrasCustomLinksList200Response, Error<ExtrasCustomLinksListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/custom-links/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types {
        local_var_req_builder = local_var_req_builder.query(&[("content_types", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enabled {
        local_var_req_builder = local_var_req_builder.query(&[("enabled", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_text {
        local_var_req_builder = local_var_req_builder.query(&[("link_text", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_url {
        local_var_req_builder = local_var_req_builder.query(&[("link_url", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight {
        local_var_req_builder = local_var_req_builder.query(&[("weight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name {
        local_var_req_builder = local_var_req_builder.query(&[("group_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = new_window {
        local_var_req_builder = local_var_req_builder.query(&[("new_window", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__n {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__ic {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__nic {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__iew {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__niew {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__isw {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__ie {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__nie {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_text__n {
        local_var_req_builder = local_var_req_builder.query(&[("link_text__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_text__ic {
        local_var_req_builder = local_var_req_builder.query(&[("link_text__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_text__nic {
        local_var_req_builder = local_var_req_builder.query(&[("link_text__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_text__iew {
        local_var_req_builder = local_var_req_builder.query(&[("link_text__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_text__niew {
        local_var_req_builder = local_var_req_builder.query(&[("link_text__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_text__isw {
        local_var_req_builder = local_var_req_builder.query(&[("link_text__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_text__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("link_text__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_text__ie {
        local_var_req_builder = local_var_req_builder.query(&[("link_text__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_text__nie {
        local_var_req_builder = local_var_req_builder.query(&[("link_text__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_url__n {
        local_var_req_builder = local_var_req_builder.query(&[("link_url__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_url__ic {
        local_var_req_builder = local_var_req_builder.query(&[("link_url__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_url__nic {
        local_var_req_builder = local_var_req_builder.query(&[("link_url__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_url__iew {
        local_var_req_builder = local_var_req_builder.query(&[("link_url__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_url__niew {
        local_var_req_builder = local_var_req_builder.query(&[("link_url__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_url__isw {
        local_var_req_builder = local_var_req_builder.query(&[("link_url__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_url__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("link_url__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_url__ie {
        local_var_req_builder = local_var_req_builder.query(&[("link_url__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link_url__nie {
        local_var_req_builder = local_var_req_builder.query(&[("link_url__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__n {
        local_var_req_builder = local_var_req_builder.query(&[("weight__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__lte {
        local_var_req_builder = local_var_req_builder.query(&[("weight__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__lt {
        local_var_req_builder = local_var_req_builder.query(&[("weight__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__gte {
        local_var_req_builder = local_var_req_builder.query(&[("weight__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__gt {
        local_var_req_builder = local_var_req_builder.query(&[("weight__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__n {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("group_name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasCustomLinksListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_links_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::CustomLink) -> Result<crate::models::CustomLink, Error<ExtrasCustomLinksPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/custom-links/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasCustomLinksPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_links_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::CustomLink, Error<ExtrasCustomLinksReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/custom-links/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasCustomLinksReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_custom_links_update(configuration: &configuration::Configuration, id: i32, data: crate::models::CustomLink) -> Result<crate::models::CustomLink, Error<ExtrasCustomLinksUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/custom-links/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasCustomLinksUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_export_templates_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<ExtrasExportTemplatesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/export-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasExportTemplatesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_export_templates_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::ExportTemplate) -> Result<crate::models::ExportTemplate, Error<ExtrasExportTemplatesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/export-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasExportTemplatesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_export_templates_bulk_update(configuration: &configuration::Configuration, data: crate::models::ExportTemplate) -> Result<crate::models::ExportTemplate, Error<ExtrasExportTemplatesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/export-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasExportTemplatesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_export_templates_create(configuration: &configuration::Configuration, data: crate::models::ExportTemplate) -> Result<crate::models::ExportTemplate, Error<ExtrasExportTemplatesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/export-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasExportTemplatesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_export_templates_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<ExtrasExportTemplatesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/export-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasExportTemplatesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_export_templates_list(configuration: &configuration::Configuration, id: Option<&str>, content_types: Option<&str>, name: Option<&str>, description: Option<&str>, q: Option<&str>, content_type_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, content_types__n: Option<&str>, content_types__ic: Option<&str>, content_types__nic: Option<&str>, content_types__iew: Option<&str>, content_types__niew: Option<&str>, content_types__isw: Option<&str>, content_types__nisw: Option<&str>, content_types__ie: Option<&str>, content_types__nie: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, content_type_id__n: Option<&str>, content_type_id__lte: Option<&str>, content_type_id__lt: Option<&str>, content_type_id__gte: Option<&str>, content_type_id__gt: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::ExtrasExportTemplatesList200Response, Error<ExtrasExportTemplatesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/export-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types {
        local_var_req_builder = local_var_req_builder.query(&[("content_types", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__n {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__ic {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__nic {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__iew {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__niew {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__isw {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__ie {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__nie {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasExportTemplatesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_export_templates_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::ExportTemplate) -> Result<crate::models::ExportTemplate, Error<ExtrasExportTemplatesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/export-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasExportTemplatesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_export_templates_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::ExportTemplate, Error<ExtrasExportTemplatesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/export-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasExportTemplatesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_export_templates_update(configuration: &configuration::Configuration, id: i32, data: crate::models::ExportTemplate) -> Result<crate::models::ExportTemplate, Error<ExtrasExportTemplatesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/export-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasExportTemplatesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_image_attachments_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<ExtrasImageAttachmentsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/image-attachments/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasImageAttachmentsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_image_attachments_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::ImageAttachment) -> Result<crate::models::ImageAttachment, Error<ExtrasImageAttachmentsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/image-attachments/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasImageAttachmentsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_image_attachments_bulk_update(configuration: &configuration::Configuration, data: crate::models::ImageAttachment) -> Result<crate::models::ImageAttachment, Error<ExtrasImageAttachmentsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/image-attachments/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasImageAttachmentsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_image_attachments_create(configuration: &configuration::Configuration, data: crate::models::ImageAttachment) -> Result<crate::models::ImageAttachment, Error<ExtrasImageAttachmentsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/image-attachments/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasImageAttachmentsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_image_attachments_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<ExtrasImageAttachmentsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/image-attachments/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasImageAttachmentsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_image_attachments_list(configuration: &configuration::Configuration, id: Option<&str>, content_type_id: Option<&str>, object_id: Option<&str>, name: Option<&str>, q: Option<&str>, created: Option<&str>, content_type: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, content_type_id__n: Option<&str>, object_id__n: Option<&str>, object_id__lte: Option<&str>, object_id__lt: Option<&str>, object_id__gte: Option<&str>, object_id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, content_type__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::ExtrasImageAttachmentsList200Response, Error<ExtrasImageAttachmentsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/image-attachments/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_id {
        local_var_req_builder = local_var_req_builder.query(&[("object_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type {
        local_var_req_builder = local_var_req_builder.query(&[("content_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("object_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("object_id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("object_id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("object_id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("object_id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type__n {
        local_var_req_builder = local_var_req_builder.query(&[("content_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasImageAttachmentsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_image_attachments_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::ImageAttachment) -> Result<crate::models::ImageAttachment, Error<ExtrasImageAttachmentsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/image-attachments/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasImageAttachmentsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_image_attachments_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::ImageAttachment, Error<ExtrasImageAttachmentsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/image-attachments/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasImageAttachmentsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_image_attachments_update(configuration: &configuration::Configuration, id: i32, data: crate::models::ImageAttachment) -> Result<crate::models::ImageAttachment, Error<ExtrasImageAttachmentsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/image-attachments/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasImageAttachmentsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of job results
pub async fn extras_job_results_list(configuration: &configuration::Configuration, id: Option<&str>, interval: Option<&str>, status: Option<&str>, user: Option<&str>, obj_type: Option<&str>, name: Option<&str>, q: Option<&str>, created: Option<&str>, created__before: Option<&str>, created__after: Option<&str>, scheduled: Option<&str>, scheduled__before: Option<&str>, scheduled__after: Option<&str>, started: Option<&str>, started__before: Option<&str>, started__after: Option<&str>, completed: Option<&str>, completed__before: Option<&str>, completed__after: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, interval__n: Option<&str>, interval__lte: Option<&str>, interval__lt: Option<&str>, interval__gte: Option<&str>, interval__gt: Option<&str>, status__n: Option<&str>, user__n: Option<&str>, obj_type__n: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::ExtrasJobResultsList200Response, Error<ExtrasJobResultsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/job-results/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = interval {
        local_var_req_builder = local_var_req_builder.query(&[("interval", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder = local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user {
        local_var_req_builder = local_var_req_builder.query(&[("user", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = obj_type {
        local_var_req_builder = local_var_req_builder.query(&[("obj_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__before {
        local_var_req_builder = local_var_req_builder.query(&[("created__before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__after {
        local_var_req_builder = local_var_req_builder.query(&[("created__after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = scheduled {
        local_var_req_builder = local_var_req_builder.query(&[("scheduled", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = scheduled__before {
        local_var_req_builder = local_var_req_builder.query(&[("scheduled__before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = scheduled__after {
        local_var_req_builder = local_var_req_builder.query(&[("scheduled__after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = started {
        local_var_req_builder = local_var_req_builder.query(&[("started", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = started__before {
        local_var_req_builder = local_var_req_builder.query(&[("started__before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = started__after {
        local_var_req_builder = local_var_req_builder.query(&[("started__after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = completed {
        local_var_req_builder = local_var_req_builder.query(&[("completed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = completed__before {
        local_var_req_builder = local_var_req_builder.query(&[("completed__before", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = completed__after {
        local_var_req_builder = local_var_req_builder.query(&[("completed__after", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = interval__n {
        local_var_req_builder = local_var_req_builder.query(&[("interval__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = interval__lte {
        local_var_req_builder = local_var_req_builder.query(&[("interval__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = interval__lt {
        local_var_req_builder = local_var_req_builder.query(&[("interval__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = interval__gte {
        local_var_req_builder = local_var_req_builder.query(&[("interval__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = interval__gt {
        local_var_req_builder = local_var_req_builder.query(&[("interval__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status__n {
        local_var_req_builder = local_var_req_builder.query(&[("status__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user__n {
        local_var_req_builder = local_var_req_builder.query(&[("user__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = obj_type__n {
        local_var_req_builder = local_var_req_builder.query(&[("obj_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasJobResultsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of job results
pub async fn extras_job_results_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::JobResult, Error<ExtrasJobResultsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/job-results/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasJobResultsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_journal_entries_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<ExtrasJournalEntriesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/journal-entries/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasJournalEntriesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_journal_entries_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableJournalEntry) -> Result<crate::models::JournalEntry, Error<ExtrasJournalEntriesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/journal-entries/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasJournalEntriesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_journal_entries_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableJournalEntry) -> Result<crate::models::JournalEntry, Error<ExtrasJournalEntriesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/journal-entries/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasJournalEntriesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_journal_entries_create(configuration: &configuration::Configuration, data: crate::models::WritableJournalEntry) -> Result<crate::models::JournalEntry, Error<ExtrasJournalEntriesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/journal-entries/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasJournalEntriesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_journal_entries_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<ExtrasJournalEntriesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/journal-entries/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasJournalEntriesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_journal_entries_list(configuration: &configuration::Configuration, id: Option<&str>, assigned_object_type_id: Option<&str>, assigned_object_id: Option<&str>, created: Option<&str>, kind: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, assigned_object_type: Option<&str>, created_by_id: Option<&str>, created_by: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, assigned_object_type_id__n: Option<&str>, assigned_object_id__n: Option<&str>, assigned_object_id__lte: Option<&str>, assigned_object_id__lt: Option<&str>, assigned_object_id__gte: Option<&str>, assigned_object_id__gt: Option<&str>, kind__n: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, assigned_object_type__n: Option<&str>, created_by_id__n: Option<&str>, created_by__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::ExtrasJournalEntriesList200Response, Error<ExtrasJournalEntriesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/journal-entries/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = assigned_object_type_id {
        local_var_req_builder = local_var_req_builder.query(&[("assigned_object_type_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = assigned_object_id {
        local_var_req_builder = local_var_req_builder.query(&[("assigned_object_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kind {
        local_var_req_builder = local_var_req_builder.query(&[("kind", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = assigned_object_type {
        local_var_req_builder = local_var_req_builder.query(&[("assigned_object_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created_by_id {
        local_var_req_builder = local_var_req_builder.query(&[("created_by_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created_by {
        local_var_req_builder = local_var_req_builder.query(&[("created_by", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = assigned_object_type_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("assigned_object_type_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = assigned_object_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("assigned_object_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = assigned_object_id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("assigned_object_id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = assigned_object_id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("assigned_object_id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = assigned_object_id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("assigned_object_id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = assigned_object_id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("assigned_object_id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kind__n {
        local_var_req_builder = local_var_req_builder.query(&[("kind__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = assigned_object_type__n {
        local_var_req_builder = local_var_req_builder.query(&[("assigned_object_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created_by_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("created_by_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created_by__n {
        local_var_req_builder = local_var_req_builder.query(&[("created_by__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasJournalEntriesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_journal_entries_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableJournalEntry) -> Result<crate::models::JournalEntry, Error<ExtrasJournalEntriesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/journal-entries/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasJournalEntriesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_journal_entries_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::JournalEntry, Error<ExtrasJournalEntriesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/journal-entries/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasJournalEntriesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_journal_entries_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableJournalEntry) -> Result<crate::models::JournalEntry, Error<ExtrasJournalEntriesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/journal-entries/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasJournalEntriesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of recent changes.
pub async fn extras_object_changes_list(configuration: &configuration::Configuration, id: Option<&str>, user: Option<&str>, user_name: Option<&str>, request_id: Option<&str>, action: Option<&str>, changed_object_type_id: Option<&str>, changed_object_id: Option<&str>, object_repr: Option<&str>, q: Option<&str>, time: Option<&str>, changed_object_type: Option<&str>, user_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, user__n: Option<&str>, user_name__n: Option<&str>, user_name__ic: Option<&str>, user_name__nic: Option<&str>, user_name__iew: Option<&str>, user_name__niew: Option<&str>, user_name__isw: Option<&str>, user_name__nisw: Option<&str>, user_name__ie: Option<&str>, user_name__nie: Option<&str>, user_name__empty: Option<&str>, action__n: Option<&str>, changed_object_type_id__n: Option<&str>, changed_object_id__n: Option<&str>, changed_object_id__lte: Option<&str>, changed_object_id__lt: Option<&str>, changed_object_id__gte: Option<&str>, changed_object_id__gt: Option<&str>, object_repr__n: Option<&str>, object_repr__ic: Option<&str>, object_repr__nic: Option<&str>, object_repr__iew: Option<&str>, object_repr__niew: Option<&str>, object_repr__isw: Option<&str>, object_repr__nisw: Option<&str>, object_repr__ie: Option<&str>, object_repr__nie: Option<&str>, object_repr__empty: Option<&str>, changed_object_type__n: Option<&str>, user_id__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::ExtrasObjectChangesList200Response, Error<ExtrasObjectChangesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/object-changes/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user {
        local_var_req_builder = local_var_req_builder.query(&[("user", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name {
        local_var_req_builder = local_var_req_builder.query(&[("user_name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = request_id {
        local_var_req_builder = local_var_req_builder.query(&[("request_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = action {
        local_var_req_builder = local_var_req_builder.query(&[("action", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = changed_object_type_id {
        local_var_req_builder = local_var_req_builder.query(&[("changed_object_type_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = changed_object_id {
        local_var_req_builder = local_var_req_builder.query(&[("changed_object_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr {
        local_var_req_builder = local_var_req_builder.query(&[("object_repr", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = time {
        local_var_req_builder = local_var_req_builder.query(&[("time", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = changed_object_type {
        local_var_req_builder = local_var_req_builder.query(&[("changed_object_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("user_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user__n {
        local_var_req_builder = local_var_req_builder.query(&[("user__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__n {
        local_var_req_builder = local_var_req_builder.query(&[("user_name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("user_name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("user_name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("user_name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("user_name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("user_name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("user_name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("user_name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("user_name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("user_name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = action__n {
        local_var_req_builder = local_var_req_builder.query(&[("action__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = changed_object_type_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("changed_object_type_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = changed_object_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("changed_object_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = changed_object_id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("changed_object_id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = changed_object_id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("changed_object_id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = changed_object_id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("changed_object_id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = changed_object_id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("changed_object_id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__n {
        local_var_req_builder = local_var_req_builder.query(&[("object_repr__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__ic {
        local_var_req_builder = local_var_req_builder.query(&[("object_repr__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__nic {
        local_var_req_builder = local_var_req_builder.query(&[("object_repr__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__iew {
        local_var_req_builder = local_var_req_builder.query(&[("object_repr__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__niew {
        local_var_req_builder = local_var_req_builder.query(&[("object_repr__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__isw {
        local_var_req_builder = local_var_req_builder.query(&[("object_repr__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("object_repr__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__ie {
        local_var_req_builder = local_var_req_builder.query(&[("object_repr__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__nie {
        local_var_req_builder = local_var_req_builder.query(&[("object_repr__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_repr__empty {
        local_var_req_builder = local_var_req_builder.query(&[("object_repr__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = changed_object_type__n {
        local_var_req_builder = local_var_req_builder.query(&[("changed_object_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("user_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasObjectChangesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a list of recent changes.
pub async fn extras_object_changes_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::ObjectChange, Error<ExtrasObjectChangesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/object-changes/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasObjectChangesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Compile all reports and their related results (if any). Result data is deferred in the list view.
pub async fn extras_reports_list(configuration: &configuration::Configuration, ) -> Result<(), Error<ExtrasReportsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/reports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasReportsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Retrieve a single Report identified as \"<module>.<report>\".
pub async fn extras_reports_read(configuration: &configuration::Configuration, id: &str) -> Result<(), Error<ExtrasReportsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/reports/{id}/", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasReportsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Run a Report identified as \"<module>.<script>\" and return the pending JobResult as the result
pub async fn extras_reports_run(configuration: &configuration::Configuration, id: &str) -> Result<(), Error<ExtrasReportsRunError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/reports/{id}/run/", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasReportsRunError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_saved_filters_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<ExtrasSavedFiltersBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/saved-filters/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasSavedFiltersBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_saved_filters_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::SavedFilter) -> Result<crate::models::SavedFilter, Error<ExtrasSavedFiltersBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/saved-filters/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasSavedFiltersBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_saved_filters_bulk_update(configuration: &configuration::Configuration, data: crate::models::SavedFilter) -> Result<crate::models::SavedFilter, Error<ExtrasSavedFiltersBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/saved-filters/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasSavedFiltersBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_saved_filters_create(configuration: &configuration::Configuration, data: crate::models::SavedFilter) -> Result<crate::models::SavedFilter, Error<ExtrasSavedFiltersCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/saved-filters/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasSavedFiltersCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_saved_filters_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<ExtrasSavedFiltersDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/saved-filters/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasSavedFiltersDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_saved_filters_list(configuration: &configuration::Configuration, id: Option<&str>, content_types: Option<&str>, name: Option<&str>, slug: Option<&str>, description: Option<&str>, enabled: Option<&str>, shared: Option<&str>, weight: Option<&str>, q: Option<&str>, content_type_id: Option<&str>, user_id: Option<&str>, user: Option<&str>, usable: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, content_types__n: Option<&str>, content_types__ic: Option<&str>, content_types__nic: Option<&str>, content_types__iew: Option<&str>, content_types__niew: Option<&str>, content_types__isw: Option<&str>, content_types__nisw: Option<&str>, content_types__ie: Option<&str>, content_types__nie: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, slug__n: Option<&str>, slug__ic: Option<&str>, slug__nic: Option<&str>, slug__iew: Option<&str>, slug__niew: Option<&str>, slug__isw: Option<&str>, slug__nisw: Option<&str>, slug__ie: Option<&str>, slug__nie: Option<&str>, slug__empty: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, weight__n: Option<&str>, weight__lte: Option<&str>, weight__lt: Option<&str>, weight__gte: Option<&str>, weight__gt: Option<&str>, content_type_id__n: Option<&str>, content_type_id__lte: Option<&str>, content_type_id__lt: Option<&str>, content_type_id__gte: Option<&str>, content_type_id__gt: Option<&str>, user_id__n: Option<&str>, user__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::ExtrasSavedFiltersList200Response, Error<ExtrasSavedFiltersListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/saved-filters/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types {
        local_var_req_builder = local_var_req_builder.query(&[("content_types", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder = local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enabled {
        local_var_req_builder = local_var_req_builder.query(&[("enabled", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = shared {
        local_var_req_builder = local_var_req_builder.query(&[("shared", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight {
        local_var_req_builder = local_var_req_builder.query(&[("weight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("user_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user {
        local_var_req_builder = local_var_req_builder.query(&[("user", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = usable {
        local_var_req_builder = local_var_req_builder.query(&[("usable", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__n {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__ic {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__nic {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__iew {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__niew {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__isw {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__ie {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__nie {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder = local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__empty {
        local_var_req_builder = local_var_req_builder.query(&[("slug__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__n {
        local_var_req_builder = local_var_req_builder.query(&[("weight__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__lte {
        local_var_req_builder = local_var_req_builder.query(&[("weight__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__lt {
        local_var_req_builder = local_var_req_builder.query(&[("weight__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__gte {
        local_var_req_builder = local_var_req_builder.query(&[("weight__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__gt {
        local_var_req_builder = local_var_req_builder.query(&[("weight__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("user_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user__n {
        local_var_req_builder = local_var_req_builder.query(&[("user__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasSavedFiltersListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_saved_filters_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::SavedFilter) -> Result<crate::models::SavedFilter, Error<ExtrasSavedFiltersPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/saved-filters/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasSavedFiltersPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_saved_filters_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::SavedFilter, Error<ExtrasSavedFiltersReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/saved-filters/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasSavedFiltersReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_saved_filters_update(configuration: &configuration::Configuration, id: i32, data: crate::models::SavedFilter) -> Result<crate::models::SavedFilter, Error<ExtrasSavedFiltersUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/saved-filters/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasSavedFiltersUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_scripts_list(configuration: &configuration::Configuration, ) -> Result<(), Error<ExtrasScriptsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/scripts/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasScriptsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_scripts_read(configuration: &configuration::Configuration, id: &str) -> Result<(), Error<ExtrasScriptsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/scripts/{id}/", local_var_configuration.base_path, id=crate::apis::urlencode(id));
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasScriptsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_tags_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<ExtrasTagsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/tags/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasTagsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_tags_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::Tag) -> Result<crate::models::Tag, Error<ExtrasTagsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/tags/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasTagsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_tags_bulk_update(configuration: &configuration::Configuration, data: crate::models::Tag) -> Result<crate::models::Tag, Error<ExtrasTagsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/tags/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasTagsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_tags_create(configuration: &configuration::Configuration, data: crate::models::Tag) -> Result<crate::models::Tag, Error<ExtrasTagsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/tags/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasTagsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_tags_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<ExtrasTagsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/tags/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasTagsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_tags_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, slug: Option<&str>, color: Option<&str>, description: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, content_type: Option<&str>, content_type_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, slug__n: Option<&str>, slug__ic: Option<&str>, slug__nic: Option<&str>, slug__iew: Option<&str>, slug__niew: Option<&str>, slug__isw: Option<&str>, slug__nisw: Option<&str>, slug__ie: Option<&str>, slug__nie: Option<&str>, slug__empty: Option<&str>, color__n: Option<&str>, color__ic: Option<&str>, color__nic: Option<&str>, color__iew: Option<&str>, color__niew: Option<&str>, color__isw: Option<&str>, color__nisw: Option<&str>, color__ie: Option<&str>, color__nie: Option<&str>, color__empty: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::ExtrasTagsList200Response, Error<ExtrasTagsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/tags/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder = local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color {
        local_var_req_builder = local_var_req_builder.query(&[("color", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type {
        local_var_req_builder = local_var_req_builder.query(&[("content_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder = local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__empty {
        local_var_req_builder = local_var_req_builder.query(&[("slug__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__n {
        local_var_req_builder = local_var_req_builder.query(&[("color__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__ic {
        local_var_req_builder = local_var_req_builder.query(&[("color__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nic {
        local_var_req_builder = local_var_req_builder.query(&[("color__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__iew {
        local_var_req_builder = local_var_req_builder.query(&[("color__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__niew {
        local_var_req_builder = local_var_req_builder.query(&[("color__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__isw {
        local_var_req_builder = local_var_req_builder.query(&[("color__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("color__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__ie {
        local_var_req_builder = local_var_req_builder.query(&[("color__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nie {
        local_var_req_builder = local_var_req_builder.query(&[("color__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__empty {
        local_var_req_builder = local_var_req_builder.query(&[("color__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasTagsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_tags_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::Tag) -> Result<crate::models::Tag, Error<ExtrasTagsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/tags/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasTagsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_tags_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::Tag, Error<ExtrasTagsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/tags/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasTagsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_tags_update(configuration: &configuration::Configuration, id: i32, data: crate::models::Tag) -> Result<crate::models::Tag, Error<ExtrasTagsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/tags/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasTagsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_webhooks_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<ExtrasWebhooksBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/webhooks/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasWebhooksBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_webhooks_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::Webhook) -> Result<crate::models::Webhook, Error<ExtrasWebhooksBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/webhooks/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasWebhooksBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_webhooks_bulk_update(configuration: &configuration::Configuration, data: crate::models::Webhook) -> Result<crate::models::Webhook, Error<ExtrasWebhooksBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/webhooks/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasWebhooksBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_webhooks_create(configuration: &configuration::Configuration, data: crate::models::Webhook) -> Result<crate::models::Webhook, Error<ExtrasWebhooksCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/webhooks/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasWebhooksCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_webhooks_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<ExtrasWebhooksDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/webhooks/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<ExtrasWebhooksDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_webhooks_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, type_create: Option<&str>, type_update: Option<&str>, type_delete: Option<&str>, payload_url: Option<&str>, enabled: Option<&str>, http_method: Option<&str>, http_content_type: Option<&str>, secret: Option<&str>, ssl_verification: Option<&str>, ca_file_path: Option<&str>, q: Option<&str>, content_type_id: Option<&str>, content_types: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, payload_url__n: Option<&str>, payload_url__ic: Option<&str>, payload_url__nic: Option<&str>, payload_url__iew: Option<&str>, payload_url__niew: Option<&str>, payload_url__isw: Option<&str>, payload_url__nisw: Option<&str>, payload_url__ie: Option<&str>, payload_url__nie: Option<&str>, payload_url__empty: Option<&str>, http_method__n: Option<&str>, http_content_type__n: Option<&str>, http_content_type__ic: Option<&str>, http_content_type__nic: Option<&str>, http_content_type__iew: Option<&str>, http_content_type__niew: Option<&str>, http_content_type__isw: Option<&str>, http_content_type__nisw: Option<&str>, http_content_type__ie: Option<&str>, http_content_type__nie: Option<&str>, http_content_type__empty: Option<&str>, secret__n: Option<&str>, secret__ic: Option<&str>, secret__nic: Option<&str>, secret__iew: Option<&str>, secret__niew: Option<&str>, secret__isw: Option<&str>, secret__nisw: Option<&str>, secret__ie: Option<&str>, secret__nie: Option<&str>, secret__empty: Option<&str>, ca_file_path__n: Option<&str>, ca_file_path__ic: Option<&str>, ca_file_path__nic: Option<&str>, ca_file_path__iew: Option<&str>, ca_file_path__niew: Option<&str>, ca_file_path__isw: Option<&str>, ca_file_path__nisw: Option<&str>, ca_file_path__ie: Option<&str>, ca_file_path__nie: Option<&str>, ca_file_path__empty: Option<&str>, content_type_id__n: Option<&str>, content_type_id__lte: Option<&str>, content_type_id__lt: Option<&str>, content_type_id__gte: Option<&str>, content_type_id__gt: Option<&str>, content_types__n: Option<&str>, content_types__ic: Option<&str>, content_types__nic: Option<&str>, content_types__iew: Option<&str>, content_types__niew: Option<&str>, content_types__isw: Option<&str>, content_types__nisw: Option<&str>, content_types__ie: Option<&str>, content_types__nie: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::ExtrasWebhooksList200Response, Error<ExtrasWebhooksListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/webhooks/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type_create {
        local_var_req_builder = local_var_req_builder.query(&[("type_create", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type_update {
        local_var_req_builder = local_var_req_builder.query(&[("type_update", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type_delete {
        local_var_req_builder = local_var_req_builder.query(&[("type_delete", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = payload_url {
        local_var_req_builder = local_var_req_builder.query(&[("payload_url", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enabled {
        local_var_req_builder = local_var_req_builder.query(&[("enabled", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = http_method {
        local_var_req_builder = local_var_req_builder.query(&[("http_method", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = http_content_type {
        local_var_req_builder = local_var_req_builder.query(&[("http_content_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = secret {
        local_var_req_builder = local_var_req_builder.query(&[("secret", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ssl_verification {
        local_var_req_builder = local_var_req_builder.query(&[("ssl_verification", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ca_file_path {
        local_var_req_builder = local_var_req_builder.query(&[("ca_file_path", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types {
        local_var_req_builder = local_var_req_builder.query(&[("content_types", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = payload_url__n {
        local_var_req_builder = local_var_req_builder.query(&[("payload_url__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = payload_url__ic {
        local_var_req_builder = local_var_req_builder.query(&[("payload_url__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = payload_url__nic {
        local_var_req_builder = local_var_req_builder.query(&[("payload_url__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = payload_url__iew {
        local_var_req_builder = local_var_req_builder.query(&[("payload_url__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = payload_url__niew {
        local_var_req_builder = local_var_req_builder.query(&[("payload_url__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = payload_url__isw {
        local_var_req_builder = local_var_req_builder.query(&[("payload_url__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = payload_url__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("payload_url__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = payload_url__ie {
        local_var_req_builder = local_var_req_builder.query(&[("payload_url__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = payload_url__nie {
        local_var_req_builder = local_var_req_builder.query(&[("payload_url__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = payload_url__empty {
        local_var_req_builder = local_var_req_builder.query(&[("payload_url__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = http_method__n {
        local_var_req_builder = local_var_req_builder.query(&[("http_method__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = http_content_type__n {
        local_var_req_builder = local_var_req_builder.query(&[("http_content_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = http_content_type__ic {
        local_var_req_builder = local_var_req_builder.query(&[("http_content_type__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = http_content_type__nic {
        local_var_req_builder = local_var_req_builder.query(&[("http_content_type__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = http_content_type__iew {
        local_var_req_builder = local_var_req_builder.query(&[("http_content_type__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = http_content_type__niew {
        local_var_req_builder = local_var_req_builder.query(&[("http_content_type__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = http_content_type__isw {
        local_var_req_builder = local_var_req_builder.query(&[("http_content_type__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = http_content_type__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("http_content_type__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = http_content_type__ie {
        local_var_req_builder = local_var_req_builder.query(&[("http_content_type__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = http_content_type__nie {
        local_var_req_builder = local_var_req_builder.query(&[("http_content_type__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = http_content_type__empty {
        local_var_req_builder = local_var_req_builder.query(&[("http_content_type__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = secret__n {
        local_var_req_builder = local_var_req_builder.query(&[("secret__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = secret__ic {
        local_var_req_builder = local_var_req_builder.query(&[("secret__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = secret__nic {
        local_var_req_builder = local_var_req_builder.query(&[("secret__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = secret__iew {
        local_var_req_builder = local_var_req_builder.query(&[("secret__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = secret__niew {
        local_var_req_builder = local_var_req_builder.query(&[("secret__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = secret__isw {
        local_var_req_builder = local_var_req_builder.query(&[("secret__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = secret__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("secret__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = secret__ie {
        local_var_req_builder = local_var_req_builder.query(&[("secret__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = secret__nie {
        local_var_req_builder = local_var_req_builder.query(&[("secret__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = secret__empty {
        local_var_req_builder = local_var_req_builder.query(&[("secret__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ca_file_path__n {
        local_var_req_builder = local_var_req_builder.query(&[("ca_file_path__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ca_file_path__ic {
        local_var_req_builder = local_var_req_builder.query(&[("ca_file_path__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ca_file_path__nic {
        local_var_req_builder = local_var_req_builder.query(&[("ca_file_path__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ca_file_path__iew {
        local_var_req_builder = local_var_req_builder.query(&[("ca_file_path__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ca_file_path__niew {
        local_var_req_builder = local_var_req_builder.query(&[("ca_file_path__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ca_file_path__isw {
        local_var_req_builder = local_var_req_builder.query(&[("ca_file_path__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ca_file_path__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("ca_file_path__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ca_file_path__ie {
        local_var_req_builder = local_var_req_builder.query(&[("ca_file_path__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ca_file_path__nie {
        local_var_req_builder = local_var_req_builder.query(&[("ca_file_path__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ca_file_path__empty {
        local_var_req_builder = local_var_req_builder.query(&[("ca_file_path__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__n {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__ic {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__nic {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__iew {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__niew {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__isw {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__ie {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_types__nie {
        local_var_req_builder = local_var_req_builder.query(&[("content_types__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasWebhooksListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_webhooks_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::Webhook) -> Result<crate::models::Webhook, Error<ExtrasWebhooksPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/webhooks/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasWebhooksPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_webhooks_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::Webhook, Error<ExtrasWebhooksReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/webhooks/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasWebhooksReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn extras_webhooks_update(configuration: &configuration::Configuration, id: i32, data: crate::models::Webhook) -> Result<crate::models::Webhook, Error<ExtrasWebhooksUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/extras/webhooks/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<ExtrasWebhooksUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}


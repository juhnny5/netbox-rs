/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`tenancy_contact_assignments_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactAssignmentsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_assignments_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactAssignmentsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_assignments_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactAssignmentsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_assignments_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactAssignmentsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_assignments_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactAssignmentsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_assignments_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactAssignmentsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_assignments_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactAssignmentsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_assignments_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactAssignmentsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_assignments_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactAssignmentsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_groups_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactGroupsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_groups_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactGroupsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_groups_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactGroupsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_groups_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactGroupsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_groups_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactGroupsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_groups_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactGroupsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_groups_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactGroupsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_groups_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactGroupsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_groups_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactGroupsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_roles_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactRolesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_roles_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactRolesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_roles_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactRolesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_roles_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactRolesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_roles_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactRolesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_roles_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactRolesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_roles_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactRolesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_roles_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactRolesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contact_roles_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactRolesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contacts_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contacts_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contacts_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contacts_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contacts_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contacts_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contacts_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contacts_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_contacts_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyContactsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_tenant_groups_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyTenantGroupsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_tenant_groups_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyTenantGroupsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_tenant_groups_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyTenantGroupsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_tenant_groups_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyTenantGroupsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_tenant_groups_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyTenantGroupsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_tenant_groups_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyTenantGroupsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_tenant_groups_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyTenantGroupsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_tenant_groups_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyTenantGroupsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_tenant_groups_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyTenantGroupsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_tenants_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyTenantsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_tenants_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyTenantsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_tenants_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyTenantsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_tenants_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyTenantsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_tenants_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyTenantsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_tenants_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyTenantsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_tenants_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyTenantsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_tenants_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyTenantsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`tenancy_tenants_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum TenancyTenantsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}


pub async fn tenancy_contact_assignments_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<TenancyContactAssignmentsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-assignments/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<TenancyContactAssignmentsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_assignments_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableContactAssignment) -> Result<crate::models::ContactAssignment, Error<TenancyContactAssignmentsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-assignments/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactAssignmentsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_assignments_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableContactAssignment) -> Result<crate::models::ContactAssignment, Error<TenancyContactAssignmentsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-assignments/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactAssignmentsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_assignments_create(configuration: &configuration::Configuration, data: crate::models::WritableContactAssignment) -> Result<crate::models::ContactAssignment, Error<TenancyContactAssignmentsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-assignments/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactAssignmentsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_assignments_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<TenancyContactAssignmentsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-assignments/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<TenancyContactAssignmentsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_assignments_list(configuration: &configuration::Configuration, id: Option<&str>, content_type_id: Option<&str>, object_id: Option<&str>, priority: Option<&str>, created: Option<&str>, last_updated: Option<&str>, content_type: Option<&str>, contact_id: Option<&str>, role_id: Option<&str>, role: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, content_type_id__n: Option<&str>, object_id__n: Option<&str>, object_id__lte: Option<&str>, object_id__lt: Option<&str>, object_id__gte: Option<&str>, object_id__gt: Option<&str>, priority__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, content_type__n: Option<&str>, contact_id__n: Option<&str>, role_id__n: Option<&str>, role__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::TenancyContactAssignmentsList200Response, Error<TenancyContactAssignmentsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-assignments/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_id {
        local_var_req_builder = local_var_req_builder.query(&[("object_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = priority {
        local_var_req_builder = local_var_req_builder.query(&[("priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type {
        local_var_req_builder = local_var_req_builder.query(&[("content_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_id {
        local_var_req_builder = local_var_req_builder.query(&[("contact_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role_id {
        local_var_req_builder = local_var_req_builder.query(&[("role_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role {
        local_var_req_builder = local_var_req_builder.query(&[("role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("content_type_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("object_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("object_id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("object_id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("object_id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = object_id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("object_id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = priority__n {
        local_var_req_builder = local_var_req_builder.query(&[("priority__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = content_type__n {
        local_var_req_builder = local_var_req_builder.query(&[("content_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("role_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role__n {
        local_var_req_builder = local_var_req_builder.query(&[("role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactAssignmentsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_assignments_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableContactAssignment) -> Result<crate::models::ContactAssignment, Error<TenancyContactAssignmentsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-assignments/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactAssignmentsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_assignments_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::ContactAssignment, Error<TenancyContactAssignmentsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-assignments/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactAssignmentsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_assignments_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableContactAssignment) -> Result<crate::models::ContactAssignment, Error<TenancyContactAssignmentsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-assignments/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactAssignmentsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_groups_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<TenancyContactGroupsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-groups/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<TenancyContactGroupsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_groups_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableContactGroup) -> Result<crate::models::ContactGroup, Error<TenancyContactGroupsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-groups/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactGroupsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_groups_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableContactGroup) -> Result<crate::models::ContactGroup, Error<TenancyContactGroupsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-groups/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactGroupsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_groups_create(configuration: &configuration::Configuration, data: crate::models::WritableContactGroup) -> Result<crate::models::ContactGroup, Error<TenancyContactGroupsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-groups/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactGroupsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_groups_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<TenancyContactGroupsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-groups/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<TenancyContactGroupsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_groups_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, slug: Option<&str>, description: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, parent_id: Option<&str>, parent: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, slug__n: Option<&str>, slug__ic: Option<&str>, slug__nic: Option<&str>, slug__iew: Option<&str>, slug__niew: Option<&str>, slug__isw: Option<&str>, slug__nisw: Option<&str>, slug__ie: Option<&str>, slug__nie: Option<&str>, slug__empty: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, parent_id__n: Option<&str>, parent__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::TenancyContactGroupsList200Response, Error<TenancyContactGroupsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-groups/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder = local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id {
        local_var_req_builder = local_var_req_builder.query(&[("parent_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent {
        local_var_req_builder = local_var_req_builder.query(&[("parent", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder = local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__empty {
        local_var_req_builder = local_var_req_builder.query(&[("slug__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("parent_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent__n {
        local_var_req_builder = local_var_req_builder.query(&[("parent__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactGroupsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_groups_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableContactGroup) -> Result<crate::models::ContactGroup, Error<TenancyContactGroupsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-groups/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactGroupsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_groups_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::ContactGroup, Error<TenancyContactGroupsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-groups/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactGroupsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_groups_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableContactGroup) -> Result<crate::models::ContactGroup, Error<TenancyContactGroupsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-groups/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactGroupsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_roles_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<TenancyContactRolesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<TenancyContactRolesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_roles_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::ContactRole) -> Result<crate::models::ContactRole, Error<TenancyContactRolesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactRolesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_roles_bulk_update(configuration: &configuration::Configuration, data: crate::models::ContactRole) -> Result<crate::models::ContactRole, Error<TenancyContactRolesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactRolesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_roles_create(configuration: &configuration::Configuration, data: crate::models::ContactRole) -> Result<crate::models::ContactRole, Error<TenancyContactRolesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactRolesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_roles_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<TenancyContactRolesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-roles/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<TenancyContactRolesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_roles_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, slug: Option<&str>, description: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, slug__n: Option<&str>, slug__ic: Option<&str>, slug__nic: Option<&str>, slug__iew: Option<&str>, slug__niew: Option<&str>, slug__isw: Option<&str>, slug__nisw: Option<&str>, slug__ie: Option<&str>, slug__nie: Option<&str>, slug__empty: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::TenancyContactRolesList200Response, Error<TenancyContactRolesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder = local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder = local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__empty {
        local_var_req_builder = local_var_req_builder.query(&[("slug__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactRolesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_roles_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::ContactRole) -> Result<crate::models::ContactRole, Error<TenancyContactRolesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-roles/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactRolesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_roles_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::ContactRole, Error<TenancyContactRolesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-roles/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactRolesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contact_roles_update(configuration: &configuration::Configuration, id: i32, data: crate::models::ContactRole) -> Result<crate::models::ContactRole, Error<TenancyContactRolesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contact-roles/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactRolesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contacts_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<TenancyContactsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contacts/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<TenancyContactsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contacts_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableContact) -> Result<crate::models::Contact, Error<TenancyContactsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contacts/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contacts_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableContact) -> Result<crate::models::Contact, Error<TenancyContactsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contacts/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contacts_create(configuration: &configuration::Configuration, data: crate::models::WritableContact) -> Result<crate::models::Contact, Error<TenancyContactsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contacts/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contacts_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<TenancyContactsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contacts/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<TenancyContactsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contacts_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, title: Option<&str>, phone: Option<&str>, email: Option<&str>, address: Option<&str>, link: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, group_id: Option<&str>, group: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, title__n: Option<&str>, title__ic: Option<&str>, title__nic: Option<&str>, title__iew: Option<&str>, title__niew: Option<&str>, title__isw: Option<&str>, title__nisw: Option<&str>, title__ie: Option<&str>, title__nie: Option<&str>, title__empty: Option<&str>, phone__n: Option<&str>, phone__ic: Option<&str>, phone__nic: Option<&str>, phone__iew: Option<&str>, phone__niew: Option<&str>, phone__isw: Option<&str>, phone__nisw: Option<&str>, phone__ie: Option<&str>, phone__nie: Option<&str>, phone__empty: Option<&str>, email__n: Option<&str>, email__ic: Option<&str>, email__nic: Option<&str>, email__iew: Option<&str>, email__niew: Option<&str>, email__isw: Option<&str>, email__nisw: Option<&str>, email__ie: Option<&str>, email__nie: Option<&str>, email__empty: Option<&str>, address__n: Option<&str>, address__ic: Option<&str>, address__nic: Option<&str>, address__iew: Option<&str>, address__niew: Option<&str>, address__isw: Option<&str>, address__nisw: Option<&str>, address__ie: Option<&str>, address__nie: Option<&str>, address__empty: Option<&str>, link__n: Option<&str>, link__ic: Option<&str>, link__nic: Option<&str>, link__iew: Option<&str>, link__niew: Option<&str>, link__isw: Option<&str>, link__nisw: Option<&str>, link__ie: Option<&str>, link__nie: Option<&str>, link__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, group_id__n: Option<&str>, group__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::TenancyContactsList200Response, Error<TenancyContactsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contacts/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = title {
        local_var_req_builder = local_var_req_builder.query(&[("title", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = phone {
        local_var_req_builder = local_var_req_builder.query(&[("phone", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email {
        local_var_req_builder = local_var_req_builder.query(&[("email", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = address {
        local_var_req_builder = local_var_req_builder.query(&[("address", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link {
        local_var_req_builder = local_var_req_builder.query(&[("link", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_id {
        local_var_req_builder = local_var_req_builder.query(&[("group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group {
        local_var_req_builder = local_var_req_builder.query(&[("group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = title__n {
        local_var_req_builder = local_var_req_builder.query(&[("title__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = title__ic {
        local_var_req_builder = local_var_req_builder.query(&[("title__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = title__nic {
        local_var_req_builder = local_var_req_builder.query(&[("title__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = title__iew {
        local_var_req_builder = local_var_req_builder.query(&[("title__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = title__niew {
        local_var_req_builder = local_var_req_builder.query(&[("title__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = title__isw {
        local_var_req_builder = local_var_req_builder.query(&[("title__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = title__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("title__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = title__ie {
        local_var_req_builder = local_var_req_builder.query(&[("title__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = title__nie {
        local_var_req_builder = local_var_req_builder.query(&[("title__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = title__empty {
        local_var_req_builder = local_var_req_builder.query(&[("title__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = phone__n {
        local_var_req_builder = local_var_req_builder.query(&[("phone__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = phone__ic {
        local_var_req_builder = local_var_req_builder.query(&[("phone__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = phone__nic {
        local_var_req_builder = local_var_req_builder.query(&[("phone__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = phone__iew {
        local_var_req_builder = local_var_req_builder.query(&[("phone__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = phone__niew {
        local_var_req_builder = local_var_req_builder.query(&[("phone__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = phone__isw {
        local_var_req_builder = local_var_req_builder.query(&[("phone__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = phone__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("phone__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = phone__ie {
        local_var_req_builder = local_var_req_builder.query(&[("phone__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = phone__nie {
        local_var_req_builder = local_var_req_builder.query(&[("phone__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = phone__empty {
        local_var_req_builder = local_var_req_builder.query(&[("phone__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__n {
        local_var_req_builder = local_var_req_builder.query(&[("email__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__ic {
        local_var_req_builder = local_var_req_builder.query(&[("email__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__nic {
        local_var_req_builder = local_var_req_builder.query(&[("email__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__iew {
        local_var_req_builder = local_var_req_builder.query(&[("email__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__niew {
        local_var_req_builder = local_var_req_builder.query(&[("email__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__isw {
        local_var_req_builder = local_var_req_builder.query(&[("email__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("email__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__ie {
        local_var_req_builder = local_var_req_builder.query(&[("email__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__nie {
        local_var_req_builder = local_var_req_builder.query(&[("email__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = email__empty {
        local_var_req_builder = local_var_req_builder.query(&[("email__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = address__n {
        local_var_req_builder = local_var_req_builder.query(&[("address__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = address__ic {
        local_var_req_builder = local_var_req_builder.query(&[("address__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = address__nic {
        local_var_req_builder = local_var_req_builder.query(&[("address__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = address__iew {
        local_var_req_builder = local_var_req_builder.query(&[("address__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = address__niew {
        local_var_req_builder = local_var_req_builder.query(&[("address__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = address__isw {
        local_var_req_builder = local_var_req_builder.query(&[("address__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = address__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("address__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = address__ie {
        local_var_req_builder = local_var_req_builder.query(&[("address__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = address__nie {
        local_var_req_builder = local_var_req_builder.query(&[("address__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = address__empty {
        local_var_req_builder = local_var_req_builder.query(&[("address__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link__n {
        local_var_req_builder = local_var_req_builder.query(&[("link__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link__ic {
        local_var_req_builder = local_var_req_builder.query(&[("link__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link__nic {
        local_var_req_builder = local_var_req_builder.query(&[("link__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link__iew {
        local_var_req_builder = local_var_req_builder.query(&[("link__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link__niew {
        local_var_req_builder = local_var_req_builder.query(&[("link__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link__isw {
        local_var_req_builder = local_var_req_builder.query(&[("link__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("link__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link__ie {
        local_var_req_builder = local_var_req_builder.query(&[("link__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link__nie {
        local_var_req_builder = local_var_req_builder.query(&[("link__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = link__empty {
        local_var_req_builder = local_var_req_builder.query(&[("link__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group__n {
        local_var_req_builder = local_var_req_builder.query(&[("group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contacts_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableContact) -> Result<crate::models::Contact, Error<TenancyContactsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contacts/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contacts_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::Contact, Error<TenancyContactsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contacts/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_contacts_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableContact) -> Result<crate::models::Contact, Error<TenancyContactsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/contacts/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyContactsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_tenant_groups_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<TenancyTenantGroupsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/tenant-groups/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<TenancyTenantGroupsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_tenant_groups_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableTenantGroup) -> Result<crate::models::TenantGroup, Error<TenancyTenantGroupsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/tenant-groups/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyTenantGroupsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_tenant_groups_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableTenantGroup) -> Result<crate::models::TenantGroup, Error<TenancyTenantGroupsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/tenant-groups/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyTenantGroupsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_tenant_groups_create(configuration: &configuration::Configuration, data: crate::models::WritableTenantGroup) -> Result<crate::models::TenantGroup, Error<TenancyTenantGroupsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/tenant-groups/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyTenantGroupsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_tenant_groups_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<TenancyTenantGroupsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/tenant-groups/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<TenancyTenantGroupsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_tenant_groups_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, slug: Option<&str>, description: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, parent_id: Option<&str>, parent: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, slug__n: Option<&str>, slug__ic: Option<&str>, slug__nic: Option<&str>, slug__iew: Option<&str>, slug__niew: Option<&str>, slug__isw: Option<&str>, slug__nisw: Option<&str>, slug__ie: Option<&str>, slug__nie: Option<&str>, slug__empty: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, parent_id__n: Option<&str>, parent__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::TenancyTenantGroupsList200Response, Error<TenancyTenantGroupsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/tenant-groups/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder = local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id {
        local_var_req_builder = local_var_req_builder.query(&[("parent_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent {
        local_var_req_builder = local_var_req_builder.query(&[("parent", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder = local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__empty {
        local_var_req_builder = local_var_req_builder.query(&[("slug__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("parent_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent__n {
        local_var_req_builder = local_var_req_builder.query(&[("parent__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyTenantGroupsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_tenant_groups_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableTenantGroup) -> Result<crate::models::TenantGroup, Error<TenancyTenantGroupsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/tenant-groups/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyTenantGroupsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_tenant_groups_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::TenantGroup, Error<TenancyTenantGroupsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/tenant-groups/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyTenantGroupsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_tenant_groups_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableTenantGroup) -> Result<crate::models::TenantGroup, Error<TenancyTenantGroupsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/tenant-groups/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyTenantGroupsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_tenants_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<TenancyTenantsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/tenants/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<TenancyTenantsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_tenants_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableTenant) -> Result<crate::models::Tenant, Error<TenancyTenantsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/tenants/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyTenantsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_tenants_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableTenant) -> Result<crate::models::Tenant, Error<TenancyTenantsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/tenants/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyTenantsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_tenants_create(configuration: &configuration::Configuration, data: crate::models::WritableTenant) -> Result<crate::models::Tenant, Error<TenancyTenantsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/tenants/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyTenantsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_tenants_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<TenancyTenantsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/tenants/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<TenancyTenantsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_tenants_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, slug: Option<&str>, description: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, contact: Option<&str>, contact_role: Option<&str>, contact_group: Option<&str>, group_id: Option<&str>, group: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, slug__n: Option<&str>, slug__ic: Option<&str>, slug__nic: Option<&str>, slug__iew: Option<&str>, slug__niew: Option<&str>, slug__isw: Option<&str>, slug__nisw: Option<&str>, slug__ie: Option<&str>, slug__nie: Option<&str>, slug__empty: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, contact__n: Option<&str>, contact_role__n: Option<&str>, contact_group__n: Option<&str>, group_id__n: Option<&str>, group__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::TenancyTenantsList200Response, Error<TenancyTenantsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/tenants/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder = local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact {
        local_var_req_builder = local_var_req_builder.query(&[("contact", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_role {
        local_var_req_builder = local_var_req_builder.query(&[("contact_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_group {
        local_var_req_builder = local_var_req_builder.query(&[("contact_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_id {
        local_var_req_builder = local_var_req_builder.query(&[("group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group {
        local_var_req_builder = local_var_req_builder.query(&[("group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder = local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__empty {
        local_var_req_builder = local_var_req_builder.query(&[("slug__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_role__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group__n {
        local_var_req_builder = local_var_req_builder.query(&[("group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyTenantsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_tenants_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableTenant) -> Result<crate::models::Tenant, Error<TenancyTenantsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/tenants/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyTenantsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_tenants_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::Tenant, Error<TenancyTenantsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/tenants/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyTenantsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn tenancy_tenants_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableTenant) -> Result<crate::models::Tenant, Error<TenancyTenantsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/tenancy/tenants/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<TenancyTenantsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}


/*
 * NetBox API
 *
 * API to access NetBox
 *
 * The version of the OpenAPI document: 3.4
 * 
 * Generated by: https://openapi-generator.tech
 */


use reqwest;

use crate::apis::ResponseContent;
use super::{Error, configuration};


/// struct for typed errors of method [`dcim_cable_terminations_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimCableTerminationsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_cable_terminations_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimCableTerminationsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_cable_terminations_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimCableTerminationsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_cable_terminations_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimCableTerminationsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_cable_terminations_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimCableTerminationsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_cable_terminations_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimCableTerminationsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_cable_terminations_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimCableTerminationsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_cable_terminations_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimCableTerminationsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_cable_terminations_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimCableTerminationsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_cables_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimCablesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_cables_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimCablesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_cables_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimCablesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_cables_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimCablesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_cables_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimCablesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_cables_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimCablesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_cables_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimCablesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_cables_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimCablesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_cables_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimCablesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_connected_device_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConnectedDeviceListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_port_templates_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortTemplatesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_port_templates_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortTemplatesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_port_templates_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortTemplatesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_port_templates_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortTemplatesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_port_templates_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortTemplatesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_port_templates_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortTemplatesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_port_templates_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortTemplatesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_port_templates_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortTemplatesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_port_templates_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortTemplatesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_ports_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_ports_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_ports_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_ports_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_ports_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_ports_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_ports_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_ports_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_ports_trace`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortsTraceError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_ports_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsolePortsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_port_templates_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortTemplatesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_port_templates_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortTemplatesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_port_templates_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortTemplatesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_port_templates_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortTemplatesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_port_templates_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortTemplatesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_port_templates_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortTemplatesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_port_templates_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortTemplatesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_port_templates_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortTemplatesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_port_templates_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortTemplatesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_ports_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_ports_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_ports_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_ports_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_ports_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_ports_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_ports_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_ports_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_ports_trace`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortsTraceError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_console_server_ports_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimConsoleServerPortsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_bay_templates_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceBayTemplatesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_bay_templates_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceBayTemplatesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_bay_templates_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceBayTemplatesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_bay_templates_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceBayTemplatesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_bay_templates_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceBayTemplatesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_bay_templates_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceBayTemplatesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_bay_templates_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceBayTemplatesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_bay_templates_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceBayTemplatesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_bay_templates_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceBayTemplatesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_bays_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceBaysBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_bays_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceBaysBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_bays_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceBaysBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_bays_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceBaysCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_bays_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceBaysDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_bays_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceBaysListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_bays_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceBaysPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_bays_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceBaysReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_bays_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceBaysUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_roles_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceRolesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_roles_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceRolesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_roles_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceRolesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_roles_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceRolesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_roles_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceRolesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_roles_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceRolesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_roles_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceRolesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_roles_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceRolesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_roles_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceRolesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_types_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceTypesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_types_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceTypesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_types_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceTypesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_types_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceTypesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_types_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceTypesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_types_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceTypesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_types_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceTypesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_types_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceTypesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_device_types_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDeviceTypesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_devices_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDevicesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_devices_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDevicesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_devices_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDevicesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_devices_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDevicesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_devices_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDevicesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_devices_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDevicesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_devices_napalm`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDevicesNapalmError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_devices_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDevicesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_devices_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDevicesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_devices_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimDevicesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_port_templates_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortTemplatesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_port_templates_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortTemplatesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_port_templates_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortTemplatesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_port_templates_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortTemplatesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_port_templates_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortTemplatesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_port_templates_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortTemplatesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_port_templates_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortTemplatesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_port_templates_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortTemplatesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_port_templates_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortTemplatesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_ports_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_ports_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_ports_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_ports_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_ports_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_ports_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_ports_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_ports_paths`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortsPathsError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_ports_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_front_ports_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimFrontPortsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interface_templates_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfaceTemplatesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interface_templates_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfaceTemplatesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interface_templates_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfaceTemplatesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interface_templates_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfaceTemplatesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interface_templates_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfaceTemplatesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interface_templates_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfaceTemplatesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interface_templates_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfaceTemplatesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interface_templates_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfaceTemplatesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interface_templates_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfaceTemplatesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interfaces_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfacesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interfaces_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfacesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interfaces_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfacesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interfaces_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfacesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interfaces_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfacesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interfaces_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfacesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interfaces_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfacesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interfaces_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfacesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interfaces_trace`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfacesTraceError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_interfaces_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInterfacesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_item_roles_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemRolesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_item_roles_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemRolesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_item_roles_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemRolesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_item_roles_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemRolesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_item_roles_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemRolesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_item_roles_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemRolesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_item_roles_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemRolesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_item_roles_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemRolesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_item_roles_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemRolesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_item_templates_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemTemplatesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_item_templates_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemTemplatesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_item_templates_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemTemplatesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_item_templates_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemTemplatesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_item_templates_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemTemplatesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_item_templates_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemTemplatesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_item_templates_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemTemplatesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_item_templates_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemTemplatesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_item_templates_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemTemplatesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_items_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_items_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_items_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_items_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_items_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_items_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_items_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_items_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_inventory_items_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimInventoryItemsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_locations_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimLocationsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_locations_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimLocationsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_locations_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimLocationsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_locations_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimLocationsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_locations_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimLocationsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_locations_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimLocationsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_locations_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimLocationsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_locations_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimLocationsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_locations_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimLocationsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_manufacturers_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimManufacturersBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_manufacturers_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimManufacturersBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_manufacturers_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimManufacturersBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_manufacturers_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimManufacturersCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_manufacturers_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimManufacturersDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_manufacturers_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimManufacturersListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_manufacturers_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimManufacturersPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_manufacturers_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimManufacturersReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_manufacturers_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimManufacturersUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_bay_templates_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleBayTemplatesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_bay_templates_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleBayTemplatesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_bay_templates_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleBayTemplatesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_bay_templates_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleBayTemplatesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_bay_templates_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleBayTemplatesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_bay_templates_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleBayTemplatesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_bay_templates_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleBayTemplatesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_bay_templates_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleBayTemplatesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_bay_templates_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleBayTemplatesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_bays_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleBaysBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_bays_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleBaysBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_bays_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleBaysBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_bays_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleBaysCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_bays_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleBaysDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_bays_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleBaysListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_bays_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleBaysPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_bays_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleBaysReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_bays_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleBaysUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_types_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleTypesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_types_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleTypesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_types_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleTypesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_types_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleTypesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_types_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleTypesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_types_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleTypesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_types_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleTypesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_types_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleTypesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_module_types_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModuleTypesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_modules_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModulesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_modules_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModulesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_modules_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModulesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_modules_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModulesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_modules_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModulesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_modules_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModulesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_modules_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModulesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_modules_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModulesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_modules_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimModulesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_platforms_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPlatformsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_platforms_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPlatformsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_platforms_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPlatformsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_platforms_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPlatformsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_platforms_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPlatformsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_platforms_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPlatformsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_platforms_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPlatformsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_platforms_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPlatformsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_platforms_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPlatformsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_feeds_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerFeedsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_feeds_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerFeedsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_feeds_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerFeedsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_feeds_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerFeedsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_feeds_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerFeedsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_feeds_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerFeedsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_feeds_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerFeedsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_feeds_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerFeedsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_feeds_trace`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerFeedsTraceError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_feeds_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerFeedsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlet_templates_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletTemplatesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlet_templates_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletTemplatesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlet_templates_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletTemplatesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlet_templates_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletTemplatesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlet_templates_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletTemplatesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlet_templates_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletTemplatesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlet_templates_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletTemplatesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlet_templates_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletTemplatesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlet_templates_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletTemplatesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlets_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlets_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlets_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlets_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlets_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlets_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlets_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlets_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlets_trace`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletsTraceError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_outlets_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerOutletsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_panels_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPanelsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_panels_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPanelsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_panels_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPanelsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_panels_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPanelsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_panels_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPanelsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_panels_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPanelsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_panels_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPanelsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_panels_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPanelsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_panels_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPanelsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_port_templates_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortTemplatesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_port_templates_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortTemplatesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_port_templates_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortTemplatesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_port_templates_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortTemplatesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_port_templates_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortTemplatesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_port_templates_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortTemplatesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_port_templates_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortTemplatesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_port_templates_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortTemplatesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_port_templates_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortTemplatesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_ports_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_ports_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_ports_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_ports_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_ports_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_ports_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_ports_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_ports_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_ports_trace`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortsTraceError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_power_ports_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimPowerPortsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rack_reservations_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRackReservationsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rack_reservations_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRackReservationsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rack_reservations_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRackReservationsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rack_reservations_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRackReservationsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rack_reservations_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRackReservationsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rack_reservations_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRackReservationsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rack_reservations_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRackReservationsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rack_reservations_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRackReservationsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rack_reservations_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRackReservationsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rack_roles_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRackRolesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rack_roles_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRackRolesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rack_roles_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRackRolesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rack_roles_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRackRolesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rack_roles_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRackRolesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rack_roles_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRackRolesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rack_roles_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRackRolesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rack_roles_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRackRolesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rack_roles_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRackRolesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_racks_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRacksBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_racks_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRacksBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_racks_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRacksBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_racks_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRacksCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_racks_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRacksDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_racks_elevation`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRacksElevationError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_racks_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRacksListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_racks_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRacksPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_racks_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRacksReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_racks_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRacksUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_port_templates_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortTemplatesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_port_templates_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortTemplatesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_port_templates_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortTemplatesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_port_templates_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortTemplatesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_port_templates_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortTemplatesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_port_templates_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortTemplatesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_port_templates_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortTemplatesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_port_templates_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortTemplatesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_port_templates_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortTemplatesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_ports_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_ports_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_ports_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_ports_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_ports_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_ports_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_ports_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_ports_paths`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortsPathsError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_ports_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_rear_ports_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRearPortsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_regions_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRegionsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_regions_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRegionsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_regions_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRegionsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_regions_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRegionsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_regions_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRegionsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_regions_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRegionsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_regions_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRegionsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_regions_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRegionsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_regions_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimRegionsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_site_groups_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimSiteGroupsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_site_groups_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimSiteGroupsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_site_groups_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimSiteGroupsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_site_groups_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimSiteGroupsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_site_groups_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimSiteGroupsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_site_groups_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimSiteGroupsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_site_groups_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimSiteGroupsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_site_groups_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimSiteGroupsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_site_groups_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimSiteGroupsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_sites_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimSitesBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_sites_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimSitesBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_sites_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimSitesBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_sites_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimSitesCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_sites_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimSitesDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_sites_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimSitesListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_sites_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimSitesPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_sites_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimSitesReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_sites_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimSitesUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_virtual_chassis_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimVirtualChassisBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_virtual_chassis_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimVirtualChassisBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_virtual_chassis_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimVirtualChassisBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_virtual_chassis_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimVirtualChassisCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_virtual_chassis_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimVirtualChassisDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_virtual_chassis_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimVirtualChassisListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_virtual_chassis_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimVirtualChassisPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_virtual_chassis_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimVirtualChassisReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_virtual_chassis_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimVirtualChassisUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_virtual_device_contexts_bulk_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimVirtualDeviceContextsBulkDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_virtual_device_contexts_bulk_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimVirtualDeviceContextsBulkPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_virtual_device_contexts_bulk_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimVirtualDeviceContextsBulkUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_virtual_device_contexts_create`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimVirtualDeviceContextsCreateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_virtual_device_contexts_delete`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimVirtualDeviceContextsDeleteError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_virtual_device_contexts_list`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimVirtualDeviceContextsListError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_virtual_device_contexts_partial_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimVirtualDeviceContextsPartialUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_virtual_device_contexts_read`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimVirtualDeviceContextsReadError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}

/// struct for typed errors of method [`dcim_virtual_device_contexts_update`]
#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(untagged)]
pub enum DcimVirtualDeviceContextsUpdateError {
    DefaultResponse(::std::collections::HashMap<String, serde_json::Value>),
    UnknownValue(serde_json::Value),
}


pub async fn dcim_cable_terminations_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimCableTerminationsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/cable-terminations/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimCableTerminationsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_cable_terminations_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::CableTermination) -> Result<crate::models::CableTermination, Error<DcimCableTerminationsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/cable-terminations/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimCableTerminationsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_cable_terminations_bulk_update(configuration: &configuration::Configuration, data: crate::models::CableTermination) -> Result<crate::models::CableTermination, Error<DcimCableTerminationsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/cable-terminations/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimCableTerminationsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_cable_terminations_create(configuration: &configuration::Configuration, data: crate::models::CableTermination) -> Result<crate::models::CableTermination, Error<DcimCableTerminationsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/cable-terminations/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimCableTerminationsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_cable_terminations_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimCableTerminationsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/cable-terminations/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimCableTerminationsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_cable_terminations_list(configuration: &configuration::Configuration, id: Option<&str>, cable: Option<&str>, cable_end: Option<&str>, termination_type: Option<&str>, termination_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, cable__n: Option<&str>, cable_end__n: Option<&str>, termination_type__n: Option<&str>, termination_id__n: Option<&str>, termination_id__lte: Option<&str>, termination_id__lt: Option<&str>, termination_id__gte: Option<&str>, termination_id__gt: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimCableTerminationsList200Response, Error<DcimCableTerminationsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/cable-terminations/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable {
        local_var_req_builder = local_var_req_builder.query(&[("cable", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable_end {
        local_var_req_builder = local_var_req_builder.query(&[("cable_end", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_type {
        local_var_req_builder = local_var_req_builder.query(&[("termination_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_id {
        local_var_req_builder = local_var_req_builder.query(&[("termination_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable__n {
        local_var_req_builder = local_var_req_builder.query(&[("cable__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable_end__n {
        local_var_req_builder = local_var_req_builder.query(&[("cable_end__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_type__n {
        local_var_req_builder = local_var_req_builder.query(&[("termination_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("termination_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("termination_id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("termination_id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("termination_id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("termination_id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimCableTerminationsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_cable_terminations_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::CableTermination) -> Result<crate::models::CableTermination, Error<DcimCableTerminationsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/cable-terminations/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimCableTerminationsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_cable_terminations_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::CableTermination, Error<DcimCableTerminationsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/cable-terminations/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimCableTerminationsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_cable_terminations_update(configuration: &configuration::Configuration, id: i32, data: crate::models::CableTermination) -> Result<crate::models::CableTermination, Error<DcimCableTerminationsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/cable-terminations/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimCableTerminationsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_cables_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimCablesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/cables/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimCablesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_cables_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableCable) -> Result<crate::models::Cable, Error<DcimCablesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/cables/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimCablesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_cables_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableCable) -> Result<crate::models::Cable, Error<DcimCablesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/cables/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimCablesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_cables_create(configuration: &configuration::Configuration, data: crate::models::WritableCable) -> Result<crate::models::Cable, Error<DcimCablesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/cables/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimCablesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_cables_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimCablesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/cables/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimCablesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_cables_list(configuration: &configuration::Configuration, id: Option<&str>, label: Option<&str>, length: Option<&str>, length_unit: Option<&str>, tenant_group_id: Option<&str>, tenant_group: Option<&str>, tenant_id: Option<&str>, tenant: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, termination_a_type: Option<&str>, termination_a_id: Option<&str>, termination_b_type: Option<&str>, termination_b_id: Option<&str>, r#type: Option<&str>, status: Option<&str>, color: Option<&str>, device_id: Option<&str>, device: Option<&str>, rack_id: Option<&str>, rack: Option<&str>, location_id: Option<&str>, location: Option<&str>, site_id: Option<&str>, site: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, label__n: Option<&str>, label__ic: Option<&str>, label__nic: Option<&str>, label__iew: Option<&str>, label__niew: Option<&str>, label__isw: Option<&str>, label__nisw: Option<&str>, label__ie: Option<&str>, label__nie: Option<&str>, label__empty: Option<&str>, length__n: Option<&str>, length__lte: Option<&str>, length__lt: Option<&str>, length__gte: Option<&str>, length__gt: Option<&str>, length_unit__n: Option<&str>, tenant_group_id__n: Option<&str>, tenant_group__n: Option<&str>, tenant_id__n: Option<&str>, tenant__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, termination_a_type__n: Option<&str>, termination_a_id__n: Option<&str>, termination_a_id__lte: Option<&str>, termination_a_id__lt: Option<&str>, termination_a_id__gte: Option<&str>, termination_a_id__gt: Option<&str>, termination_b_type__n: Option<&str>, termination_b_id__n: Option<&str>, termination_b_id__lte: Option<&str>, termination_b_id__lt: Option<&str>, termination_b_id__gte: Option<&str>, termination_b_id__gt: Option<&str>, type__n: Option<&str>, status__n: Option<&str>, color__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimCablesList200Response, Error<DcimCablesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/cables/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label {
        local_var_req_builder = local_var_req_builder.query(&[("label", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = length {
        local_var_req_builder = local_var_req_builder.query(&[("length", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = length_unit {
        local_var_req_builder = local_var_req_builder.query(&[("length_unit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant {
        local_var_req_builder = local_var_req_builder.query(&[("tenant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_a_type {
        local_var_req_builder = local_var_req_builder.query(&[("termination_a_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_a_id {
        local_var_req_builder = local_var_req_builder.query(&[("termination_a_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_b_type {
        local_var_req_builder = local_var_req_builder.query(&[("termination_b_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_b_id {
        local_var_req_builder = local_var_req_builder.query(&[("termination_b_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder = local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color {
        local_var_req_builder = local_var_req_builder.query(&[("color", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("device_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device {
        local_var_req_builder = local_var_req_builder.query(&[("device", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack {
        local_var_req_builder = local_var_req_builder.query(&[("rack", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id {
        local_var_req_builder = local_var_req_builder.query(&[("location_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location {
        local_var_req_builder = local_var_req_builder.query(&[("location", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__n {
        local_var_req_builder = local_var_req_builder.query(&[("label__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ic {
        local_var_req_builder = local_var_req_builder.query(&[("label__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nic {
        local_var_req_builder = local_var_req_builder.query(&[("label__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__iew {
        local_var_req_builder = local_var_req_builder.query(&[("label__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__niew {
        local_var_req_builder = local_var_req_builder.query(&[("label__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__isw {
        local_var_req_builder = local_var_req_builder.query(&[("label__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("label__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ie {
        local_var_req_builder = local_var_req_builder.query(&[("label__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nie {
        local_var_req_builder = local_var_req_builder.query(&[("label__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__empty {
        local_var_req_builder = local_var_req_builder.query(&[("label__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = length__n {
        local_var_req_builder = local_var_req_builder.query(&[("length__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = length__lte {
        local_var_req_builder = local_var_req_builder.query(&[("length__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = length__lt {
        local_var_req_builder = local_var_req_builder.query(&[("length__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = length__gte {
        local_var_req_builder = local_var_req_builder.query(&[("length__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = length__gt {
        local_var_req_builder = local_var_req_builder.query(&[("length__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = length_unit__n {
        local_var_req_builder = local_var_req_builder.query(&[("length_unit__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_a_type__n {
        local_var_req_builder = local_var_req_builder.query(&[("termination_a_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_a_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("termination_a_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_a_id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("termination_a_id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_a_id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("termination_a_id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_a_id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("termination_a_id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_a_id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("termination_a_id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_b_type__n {
        local_var_req_builder = local_var_req_builder.query(&[("termination_b_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_b_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("termination_b_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_b_id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("termination_b_id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_b_id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("termination_b_id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_b_id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("termination_b_id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = termination_b_id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("termination_b_id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder = local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status__n {
        local_var_req_builder = local_var_req_builder.query(&[("status__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__n {
        local_var_req_builder = local_var_req_builder.query(&[("color__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimCablesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_cables_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableCable) -> Result<crate::models::Cable, Error<DcimCablesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/cables/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimCablesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_cables_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::Cable, Error<DcimCablesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/cables/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimCablesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_cables_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableCable) -> Result<crate::models::Cable, Error<DcimCablesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/cables/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimCablesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors via a protocol such as LLDP. Two query parameters must be included in the request:  * `peer_device`: The name of the peer device * `peer_interface`: The name of the peer interface
pub async fn dcim_connected_device_list(configuration: &configuration::Configuration, peer_device: &str, peer_interface: &str) -> Result<crate::models::Device, Error<DcimConnectedDeviceListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/connected-device/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("peer_device", &peer_device.to_string())]);
    local_var_req_builder = local_var_req_builder.query(&[("peer_interface", &peer_interface.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConnectedDeviceListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_port_templates_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimConsolePortTemplatesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimConsolePortTemplatesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_port_templates_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableConsolePortTemplate) -> Result<crate::models::ConsolePortTemplate, Error<DcimConsolePortTemplatesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsolePortTemplatesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_port_templates_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableConsolePortTemplate) -> Result<crate::models::ConsolePortTemplate, Error<DcimConsolePortTemplatesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsolePortTemplatesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_port_templates_create(configuration: &configuration::Configuration, data: crate::models::WritableConsolePortTemplate) -> Result<crate::models::ConsolePortTemplate, Error<DcimConsolePortTemplatesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsolePortTemplatesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_port_templates_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimConsolePortTemplatesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimConsolePortTemplatesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_port_templates_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, r#type: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, devicetype_id: Option<&str>, moduletype_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, type__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, devicetype_id__n: Option<&str>, moduletype_id__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimConsolePortTemplatesList200Response, Error<DcimConsolePortTemplatesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = moduletype_id {
        local_var_req_builder = local_var_req_builder.query(&[("moduletype_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder = local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = moduletype_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("moduletype_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsolePortTemplatesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_port_templates_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableConsolePortTemplate) -> Result<crate::models::ConsolePortTemplate, Error<DcimConsolePortTemplatesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsolePortTemplatesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_port_templates_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::ConsolePortTemplate, Error<DcimConsolePortTemplatesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsolePortTemplatesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_port_templates_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableConsolePortTemplate) -> Result<crate::models::ConsolePortTemplate, Error<DcimConsolePortTemplatesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsolePortTemplatesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_ports_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimConsolePortsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimConsolePortsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_ports_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableConsolePort) -> Result<crate::models::ConsolePort, Error<DcimConsolePortsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsolePortsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_ports_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableConsolePort) -> Result<crate::models::ConsolePort, Error<DcimConsolePortsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsolePortsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_ports_create(configuration: &configuration::Configuration, data: crate::models::WritableConsolePort) -> Result<crate::models::ConsolePort, Error<DcimConsolePortsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsolePortsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_ports_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimConsolePortsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimConsolePortsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_ports_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, label: Option<&str>, description: Option<&str>, cable_end: Option<&str>, q: Option<&str>, region_id: Option<&str>, region: Option<&str>, site_group_id: Option<&str>, site_group: Option<&str>, site_id: Option<&str>, site: Option<&str>, location_id: Option<&str>, location: Option<&str>, rack_id: Option<&str>, rack: Option<&str>, device_id: Option<&str>, device: Option<&str>, virtual_chassis_id: Option<&str>, virtual_chassis: Option<&str>, module_id: Option<&str>, created: Option<&str>, last_updated: Option<&str>, tag: Option<&str>, cabled: Option<&str>, occupied: Option<&str>, connected: Option<&str>, r#type: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, label__n: Option<&str>, label__ic: Option<&str>, label__nic: Option<&str>, label__iew: Option<&str>, label__niew: Option<&str>, label__isw: Option<&str>, label__nisw: Option<&str>, label__ie: Option<&str>, label__nie: Option<&str>, label__empty: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, cable_end__n: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, site_group_id__n: Option<&str>, site_group__n: Option<&str>, site_id__n: Option<&str>, site__n: Option<&str>, location_id__n: Option<&str>, location__n: Option<&str>, rack_id__n: Option<&str>, rack__n: Option<&str>, device_id__n: Option<&str>, device__n: Option<&str>, virtual_chassis_id__n: Option<&str>, virtual_chassis__n: Option<&str>, module_id__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, type__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimConsolePortsList200Response, Error<DcimConsolePortsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label {
        local_var_req_builder = local_var_req_builder.query(&[("label", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable_end {
        local_var_req_builder = local_var_req_builder.query(&[("cable_end", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder = local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id {
        local_var_req_builder = local_var_req_builder.query(&[("location_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location {
        local_var_req_builder = local_var_req_builder.query(&[("location", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack {
        local_var_req_builder = local_var_req_builder.query(&[("rack", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("device_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device {
        local_var_req_builder = local_var_req_builder.query(&[("device", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_id {
        local_var_req_builder = local_var_req_builder.query(&[("module_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cabled {
        local_var_req_builder = local_var_req_builder.query(&[("cabled", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = occupied {
        local_var_req_builder = local_var_req_builder.query(&[("occupied", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = connected {
        local_var_req_builder = local_var_req_builder.query(&[("connected", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__n {
        local_var_req_builder = local_var_req_builder.query(&[("label__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ic {
        local_var_req_builder = local_var_req_builder.query(&[("label__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nic {
        local_var_req_builder = local_var_req_builder.query(&[("label__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__iew {
        local_var_req_builder = local_var_req_builder.query(&[("label__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__niew {
        local_var_req_builder = local_var_req_builder.query(&[("label__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__isw {
        local_var_req_builder = local_var_req_builder.query(&[("label__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("label__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ie {
        local_var_req_builder = local_var_req_builder.query(&[("label__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nie {
        local_var_req_builder = local_var_req_builder.query(&[("label__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__empty {
        local_var_req_builder = local_var_req_builder.query(&[("label__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable_end__n {
        local_var_req_builder = local_var_req_builder.query(&[("cable_end__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder = local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("location_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location__n {
        local_var_req_builder = local_var_req_builder.query(&[("location__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("device_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device__n {
        local_var_req_builder = local_var_req_builder.query(&[("device__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("module_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder = local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsolePortsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_ports_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableConsolePort) -> Result<crate::models::ConsolePort, Error<DcimConsolePortsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsolePortsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_ports_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::ConsolePort, Error<DcimConsolePortsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsolePortsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
pub async fn dcim_console_ports_trace(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::ConsolePort, Error<DcimConsolePortsTraceError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-ports/{id}/trace/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsolePortsTraceError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_ports_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableConsolePort) -> Result<crate::models::ConsolePort, Error<DcimConsolePortsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsolePortsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_server_port_templates_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimConsoleServerPortTemplatesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimConsoleServerPortTemplatesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_server_port_templates_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableConsoleServerPortTemplate) -> Result<crate::models::ConsoleServerPortTemplate, Error<DcimConsoleServerPortTemplatesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsoleServerPortTemplatesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_server_port_templates_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableConsoleServerPortTemplate) -> Result<crate::models::ConsoleServerPortTemplate, Error<DcimConsoleServerPortTemplatesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsoleServerPortTemplatesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_server_port_templates_create(configuration: &configuration::Configuration, data: crate::models::WritableConsoleServerPortTemplate) -> Result<crate::models::ConsoleServerPortTemplate, Error<DcimConsoleServerPortTemplatesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsoleServerPortTemplatesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_server_port_templates_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimConsoleServerPortTemplatesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimConsoleServerPortTemplatesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_server_port_templates_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, r#type: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, devicetype_id: Option<&str>, moduletype_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, type__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, devicetype_id__n: Option<&str>, moduletype_id__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimConsoleServerPortTemplatesList200Response, Error<DcimConsoleServerPortTemplatesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = moduletype_id {
        local_var_req_builder = local_var_req_builder.query(&[("moduletype_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder = local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = moduletype_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("moduletype_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsoleServerPortTemplatesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_server_port_templates_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableConsoleServerPortTemplate) -> Result<crate::models::ConsoleServerPortTemplate, Error<DcimConsoleServerPortTemplatesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsoleServerPortTemplatesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_server_port_templates_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::ConsoleServerPortTemplate, Error<DcimConsoleServerPortTemplatesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsoleServerPortTemplatesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_server_port_templates_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableConsoleServerPortTemplate) -> Result<crate::models::ConsoleServerPortTemplate, Error<DcimConsoleServerPortTemplatesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsoleServerPortTemplatesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_server_ports_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimConsoleServerPortsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimConsoleServerPortsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_server_ports_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableConsoleServerPort) -> Result<crate::models::ConsoleServerPort, Error<DcimConsoleServerPortsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsoleServerPortsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_server_ports_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableConsoleServerPort) -> Result<crate::models::ConsoleServerPort, Error<DcimConsoleServerPortsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsoleServerPortsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_server_ports_create(configuration: &configuration::Configuration, data: crate::models::WritableConsoleServerPort) -> Result<crate::models::ConsoleServerPort, Error<DcimConsoleServerPortsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsoleServerPortsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_server_ports_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimConsoleServerPortsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimConsoleServerPortsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_server_ports_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, label: Option<&str>, description: Option<&str>, cable_end: Option<&str>, q: Option<&str>, region_id: Option<&str>, region: Option<&str>, site_group_id: Option<&str>, site_group: Option<&str>, site_id: Option<&str>, site: Option<&str>, location_id: Option<&str>, location: Option<&str>, rack_id: Option<&str>, rack: Option<&str>, device_id: Option<&str>, device: Option<&str>, virtual_chassis_id: Option<&str>, virtual_chassis: Option<&str>, module_id: Option<&str>, created: Option<&str>, last_updated: Option<&str>, tag: Option<&str>, cabled: Option<&str>, occupied: Option<&str>, connected: Option<&str>, r#type: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, label__n: Option<&str>, label__ic: Option<&str>, label__nic: Option<&str>, label__iew: Option<&str>, label__niew: Option<&str>, label__isw: Option<&str>, label__nisw: Option<&str>, label__ie: Option<&str>, label__nie: Option<&str>, label__empty: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, cable_end__n: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, site_group_id__n: Option<&str>, site_group__n: Option<&str>, site_id__n: Option<&str>, site__n: Option<&str>, location_id__n: Option<&str>, location__n: Option<&str>, rack_id__n: Option<&str>, rack__n: Option<&str>, device_id__n: Option<&str>, device__n: Option<&str>, virtual_chassis_id__n: Option<&str>, virtual_chassis__n: Option<&str>, module_id__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, type__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimConsoleServerPortsList200Response, Error<DcimConsoleServerPortsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label {
        local_var_req_builder = local_var_req_builder.query(&[("label", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable_end {
        local_var_req_builder = local_var_req_builder.query(&[("cable_end", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder = local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id {
        local_var_req_builder = local_var_req_builder.query(&[("location_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location {
        local_var_req_builder = local_var_req_builder.query(&[("location", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack {
        local_var_req_builder = local_var_req_builder.query(&[("rack", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("device_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device {
        local_var_req_builder = local_var_req_builder.query(&[("device", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_id {
        local_var_req_builder = local_var_req_builder.query(&[("module_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cabled {
        local_var_req_builder = local_var_req_builder.query(&[("cabled", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = occupied {
        local_var_req_builder = local_var_req_builder.query(&[("occupied", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = connected {
        local_var_req_builder = local_var_req_builder.query(&[("connected", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__n {
        local_var_req_builder = local_var_req_builder.query(&[("label__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ic {
        local_var_req_builder = local_var_req_builder.query(&[("label__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nic {
        local_var_req_builder = local_var_req_builder.query(&[("label__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__iew {
        local_var_req_builder = local_var_req_builder.query(&[("label__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__niew {
        local_var_req_builder = local_var_req_builder.query(&[("label__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__isw {
        local_var_req_builder = local_var_req_builder.query(&[("label__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("label__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ie {
        local_var_req_builder = local_var_req_builder.query(&[("label__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nie {
        local_var_req_builder = local_var_req_builder.query(&[("label__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__empty {
        local_var_req_builder = local_var_req_builder.query(&[("label__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable_end__n {
        local_var_req_builder = local_var_req_builder.query(&[("cable_end__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder = local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("location_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location__n {
        local_var_req_builder = local_var_req_builder.query(&[("location__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("device_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device__n {
        local_var_req_builder = local_var_req_builder.query(&[("device__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("module_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder = local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsoleServerPortsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_server_ports_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableConsoleServerPort) -> Result<crate::models::ConsoleServerPort, Error<DcimConsoleServerPortsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsoleServerPortsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_server_ports_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::ConsoleServerPort, Error<DcimConsoleServerPortsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsoleServerPortsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
pub async fn dcim_console_server_ports_trace(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::ConsoleServerPort, Error<DcimConsoleServerPortsTraceError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-ports/{id}/trace/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsoleServerPortsTraceError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_console_server_ports_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableConsoleServerPort) -> Result<crate::models::ConsoleServerPort, Error<DcimConsoleServerPortsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/console-server-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimConsoleServerPortsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_bay_templates_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimDeviceBayTemplatesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-bay-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimDeviceBayTemplatesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_bay_templates_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableDeviceBayTemplate) -> Result<crate::models::DeviceBayTemplate, Error<DcimDeviceBayTemplatesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-bay-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceBayTemplatesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_bay_templates_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableDeviceBayTemplate) -> Result<crate::models::DeviceBayTemplate, Error<DcimDeviceBayTemplatesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-bay-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceBayTemplatesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_bay_templates_create(configuration: &configuration::Configuration, data: crate::models::WritableDeviceBayTemplate) -> Result<crate::models::DeviceBayTemplate, Error<DcimDeviceBayTemplatesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-bay-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceBayTemplatesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_bay_templates_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimDeviceBayTemplatesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-bay-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimDeviceBayTemplatesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_bay_templates_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, devicetype_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, devicetype_id__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimDeviceBayTemplatesList200Response, Error<DcimDeviceBayTemplatesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-bay-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceBayTemplatesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_bay_templates_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableDeviceBayTemplate) -> Result<crate::models::DeviceBayTemplate, Error<DcimDeviceBayTemplatesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-bay-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceBayTemplatesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_bay_templates_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::DeviceBayTemplate, Error<DcimDeviceBayTemplatesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-bay-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceBayTemplatesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_bay_templates_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableDeviceBayTemplate) -> Result<crate::models::DeviceBayTemplate, Error<DcimDeviceBayTemplatesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-bay-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceBayTemplatesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_bays_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimDeviceBaysBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-bays/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimDeviceBaysBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_bays_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableDeviceBay) -> Result<crate::models::DeviceBay, Error<DcimDeviceBaysBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-bays/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceBaysBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_bays_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableDeviceBay) -> Result<crate::models::DeviceBay, Error<DcimDeviceBaysBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-bays/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceBaysBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_bays_create(configuration: &configuration::Configuration, data: crate::models::WritableDeviceBay) -> Result<crate::models::DeviceBay, Error<DcimDeviceBaysCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-bays/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceBaysCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_bays_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimDeviceBaysDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-bays/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimDeviceBaysDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_bays_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, label: Option<&str>, description: Option<&str>, q: Option<&str>, region_id: Option<&str>, region: Option<&str>, site_group_id: Option<&str>, site_group: Option<&str>, site_id: Option<&str>, site: Option<&str>, location_id: Option<&str>, location: Option<&str>, rack_id: Option<&str>, rack: Option<&str>, device_id: Option<&str>, device: Option<&str>, virtual_chassis_id: Option<&str>, virtual_chassis: Option<&str>, created: Option<&str>, last_updated: Option<&str>, tag: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, label__n: Option<&str>, label__ic: Option<&str>, label__nic: Option<&str>, label__iew: Option<&str>, label__niew: Option<&str>, label__isw: Option<&str>, label__nisw: Option<&str>, label__ie: Option<&str>, label__nie: Option<&str>, label__empty: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, site_group_id__n: Option<&str>, site_group__n: Option<&str>, site_id__n: Option<&str>, site__n: Option<&str>, location_id__n: Option<&str>, location__n: Option<&str>, rack_id__n: Option<&str>, rack__n: Option<&str>, device_id__n: Option<&str>, device__n: Option<&str>, virtual_chassis_id__n: Option<&str>, virtual_chassis__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimDeviceBaysList200Response, Error<DcimDeviceBaysListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-bays/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label {
        local_var_req_builder = local_var_req_builder.query(&[("label", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder = local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id {
        local_var_req_builder = local_var_req_builder.query(&[("location_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location {
        local_var_req_builder = local_var_req_builder.query(&[("location", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack {
        local_var_req_builder = local_var_req_builder.query(&[("rack", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("device_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device {
        local_var_req_builder = local_var_req_builder.query(&[("device", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__n {
        local_var_req_builder = local_var_req_builder.query(&[("label__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ic {
        local_var_req_builder = local_var_req_builder.query(&[("label__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nic {
        local_var_req_builder = local_var_req_builder.query(&[("label__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__iew {
        local_var_req_builder = local_var_req_builder.query(&[("label__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__niew {
        local_var_req_builder = local_var_req_builder.query(&[("label__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__isw {
        local_var_req_builder = local_var_req_builder.query(&[("label__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("label__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ie {
        local_var_req_builder = local_var_req_builder.query(&[("label__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nie {
        local_var_req_builder = local_var_req_builder.query(&[("label__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__empty {
        local_var_req_builder = local_var_req_builder.query(&[("label__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder = local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("location_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location__n {
        local_var_req_builder = local_var_req_builder.query(&[("location__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("device_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device__n {
        local_var_req_builder = local_var_req_builder.query(&[("device__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceBaysListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_bays_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableDeviceBay) -> Result<crate::models::DeviceBay, Error<DcimDeviceBaysPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-bays/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceBaysPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_bays_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::DeviceBay, Error<DcimDeviceBaysReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-bays/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceBaysReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_bays_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableDeviceBay) -> Result<crate::models::DeviceBay, Error<DcimDeviceBaysUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-bays/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceBaysUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_roles_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimDeviceRolesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimDeviceRolesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_roles_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::DeviceRole) -> Result<crate::models::DeviceRole, Error<DcimDeviceRolesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceRolesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_roles_bulk_update(configuration: &configuration::Configuration, data: crate::models::DeviceRole) -> Result<crate::models::DeviceRole, Error<DcimDeviceRolesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceRolesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_roles_create(configuration: &configuration::Configuration, data: crate::models::DeviceRole) -> Result<crate::models::DeviceRole, Error<DcimDeviceRolesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceRolesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_roles_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimDeviceRolesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-roles/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimDeviceRolesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_roles_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, slug: Option<&str>, color: Option<&str>, vm_role: Option<&str>, description: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, slug__n: Option<&str>, slug__ic: Option<&str>, slug__nic: Option<&str>, slug__iew: Option<&str>, slug__niew: Option<&str>, slug__isw: Option<&str>, slug__nisw: Option<&str>, slug__ie: Option<&str>, slug__nie: Option<&str>, slug__empty: Option<&str>, color__n: Option<&str>, color__ic: Option<&str>, color__nic: Option<&str>, color__iew: Option<&str>, color__niew: Option<&str>, color__isw: Option<&str>, color__nisw: Option<&str>, color__ie: Option<&str>, color__nie: Option<&str>, color__empty: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimDeviceRolesList200Response, Error<DcimDeviceRolesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder = local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color {
        local_var_req_builder = local_var_req_builder.query(&[("color", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vm_role {
        local_var_req_builder = local_var_req_builder.query(&[("vm_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder = local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__empty {
        local_var_req_builder = local_var_req_builder.query(&[("slug__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__n {
        local_var_req_builder = local_var_req_builder.query(&[("color__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__ic {
        local_var_req_builder = local_var_req_builder.query(&[("color__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nic {
        local_var_req_builder = local_var_req_builder.query(&[("color__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__iew {
        local_var_req_builder = local_var_req_builder.query(&[("color__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__niew {
        local_var_req_builder = local_var_req_builder.query(&[("color__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__isw {
        local_var_req_builder = local_var_req_builder.query(&[("color__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("color__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__ie {
        local_var_req_builder = local_var_req_builder.query(&[("color__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nie {
        local_var_req_builder = local_var_req_builder.query(&[("color__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__empty {
        local_var_req_builder = local_var_req_builder.query(&[("color__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceRolesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_roles_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::DeviceRole) -> Result<crate::models::DeviceRole, Error<DcimDeviceRolesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-roles/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceRolesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_roles_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::DeviceRole, Error<DcimDeviceRolesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-roles/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceRolesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_roles_update(configuration: &configuration::Configuration, id: i32, data: crate::models::DeviceRole) -> Result<crate::models::DeviceRole, Error<DcimDeviceRolesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-roles/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceRolesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_types_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimDeviceTypesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-types/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimDeviceTypesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_types_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableDeviceType) -> Result<crate::models::DeviceType, Error<DcimDeviceTypesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-types/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceTypesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_types_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableDeviceType) -> Result<crate::models::DeviceType, Error<DcimDeviceTypesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-types/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceTypesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_types_create(configuration: &configuration::Configuration, data: crate::models::WritableDeviceType) -> Result<crate::models::DeviceType, Error<DcimDeviceTypesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-types/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceTypesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_types_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimDeviceTypesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-types/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimDeviceTypesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_types_list(configuration: &configuration::Configuration, id: Option<&str>, model: Option<&str>, slug: Option<&str>, part_number: Option<&str>, u_height: Option<&str>, is_full_depth: Option<&str>, subdevice_role: Option<&str>, airflow: Option<&str>, weight: Option<&str>, weight_unit: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, manufacturer_id: Option<&str>, manufacturer: Option<&str>, has_front_image: Option<&str>, has_rear_image: Option<&str>, console_ports: Option<&str>, console_server_ports: Option<&str>, power_ports: Option<&str>, power_outlets: Option<&str>, interfaces: Option<&str>, pass_through_ports: Option<&str>, module_bays: Option<&str>, device_bays: Option<&str>, inventory_items: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, model__n: Option<&str>, model__ic: Option<&str>, model__nic: Option<&str>, model__iew: Option<&str>, model__niew: Option<&str>, model__isw: Option<&str>, model__nisw: Option<&str>, model__ie: Option<&str>, model__nie: Option<&str>, model__empty: Option<&str>, slug__n: Option<&str>, slug__ic: Option<&str>, slug__nic: Option<&str>, slug__iew: Option<&str>, slug__niew: Option<&str>, slug__isw: Option<&str>, slug__nisw: Option<&str>, slug__ie: Option<&str>, slug__nie: Option<&str>, slug__empty: Option<&str>, part_number__n: Option<&str>, part_number__ic: Option<&str>, part_number__nic: Option<&str>, part_number__iew: Option<&str>, part_number__niew: Option<&str>, part_number__isw: Option<&str>, part_number__nisw: Option<&str>, part_number__ie: Option<&str>, part_number__nie: Option<&str>, part_number__empty: Option<&str>, u_height__n: Option<&str>, u_height__lte: Option<&str>, u_height__lt: Option<&str>, u_height__gte: Option<&str>, u_height__gt: Option<&str>, subdevice_role__n: Option<&str>, airflow__n: Option<&str>, weight__n: Option<&str>, weight__lte: Option<&str>, weight__lt: Option<&str>, weight__gte: Option<&str>, weight__gt: Option<&str>, weight_unit__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, manufacturer_id__n: Option<&str>, manufacturer__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimDeviceTypesList200Response, Error<DcimDeviceTypesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-types/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model {
        local_var_req_builder = local_var_req_builder.query(&[("model", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder = local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number {
        local_var_req_builder = local_var_req_builder.query(&[("part_number", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = u_height {
        local_var_req_builder = local_var_req_builder.query(&[("u_height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_full_depth {
        local_var_req_builder = local_var_req_builder.query(&[("is_full_depth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subdevice_role {
        local_var_req_builder = local_var_req_builder.query(&[("subdevice_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = airflow {
        local_var_req_builder = local_var_req_builder.query(&[("airflow", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight {
        local_var_req_builder = local_var_req_builder.query(&[("weight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight_unit {
        local_var_req_builder = local_var_req_builder.query(&[("weight_unit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer_id {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = has_front_image {
        local_var_req_builder = local_var_req_builder.query(&[("has_front_image", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = has_rear_image {
        local_var_req_builder = local_var_req_builder.query(&[("has_rear_image", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = console_ports {
        local_var_req_builder = local_var_req_builder.query(&[("console_ports", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = console_server_ports {
        local_var_req_builder = local_var_req_builder.query(&[("console_server_ports", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = power_ports {
        local_var_req_builder = local_var_req_builder.query(&[("power_ports", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = power_outlets {
        local_var_req_builder = local_var_req_builder.query(&[("power_outlets", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = interfaces {
        local_var_req_builder = local_var_req_builder.query(&[("interfaces", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pass_through_ports {
        local_var_req_builder = local_var_req_builder.query(&[("pass_through_ports", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_bays {
        local_var_req_builder = local_var_req_builder.query(&[("module_bays", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_bays {
        local_var_req_builder = local_var_req_builder.query(&[("device_bays", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = inventory_items {
        local_var_req_builder = local_var_req_builder.query(&[("inventory_items", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__n {
        local_var_req_builder = local_var_req_builder.query(&[("model__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__ic {
        local_var_req_builder = local_var_req_builder.query(&[("model__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__nic {
        local_var_req_builder = local_var_req_builder.query(&[("model__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__iew {
        local_var_req_builder = local_var_req_builder.query(&[("model__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__niew {
        local_var_req_builder = local_var_req_builder.query(&[("model__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__isw {
        local_var_req_builder = local_var_req_builder.query(&[("model__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("model__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__ie {
        local_var_req_builder = local_var_req_builder.query(&[("model__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__nie {
        local_var_req_builder = local_var_req_builder.query(&[("model__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__empty {
        local_var_req_builder = local_var_req_builder.query(&[("model__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder = local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__empty {
        local_var_req_builder = local_var_req_builder.query(&[("slug__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__n {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__ic {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__nic {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__iew {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__niew {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__isw {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__ie {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__nie {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__empty {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = u_height__n {
        local_var_req_builder = local_var_req_builder.query(&[("u_height__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = u_height__lte {
        local_var_req_builder = local_var_req_builder.query(&[("u_height__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = u_height__lt {
        local_var_req_builder = local_var_req_builder.query(&[("u_height__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = u_height__gte {
        local_var_req_builder = local_var_req_builder.query(&[("u_height__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = u_height__gt {
        local_var_req_builder = local_var_req_builder.query(&[("u_height__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = subdevice_role__n {
        local_var_req_builder = local_var_req_builder.query(&[("subdevice_role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = airflow__n {
        local_var_req_builder = local_var_req_builder.query(&[("airflow__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__n {
        local_var_req_builder = local_var_req_builder.query(&[("weight__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__lte {
        local_var_req_builder = local_var_req_builder.query(&[("weight__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__lt {
        local_var_req_builder = local_var_req_builder.query(&[("weight__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__gte {
        local_var_req_builder = local_var_req_builder.query(&[("weight__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__gt {
        local_var_req_builder = local_var_req_builder.query(&[("weight__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight_unit__n {
        local_var_req_builder = local_var_req_builder.query(&[("weight_unit__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer__n {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceTypesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_types_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableDeviceType) -> Result<crate::models::DeviceType, Error<DcimDeviceTypesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-types/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceTypesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_types_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::DeviceType, Error<DcimDeviceTypesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-types/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceTypesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_device_types_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableDeviceType) -> Result<crate::models::DeviceType, Error<DcimDeviceTypesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/device-types/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDeviceTypesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_devices_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimDevicesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/devices/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimDevicesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_devices_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableDeviceWithConfigContext) -> Result<crate::models::DeviceWithConfigContext, Error<DcimDevicesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/devices/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDevicesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_devices_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableDeviceWithConfigContext) -> Result<crate::models::DeviceWithConfigContext, Error<DcimDevicesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/devices/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDevicesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_devices_create(configuration: &configuration::Configuration, data: crate::models::WritableDeviceWithConfigContext) -> Result<crate::models::DeviceWithConfigContext, Error<DcimDevicesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/devices/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDevicesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_devices_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimDevicesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/devices/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimDevicesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_devices_list(configuration: &configuration::Configuration, id: Option<&str>, asset_tag: Option<&str>, face: Option<&str>, position: Option<&str>, airflow: Option<&str>, vc_position: Option<&str>, vc_priority: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, tenant_group_id: Option<&str>, tenant_group: Option<&str>, tenant_id: Option<&str>, tenant: Option<&str>, contact: Option<&str>, contact_role: Option<&str>, contact_group: Option<&str>, local_context_data: Option<&str>, manufacturer_id: Option<&str>, manufacturer: Option<&str>, device_type: Option<&str>, device_type_id: Option<&str>, role_id: Option<&str>, role: Option<&str>, parent_device_id: Option<&str>, platform_id: Option<&str>, platform: Option<&str>, region_id: Option<&str>, region: Option<&str>, site_group_id: Option<&str>, site_group: Option<&str>, site_id: Option<&str>, site: Option<&str>, location_id: Option<&str>, rack_id: Option<&str>, cluster_id: Option<&str>, model: Option<&str>, name: Option<&str>, status: Option<&str>, is_full_depth: Option<&str>, mac_address: Option<&str>, serial: Option<&str>, has_primary_ip: Option<&str>, virtual_chassis_id: Option<&str>, virtual_chassis_member: Option<&str>, console_ports: Option<&str>, console_server_ports: Option<&str>, power_ports: Option<&str>, power_outlets: Option<&str>, interfaces: Option<&str>, pass_through_ports: Option<&str>, module_bays: Option<&str>, device_bays: Option<&str>, primary_ip4_id: Option<&str>, primary_ip6_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, asset_tag__n: Option<&str>, asset_tag__ic: Option<&str>, asset_tag__nic: Option<&str>, asset_tag__iew: Option<&str>, asset_tag__niew: Option<&str>, asset_tag__isw: Option<&str>, asset_tag__nisw: Option<&str>, asset_tag__ie: Option<&str>, asset_tag__nie: Option<&str>, asset_tag__empty: Option<&str>, face__n: Option<&str>, position__n: Option<&str>, position__lte: Option<&str>, position__lt: Option<&str>, position__gte: Option<&str>, position__gt: Option<&str>, airflow__n: Option<&str>, vc_position__n: Option<&str>, vc_position__lte: Option<&str>, vc_position__lt: Option<&str>, vc_position__gte: Option<&str>, vc_position__gt: Option<&str>, vc_priority__n: Option<&str>, vc_priority__lte: Option<&str>, vc_priority__lt: Option<&str>, vc_priority__gte: Option<&str>, vc_priority__gt: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, tenant_group_id__n: Option<&str>, tenant_group__n: Option<&str>, tenant_id__n: Option<&str>, tenant__n: Option<&str>, contact__n: Option<&str>, contact_role__n: Option<&str>, contact_group__n: Option<&str>, manufacturer_id__n: Option<&str>, manufacturer__n: Option<&str>, device_type__n: Option<&str>, device_type_id__n: Option<&str>, role_id__n: Option<&str>, role__n: Option<&str>, parent_device_id__n: Option<&str>, platform_id__n: Option<&str>, platform__n: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, site_group_id__n: Option<&str>, site_group__n: Option<&str>, site_id__n: Option<&str>, site__n: Option<&str>, location_id__n: Option<&str>, rack_id__n: Option<&str>, cluster_id__n: Option<&str>, model__n: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, status__n: Option<&str>, mac_address__n: Option<&str>, mac_address__ic: Option<&str>, mac_address__nic: Option<&str>, mac_address__iew: Option<&str>, mac_address__niew: Option<&str>, mac_address__isw: Option<&str>, mac_address__nisw: Option<&str>, mac_address__ie: Option<&str>, mac_address__nie: Option<&str>, serial__n: Option<&str>, serial__ic: Option<&str>, serial__nic: Option<&str>, serial__iew: Option<&str>, serial__niew: Option<&str>, serial__isw: Option<&str>, serial__nisw: Option<&str>, serial__ie: Option<&str>, serial__nie: Option<&str>, serial__empty: Option<&str>, virtual_chassis_id__n: Option<&str>, primary_ip4_id__n: Option<&str>, primary_ip6_id__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimDevicesList200Response, Error<DcimDevicesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/devices/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = face {
        local_var_req_builder = local_var_req_builder.query(&[("face", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = position {
        local_var_req_builder = local_var_req_builder.query(&[("position", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = airflow {
        local_var_req_builder = local_var_req_builder.query(&[("airflow", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vc_position {
        local_var_req_builder = local_var_req_builder.query(&[("vc_position", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vc_priority {
        local_var_req_builder = local_var_req_builder.query(&[("vc_priority", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant {
        local_var_req_builder = local_var_req_builder.query(&[("tenant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact {
        local_var_req_builder = local_var_req_builder.query(&[("contact", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_role {
        local_var_req_builder = local_var_req_builder.query(&[("contact_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_group {
        local_var_req_builder = local_var_req_builder.query(&[("contact_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = local_context_data {
        local_var_req_builder = local_var_req_builder.query(&[("local_context_data", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer_id {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_type {
        local_var_req_builder = local_var_req_builder.query(&[("device_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_type_id {
        local_var_req_builder = local_var_req_builder.query(&[("device_type_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role_id {
        local_var_req_builder = local_var_req_builder.query(&[("role_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role {
        local_var_req_builder = local_var_req_builder.query(&[("role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_device_id {
        local_var_req_builder = local_var_req_builder.query(&[("parent_device_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platform_id {
        local_var_req_builder = local_var_req_builder.query(&[("platform_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platform {
        local_var_req_builder = local_var_req_builder.query(&[("platform", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder = local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id {
        local_var_req_builder = local_var_req_builder.query(&[("location_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_id {
        local_var_req_builder = local_var_req_builder.query(&[("cluster_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model {
        local_var_req_builder = local_var_req_builder.query(&[("model", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder = local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = is_full_depth {
        local_var_req_builder = local_var_req_builder.query(&[("is_full_depth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial {
        local_var_req_builder = local_var_req_builder.query(&[("serial", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = has_primary_ip {
        local_var_req_builder = local_var_req_builder.query(&[("has_primary_ip", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_member {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_member", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = console_ports {
        local_var_req_builder = local_var_req_builder.query(&[("console_ports", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = console_server_ports {
        local_var_req_builder = local_var_req_builder.query(&[("console_server_ports", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = power_ports {
        local_var_req_builder = local_var_req_builder.query(&[("power_ports", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = power_outlets {
        local_var_req_builder = local_var_req_builder.query(&[("power_outlets", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = interfaces {
        local_var_req_builder = local_var_req_builder.query(&[("interfaces", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pass_through_ports {
        local_var_req_builder = local_var_req_builder.query(&[("pass_through_ports", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_bays {
        local_var_req_builder = local_var_req_builder.query(&[("module_bays", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_bays {
        local_var_req_builder = local_var_req_builder.query(&[("device_bays", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = primary_ip4_id {
        local_var_req_builder = local_var_req_builder.query(&[("primary_ip4_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = primary_ip6_id {
        local_var_req_builder = local_var_req_builder.query(&[("primary_ip6_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__ic {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__nic {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__iew {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__niew {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__isw {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__ie {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__nie {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__empty {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = face__n {
        local_var_req_builder = local_var_req_builder.query(&[("face__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = position__n {
        local_var_req_builder = local_var_req_builder.query(&[("position__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = position__lte {
        local_var_req_builder = local_var_req_builder.query(&[("position__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = position__lt {
        local_var_req_builder = local_var_req_builder.query(&[("position__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = position__gte {
        local_var_req_builder = local_var_req_builder.query(&[("position__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = position__gt {
        local_var_req_builder = local_var_req_builder.query(&[("position__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = airflow__n {
        local_var_req_builder = local_var_req_builder.query(&[("airflow__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vc_position__n {
        local_var_req_builder = local_var_req_builder.query(&[("vc_position__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vc_position__lte {
        local_var_req_builder = local_var_req_builder.query(&[("vc_position__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vc_position__lt {
        local_var_req_builder = local_var_req_builder.query(&[("vc_position__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vc_position__gte {
        local_var_req_builder = local_var_req_builder.query(&[("vc_position__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vc_position__gt {
        local_var_req_builder = local_var_req_builder.query(&[("vc_position__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vc_priority__n {
        local_var_req_builder = local_var_req_builder.query(&[("vc_priority__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vc_priority__lte {
        local_var_req_builder = local_var_req_builder.query(&[("vc_priority__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vc_priority__lt {
        local_var_req_builder = local_var_req_builder.query(&[("vc_priority__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vc_priority__gte {
        local_var_req_builder = local_var_req_builder.query(&[("vc_priority__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vc_priority__gt {
        local_var_req_builder = local_var_req_builder.query(&[("vc_priority__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_role__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer__n {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_type__n {
        local_var_req_builder = local_var_req_builder.query(&[("device_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_type_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("device_type_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("role_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role__n {
        local_var_req_builder = local_var_req_builder.query(&[("role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_device_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("parent_device_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platform_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("platform_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = platform__n {
        local_var_req_builder = local_var_req_builder.query(&[("platform__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder = local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("location_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cluster_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("cluster_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__n {
        local_var_req_builder = local_var_req_builder.query(&[("model__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status__n {
        local_var_req_builder = local_var_req_builder.query(&[("status__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__n {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__ic {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__nic {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__iew {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__niew {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__isw {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__ie {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__nie {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__n {
        local_var_req_builder = local_var_req_builder.query(&[("serial__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__ic {
        local_var_req_builder = local_var_req_builder.query(&[("serial__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__nic {
        local_var_req_builder = local_var_req_builder.query(&[("serial__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__iew {
        local_var_req_builder = local_var_req_builder.query(&[("serial__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__niew {
        local_var_req_builder = local_var_req_builder.query(&[("serial__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__isw {
        local_var_req_builder = local_var_req_builder.query(&[("serial__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("serial__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__ie {
        local_var_req_builder = local_var_req_builder.query(&[("serial__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__nie {
        local_var_req_builder = local_var_req_builder.query(&[("serial__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__empty {
        local_var_req_builder = local_var_req_builder.query(&[("serial__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = primary_ip4_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("primary_ip4_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = primary_ip6_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("primary_ip6_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDevicesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Execute a NAPALM method on a Device
pub async fn dcim_devices_napalm(configuration: &configuration::Configuration, id: i32, method: &str) -> Result<crate::models::DeviceNapalm, Error<DcimDevicesNapalmError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/devices/{id}/napalm/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    local_var_req_builder = local_var_req_builder.query(&[("method", &method.to_string())]);
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDevicesNapalmError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_devices_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableDeviceWithConfigContext) -> Result<crate::models::DeviceWithConfigContext, Error<DcimDevicesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/devices/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDevicesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_devices_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::DeviceWithConfigContext, Error<DcimDevicesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/devices/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDevicesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_devices_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableDeviceWithConfigContext) -> Result<crate::models::DeviceWithConfigContext, Error<DcimDevicesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/devices/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimDevicesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_front_port_templates_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimFrontPortTemplatesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimFrontPortTemplatesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_front_port_templates_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableFrontPortTemplate) -> Result<crate::models::FrontPortTemplate, Error<DcimFrontPortTemplatesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimFrontPortTemplatesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_front_port_templates_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableFrontPortTemplate) -> Result<crate::models::FrontPortTemplate, Error<DcimFrontPortTemplatesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimFrontPortTemplatesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_front_port_templates_create(configuration: &configuration::Configuration, data: crate::models::WritableFrontPortTemplate) -> Result<crate::models::FrontPortTemplate, Error<DcimFrontPortTemplatesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimFrontPortTemplatesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_front_port_templates_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimFrontPortTemplatesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimFrontPortTemplatesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_front_port_templates_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, r#type: Option<&str>, color: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, devicetype_id: Option<&str>, moduletype_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, type__n: Option<&str>, color__n: Option<&str>, color__ic: Option<&str>, color__nic: Option<&str>, color__iew: Option<&str>, color__niew: Option<&str>, color__isw: Option<&str>, color__nisw: Option<&str>, color__ie: Option<&str>, color__nie: Option<&str>, color__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, devicetype_id__n: Option<&str>, moduletype_id__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimFrontPortTemplatesList200Response, Error<DcimFrontPortTemplatesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color {
        local_var_req_builder = local_var_req_builder.query(&[("color", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = moduletype_id {
        local_var_req_builder = local_var_req_builder.query(&[("moduletype_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder = local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__n {
        local_var_req_builder = local_var_req_builder.query(&[("color__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__ic {
        local_var_req_builder = local_var_req_builder.query(&[("color__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nic {
        local_var_req_builder = local_var_req_builder.query(&[("color__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__iew {
        local_var_req_builder = local_var_req_builder.query(&[("color__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__niew {
        local_var_req_builder = local_var_req_builder.query(&[("color__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__isw {
        local_var_req_builder = local_var_req_builder.query(&[("color__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("color__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__ie {
        local_var_req_builder = local_var_req_builder.query(&[("color__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nie {
        local_var_req_builder = local_var_req_builder.query(&[("color__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__empty {
        local_var_req_builder = local_var_req_builder.query(&[("color__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = moduletype_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("moduletype_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimFrontPortTemplatesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_front_port_templates_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableFrontPortTemplate) -> Result<crate::models::FrontPortTemplate, Error<DcimFrontPortTemplatesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimFrontPortTemplatesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_front_port_templates_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::FrontPortTemplate, Error<DcimFrontPortTemplatesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimFrontPortTemplatesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_front_port_templates_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableFrontPortTemplate) -> Result<crate::models::FrontPortTemplate, Error<DcimFrontPortTemplatesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimFrontPortTemplatesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_front_ports_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimFrontPortsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimFrontPortsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_front_ports_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableFrontPort) -> Result<crate::models::FrontPort, Error<DcimFrontPortsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimFrontPortsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_front_ports_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableFrontPort) -> Result<crate::models::FrontPort, Error<DcimFrontPortsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimFrontPortsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_front_ports_create(configuration: &configuration::Configuration, data: crate::models::WritableFrontPort) -> Result<crate::models::FrontPort, Error<DcimFrontPortsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimFrontPortsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_front_ports_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimFrontPortsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimFrontPortsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_front_ports_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, label: Option<&str>, r#type: Option<&str>, color: Option<&str>, description: Option<&str>, cable_end: Option<&str>, q: Option<&str>, region_id: Option<&str>, region: Option<&str>, site_group_id: Option<&str>, site_group: Option<&str>, site_id: Option<&str>, site: Option<&str>, location_id: Option<&str>, location: Option<&str>, rack_id: Option<&str>, rack: Option<&str>, device_id: Option<&str>, device: Option<&str>, virtual_chassis_id: Option<&str>, virtual_chassis: Option<&str>, module_id: Option<&str>, created: Option<&str>, last_updated: Option<&str>, tag: Option<&str>, cabled: Option<&str>, occupied: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, label__n: Option<&str>, label__ic: Option<&str>, label__nic: Option<&str>, label__iew: Option<&str>, label__niew: Option<&str>, label__isw: Option<&str>, label__nisw: Option<&str>, label__ie: Option<&str>, label__nie: Option<&str>, label__empty: Option<&str>, type__n: Option<&str>, color__n: Option<&str>, color__ic: Option<&str>, color__nic: Option<&str>, color__iew: Option<&str>, color__niew: Option<&str>, color__isw: Option<&str>, color__nisw: Option<&str>, color__ie: Option<&str>, color__nie: Option<&str>, color__empty: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, cable_end__n: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, site_group_id__n: Option<&str>, site_group__n: Option<&str>, site_id__n: Option<&str>, site__n: Option<&str>, location_id__n: Option<&str>, location__n: Option<&str>, rack_id__n: Option<&str>, rack__n: Option<&str>, device_id__n: Option<&str>, device__n: Option<&str>, virtual_chassis_id__n: Option<&str>, virtual_chassis__n: Option<&str>, module_id__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimFrontPortsList200Response, Error<DcimFrontPortsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label {
        local_var_req_builder = local_var_req_builder.query(&[("label", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color {
        local_var_req_builder = local_var_req_builder.query(&[("color", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable_end {
        local_var_req_builder = local_var_req_builder.query(&[("cable_end", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder = local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id {
        local_var_req_builder = local_var_req_builder.query(&[("location_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location {
        local_var_req_builder = local_var_req_builder.query(&[("location", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack {
        local_var_req_builder = local_var_req_builder.query(&[("rack", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("device_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device {
        local_var_req_builder = local_var_req_builder.query(&[("device", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_id {
        local_var_req_builder = local_var_req_builder.query(&[("module_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cabled {
        local_var_req_builder = local_var_req_builder.query(&[("cabled", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = occupied {
        local_var_req_builder = local_var_req_builder.query(&[("occupied", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__n {
        local_var_req_builder = local_var_req_builder.query(&[("label__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ic {
        local_var_req_builder = local_var_req_builder.query(&[("label__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nic {
        local_var_req_builder = local_var_req_builder.query(&[("label__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__iew {
        local_var_req_builder = local_var_req_builder.query(&[("label__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__niew {
        local_var_req_builder = local_var_req_builder.query(&[("label__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__isw {
        local_var_req_builder = local_var_req_builder.query(&[("label__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("label__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ie {
        local_var_req_builder = local_var_req_builder.query(&[("label__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nie {
        local_var_req_builder = local_var_req_builder.query(&[("label__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__empty {
        local_var_req_builder = local_var_req_builder.query(&[("label__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder = local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__n {
        local_var_req_builder = local_var_req_builder.query(&[("color__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__ic {
        local_var_req_builder = local_var_req_builder.query(&[("color__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nic {
        local_var_req_builder = local_var_req_builder.query(&[("color__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__iew {
        local_var_req_builder = local_var_req_builder.query(&[("color__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__niew {
        local_var_req_builder = local_var_req_builder.query(&[("color__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__isw {
        local_var_req_builder = local_var_req_builder.query(&[("color__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("color__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__ie {
        local_var_req_builder = local_var_req_builder.query(&[("color__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nie {
        local_var_req_builder = local_var_req_builder.query(&[("color__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__empty {
        local_var_req_builder = local_var_req_builder.query(&[("color__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable_end__n {
        local_var_req_builder = local_var_req_builder.query(&[("cable_end__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder = local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("location_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location__n {
        local_var_req_builder = local_var_req_builder.query(&[("location__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("device_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device__n {
        local_var_req_builder = local_var_req_builder.query(&[("device__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("module_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimFrontPortsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_front_ports_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableFrontPort) -> Result<crate::models::FrontPort, Error<DcimFrontPortsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimFrontPortsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Return all CablePaths which traverse a given pass-through port.
pub async fn dcim_front_ports_paths(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::FrontPort, Error<DcimFrontPortsPathsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-ports/{id}/paths/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimFrontPortsPathsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_front_ports_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::FrontPort, Error<DcimFrontPortsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimFrontPortsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_front_ports_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableFrontPort) -> Result<crate::models::FrontPort, Error<DcimFrontPortsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/front-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimFrontPortsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_interface_templates_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimInterfaceTemplatesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interface-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimInterfaceTemplatesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_interface_templates_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableInterfaceTemplate) -> Result<crate::models::InterfaceTemplate, Error<DcimInterfaceTemplatesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interface-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInterfaceTemplatesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_interface_templates_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableInterfaceTemplate) -> Result<crate::models::InterfaceTemplate, Error<DcimInterfaceTemplatesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interface-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInterfaceTemplatesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_interface_templates_create(configuration: &configuration::Configuration, data: crate::models::WritableInterfaceTemplate) -> Result<crate::models::InterfaceTemplate, Error<DcimInterfaceTemplatesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interface-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInterfaceTemplatesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_interface_templates_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimInterfaceTemplatesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interface-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimInterfaceTemplatesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_interface_templates_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, r#type: Option<&str>, mgmt_only: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, devicetype_id: Option<&str>, moduletype_id: Option<&str>, poe_mode: Option<&str>, poe_type: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, type__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, devicetype_id__n: Option<&str>, moduletype_id__n: Option<&str>, poe_mode__n: Option<&str>, poe_type__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimInterfaceTemplatesList200Response, Error<DcimInterfaceTemplatesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interface-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mgmt_only {
        local_var_req_builder = local_var_req_builder.query(&[("mgmt_only", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = moduletype_id {
        local_var_req_builder = local_var_req_builder.query(&[("moduletype_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = poe_mode {
        local_var_req_builder = local_var_req_builder.query(&[("poe_mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = poe_type {
        local_var_req_builder = local_var_req_builder.query(&[("poe_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder = local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = moduletype_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("moduletype_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = poe_mode__n {
        local_var_req_builder = local_var_req_builder.query(&[("poe_mode__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = poe_type__n {
        local_var_req_builder = local_var_req_builder.query(&[("poe_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInterfaceTemplatesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_interface_templates_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableInterfaceTemplate) -> Result<crate::models::InterfaceTemplate, Error<DcimInterfaceTemplatesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interface-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInterfaceTemplatesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_interface_templates_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::InterfaceTemplate, Error<DcimInterfaceTemplatesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interface-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInterfaceTemplatesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_interface_templates_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableInterfaceTemplate) -> Result<crate::models::InterfaceTemplate, Error<DcimInterfaceTemplatesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interface-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInterfaceTemplatesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_interfaces_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimInterfacesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interfaces/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimInterfacesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_interfaces_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableInterface) -> Result<crate::models::Interface, Error<DcimInterfacesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interfaces/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInterfacesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_interfaces_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableInterface) -> Result<crate::models::Interface, Error<DcimInterfacesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interfaces/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInterfacesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_interfaces_create(configuration: &configuration::Configuration, data: crate::models::WritableInterface) -> Result<crate::models::Interface, Error<DcimInterfacesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interfaces/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInterfacesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_interfaces_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimInterfacesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interfaces/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimInterfacesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_interfaces_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, label: Option<&str>, r#type: Option<&str>, enabled: Option<&str>, mtu: Option<&str>, mgmt_only: Option<&str>, poe_mode: Option<&str>, poe_type: Option<&str>, mode: Option<&str>, rf_role: Option<&str>, rf_channel: Option<&str>, rf_channel_frequency: Option<&str>, rf_channel_width: Option<&str>, tx_power: Option<&str>, description: Option<&str>, cable_end: Option<&str>, q: Option<&str>, region_id: Option<&str>, region: Option<&str>, site_group_id: Option<&str>, site_group: Option<&str>, site_id: Option<&str>, site: Option<&str>, location_id: Option<&str>, location: Option<&str>, rack_id: Option<&str>, rack: Option<&str>, device_id: Option<&str>, device: Option<&str>, virtual_chassis_id: Option<&str>, virtual_chassis: Option<&str>, module_id: Option<&str>, created: Option<&str>, last_updated: Option<&str>, tag: Option<&str>, cabled: Option<&str>, occupied: Option<&str>, connected: Option<&str>, kind: Option<&str>, parent_id: Option<&str>, bridge_id: Option<&str>, lag_id: Option<&str>, speed: Option<&str>, duplex: Option<&str>, mac_address: Option<&str>, wwn: Option<&str>, vlan_id: Option<&str>, vlan: Option<&str>, vrf_id: Option<&str>, vrf: Option<&str>, vdc_id: Option<&str>, vdc_identifier: Option<&str>, vdc: Option<&str>, l2vpn_id: Option<&str>, l2vpn: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, label__n: Option<&str>, label__ic: Option<&str>, label__nic: Option<&str>, label__iew: Option<&str>, label__niew: Option<&str>, label__isw: Option<&str>, label__nisw: Option<&str>, label__ie: Option<&str>, label__nie: Option<&str>, label__empty: Option<&str>, type__n: Option<&str>, mtu__n: Option<&str>, mtu__lte: Option<&str>, mtu__lt: Option<&str>, mtu__gte: Option<&str>, mtu__gt: Option<&str>, poe_mode__n: Option<&str>, poe_type__n: Option<&str>, mode__n: Option<&str>, rf_role__n: Option<&str>, rf_channel__n: Option<&str>, rf_channel_frequency__n: Option<&str>, rf_channel_frequency__lte: Option<&str>, rf_channel_frequency__lt: Option<&str>, rf_channel_frequency__gte: Option<&str>, rf_channel_frequency__gt: Option<&str>, rf_channel_width__n: Option<&str>, rf_channel_width__lte: Option<&str>, rf_channel_width__lt: Option<&str>, rf_channel_width__gte: Option<&str>, rf_channel_width__gt: Option<&str>, tx_power__n: Option<&str>, tx_power__lte: Option<&str>, tx_power__lt: Option<&str>, tx_power__gte: Option<&str>, tx_power__gt: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, cable_end__n: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, site_group_id__n: Option<&str>, site_group__n: Option<&str>, site_id__n: Option<&str>, site__n: Option<&str>, location_id__n: Option<&str>, location__n: Option<&str>, rack_id__n: Option<&str>, rack__n: Option<&str>, virtual_chassis_id__n: Option<&str>, virtual_chassis__n: Option<&str>, module_id__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, parent_id__n: Option<&str>, bridge_id__n: Option<&str>, lag_id__n: Option<&str>, speed__n: Option<&str>, speed__lte: Option<&str>, speed__lt: Option<&str>, speed__gte: Option<&str>, speed__gt: Option<&str>, duplex__n: Option<&str>, mac_address__n: Option<&str>, mac_address__ic: Option<&str>, mac_address__nic: Option<&str>, mac_address__iew: Option<&str>, mac_address__niew: Option<&str>, mac_address__isw: Option<&str>, mac_address__nisw: Option<&str>, mac_address__ie: Option<&str>, mac_address__nie: Option<&str>, wwn__n: Option<&str>, wwn__ic: Option<&str>, wwn__nic: Option<&str>, wwn__iew: Option<&str>, wwn__niew: Option<&str>, wwn__isw: Option<&str>, wwn__nisw: Option<&str>, wwn__ie: Option<&str>, wwn__nie: Option<&str>, vrf_id__n: Option<&str>, vrf__n: Option<&str>, vdc_id__n: Option<&str>, vdc_identifier__n: Option<&str>, vdc__n: Option<&str>, l2vpn_id__n: Option<&str>, l2vpn__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimInterfacesList200Response, Error<DcimInterfacesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interfaces/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label {
        local_var_req_builder = local_var_req_builder.query(&[("label", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = enabled {
        local_var_req_builder = local_var_req_builder.query(&[("enabled", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mtu {
        local_var_req_builder = local_var_req_builder.query(&[("mtu", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mgmt_only {
        local_var_req_builder = local_var_req_builder.query(&[("mgmt_only", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = poe_mode {
        local_var_req_builder = local_var_req_builder.query(&[("poe_mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = poe_type {
        local_var_req_builder = local_var_req_builder.query(&[("poe_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mode {
        local_var_req_builder = local_var_req_builder.query(&[("mode", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rf_role {
        local_var_req_builder = local_var_req_builder.query(&[("rf_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rf_channel {
        local_var_req_builder = local_var_req_builder.query(&[("rf_channel", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rf_channel_frequency {
        local_var_req_builder = local_var_req_builder.query(&[("rf_channel_frequency", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rf_channel_width {
        local_var_req_builder = local_var_req_builder.query(&[("rf_channel_width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tx_power {
        local_var_req_builder = local_var_req_builder.query(&[("tx_power", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable_end {
        local_var_req_builder = local_var_req_builder.query(&[("cable_end", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder = local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id {
        local_var_req_builder = local_var_req_builder.query(&[("location_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location {
        local_var_req_builder = local_var_req_builder.query(&[("location", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack {
        local_var_req_builder = local_var_req_builder.query(&[("rack", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("device_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device {
        local_var_req_builder = local_var_req_builder.query(&[("device", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_id {
        local_var_req_builder = local_var_req_builder.query(&[("module_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cabled {
        local_var_req_builder = local_var_req_builder.query(&[("cabled", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = occupied {
        local_var_req_builder = local_var_req_builder.query(&[("occupied", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = connected {
        local_var_req_builder = local_var_req_builder.query(&[("connected", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = kind {
        local_var_req_builder = local_var_req_builder.query(&[("kind", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id {
        local_var_req_builder = local_var_req_builder.query(&[("parent_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = bridge_id {
        local_var_req_builder = local_var_req_builder.query(&[("bridge_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lag_id {
        local_var_req_builder = local_var_req_builder.query(&[("lag_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = speed {
        local_var_req_builder = local_var_req_builder.query(&[("speed", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = duplex {
        local_var_req_builder = local_var_req_builder.query(&[("duplex", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wwn {
        local_var_req_builder = local_var_req_builder.query(&[("wwn", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vlan_id {
        local_var_req_builder = local_var_req_builder.query(&[("vlan_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vlan {
        local_var_req_builder = local_var_req_builder.query(&[("vlan", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vrf_id {
        local_var_req_builder = local_var_req_builder.query(&[("vrf_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vrf {
        local_var_req_builder = local_var_req_builder.query(&[("vrf", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vdc_id {
        local_var_req_builder = local_var_req_builder.query(&[("vdc_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vdc_identifier {
        local_var_req_builder = local_var_req_builder.query(&[("vdc_identifier", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vdc {
        local_var_req_builder = local_var_req_builder.query(&[("vdc", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = l2vpn_id {
        local_var_req_builder = local_var_req_builder.query(&[("l2vpn_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = l2vpn {
        local_var_req_builder = local_var_req_builder.query(&[("l2vpn", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__n {
        local_var_req_builder = local_var_req_builder.query(&[("label__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ic {
        local_var_req_builder = local_var_req_builder.query(&[("label__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nic {
        local_var_req_builder = local_var_req_builder.query(&[("label__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__iew {
        local_var_req_builder = local_var_req_builder.query(&[("label__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__niew {
        local_var_req_builder = local_var_req_builder.query(&[("label__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__isw {
        local_var_req_builder = local_var_req_builder.query(&[("label__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("label__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ie {
        local_var_req_builder = local_var_req_builder.query(&[("label__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nie {
        local_var_req_builder = local_var_req_builder.query(&[("label__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__empty {
        local_var_req_builder = local_var_req_builder.query(&[("label__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder = local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mtu__n {
        local_var_req_builder = local_var_req_builder.query(&[("mtu__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mtu__lte {
        local_var_req_builder = local_var_req_builder.query(&[("mtu__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mtu__lt {
        local_var_req_builder = local_var_req_builder.query(&[("mtu__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mtu__gte {
        local_var_req_builder = local_var_req_builder.query(&[("mtu__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mtu__gt {
        local_var_req_builder = local_var_req_builder.query(&[("mtu__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = poe_mode__n {
        local_var_req_builder = local_var_req_builder.query(&[("poe_mode__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = poe_type__n {
        local_var_req_builder = local_var_req_builder.query(&[("poe_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mode__n {
        local_var_req_builder = local_var_req_builder.query(&[("mode__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rf_role__n {
        local_var_req_builder = local_var_req_builder.query(&[("rf_role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rf_channel__n {
        local_var_req_builder = local_var_req_builder.query(&[("rf_channel__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rf_channel_frequency__n {
        local_var_req_builder = local_var_req_builder.query(&[("rf_channel_frequency__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rf_channel_frequency__lte {
        local_var_req_builder = local_var_req_builder.query(&[("rf_channel_frequency__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rf_channel_frequency__lt {
        local_var_req_builder = local_var_req_builder.query(&[("rf_channel_frequency__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rf_channel_frequency__gte {
        local_var_req_builder = local_var_req_builder.query(&[("rf_channel_frequency__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rf_channel_frequency__gt {
        local_var_req_builder = local_var_req_builder.query(&[("rf_channel_frequency__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rf_channel_width__n {
        local_var_req_builder = local_var_req_builder.query(&[("rf_channel_width__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rf_channel_width__lte {
        local_var_req_builder = local_var_req_builder.query(&[("rf_channel_width__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rf_channel_width__lt {
        local_var_req_builder = local_var_req_builder.query(&[("rf_channel_width__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rf_channel_width__gte {
        local_var_req_builder = local_var_req_builder.query(&[("rf_channel_width__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rf_channel_width__gt {
        local_var_req_builder = local_var_req_builder.query(&[("rf_channel_width__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tx_power__n {
        local_var_req_builder = local_var_req_builder.query(&[("tx_power__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tx_power__lte {
        local_var_req_builder = local_var_req_builder.query(&[("tx_power__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tx_power__lt {
        local_var_req_builder = local_var_req_builder.query(&[("tx_power__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tx_power__gte {
        local_var_req_builder = local_var_req_builder.query(&[("tx_power__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tx_power__gt {
        local_var_req_builder = local_var_req_builder.query(&[("tx_power__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable_end__n {
        local_var_req_builder = local_var_req_builder.query(&[("cable_end__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder = local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("location_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location__n {
        local_var_req_builder = local_var_req_builder.query(&[("location__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("module_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("parent_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = bridge_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("bridge_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = lag_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("lag_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = speed__n {
        local_var_req_builder = local_var_req_builder.query(&[("speed__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = speed__lte {
        local_var_req_builder = local_var_req_builder.query(&[("speed__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = speed__lt {
        local_var_req_builder = local_var_req_builder.query(&[("speed__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = speed__gte {
        local_var_req_builder = local_var_req_builder.query(&[("speed__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = speed__gt {
        local_var_req_builder = local_var_req_builder.query(&[("speed__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = duplex__n {
        local_var_req_builder = local_var_req_builder.query(&[("duplex__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__n {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__ic {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__nic {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__iew {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__niew {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__isw {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__ie {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mac_address__nie {
        local_var_req_builder = local_var_req_builder.query(&[("mac_address__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wwn__n {
        local_var_req_builder = local_var_req_builder.query(&[("wwn__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wwn__ic {
        local_var_req_builder = local_var_req_builder.query(&[("wwn__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wwn__nic {
        local_var_req_builder = local_var_req_builder.query(&[("wwn__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wwn__iew {
        local_var_req_builder = local_var_req_builder.query(&[("wwn__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wwn__niew {
        local_var_req_builder = local_var_req_builder.query(&[("wwn__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wwn__isw {
        local_var_req_builder = local_var_req_builder.query(&[("wwn__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wwn__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("wwn__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wwn__ie {
        local_var_req_builder = local_var_req_builder.query(&[("wwn__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = wwn__nie {
        local_var_req_builder = local_var_req_builder.query(&[("wwn__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vrf_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("vrf_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vrf__n {
        local_var_req_builder = local_var_req_builder.query(&[("vrf__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vdc_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("vdc_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vdc_identifier__n {
        local_var_req_builder = local_var_req_builder.query(&[("vdc_identifier__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = vdc__n {
        local_var_req_builder = local_var_req_builder.query(&[("vdc__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = l2vpn_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("l2vpn_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = l2vpn__n {
        local_var_req_builder = local_var_req_builder.query(&[("l2vpn__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInterfacesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_interfaces_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableInterface) -> Result<crate::models::Interface, Error<DcimInterfacesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interfaces/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInterfacesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_interfaces_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::Interface, Error<DcimInterfacesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interfaces/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInterfacesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
pub async fn dcim_interfaces_trace(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::Interface, Error<DcimInterfacesTraceError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interfaces/{id}/trace/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInterfacesTraceError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_interfaces_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableInterface) -> Result<crate::models::Interface, Error<DcimInterfacesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/interfaces/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInterfacesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_item_roles_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimInventoryItemRolesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-item-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimInventoryItemRolesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_item_roles_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::InventoryItemRole) -> Result<crate::models::InventoryItemRole, Error<DcimInventoryItemRolesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-item-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemRolesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_item_roles_bulk_update(configuration: &configuration::Configuration, data: crate::models::InventoryItemRole) -> Result<crate::models::InventoryItemRole, Error<DcimInventoryItemRolesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-item-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemRolesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_item_roles_create(configuration: &configuration::Configuration, data: crate::models::InventoryItemRole) -> Result<crate::models::InventoryItemRole, Error<DcimInventoryItemRolesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-item-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemRolesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_item_roles_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimInventoryItemRolesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-item-roles/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimInventoryItemRolesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_item_roles_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, slug: Option<&str>, color: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, slug__n: Option<&str>, slug__ic: Option<&str>, slug__nic: Option<&str>, slug__iew: Option<&str>, slug__niew: Option<&str>, slug__isw: Option<&str>, slug__nisw: Option<&str>, slug__ie: Option<&str>, slug__nie: Option<&str>, slug__empty: Option<&str>, color__n: Option<&str>, color__ic: Option<&str>, color__nic: Option<&str>, color__iew: Option<&str>, color__niew: Option<&str>, color__isw: Option<&str>, color__nisw: Option<&str>, color__ie: Option<&str>, color__nie: Option<&str>, color__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimInventoryItemRolesList200Response, Error<DcimInventoryItemRolesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-item-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder = local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color {
        local_var_req_builder = local_var_req_builder.query(&[("color", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder = local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__empty {
        local_var_req_builder = local_var_req_builder.query(&[("slug__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__n {
        local_var_req_builder = local_var_req_builder.query(&[("color__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__ic {
        local_var_req_builder = local_var_req_builder.query(&[("color__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nic {
        local_var_req_builder = local_var_req_builder.query(&[("color__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__iew {
        local_var_req_builder = local_var_req_builder.query(&[("color__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__niew {
        local_var_req_builder = local_var_req_builder.query(&[("color__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__isw {
        local_var_req_builder = local_var_req_builder.query(&[("color__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("color__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__ie {
        local_var_req_builder = local_var_req_builder.query(&[("color__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nie {
        local_var_req_builder = local_var_req_builder.query(&[("color__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__empty {
        local_var_req_builder = local_var_req_builder.query(&[("color__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemRolesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_item_roles_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::InventoryItemRole) -> Result<crate::models::InventoryItemRole, Error<DcimInventoryItemRolesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-item-roles/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemRolesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_item_roles_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::InventoryItemRole, Error<DcimInventoryItemRolesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-item-roles/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemRolesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_item_roles_update(configuration: &configuration::Configuration, id: i32, data: crate::models::InventoryItemRole) -> Result<crate::models::InventoryItemRole, Error<DcimInventoryItemRolesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-item-roles/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemRolesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_item_templates_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimInventoryItemTemplatesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-item-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimInventoryItemTemplatesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_item_templates_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableInventoryItemTemplate) -> Result<crate::models::InventoryItemTemplate, Error<DcimInventoryItemTemplatesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-item-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemTemplatesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_item_templates_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableInventoryItemTemplate) -> Result<crate::models::InventoryItemTemplate, Error<DcimInventoryItemTemplatesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-item-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemTemplatesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_item_templates_create(configuration: &configuration::Configuration, data: crate::models::WritableInventoryItemTemplate) -> Result<crate::models::InventoryItemTemplate, Error<DcimInventoryItemTemplatesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-item-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemTemplatesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_item_templates_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimInventoryItemTemplatesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-item-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimInventoryItemTemplatesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_item_templates_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, label: Option<&str>, part_id: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, devicetype_id: Option<&str>, parent_id: Option<&str>, manufacturer_id: Option<&str>, manufacturer: Option<&str>, role_id: Option<&str>, role: Option<&str>, component_type: Option<&str>, component_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, label__n: Option<&str>, label__ic: Option<&str>, label__nic: Option<&str>, label__iew: Option<&str>, label__niew: Option<&str>, label__isw: Option<&str>, label__nisw: Option<&str>, label__ie: Option<&str>, label__nie: Option<&str>, label__empty: Option<&str>, part_id__n: Option<&str>, part_id__ic: Option<&str>, part_id__nic: Option<&str>, part_id__iew: Option<&str>, part_id__niew: Option<&str>, part_id__isw: Option<&str>, part_id__nisw: Option<&str>, part_id__ie: Option<&str>, part_id__nie: Option<&str>, part_id__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, devicetype_id__n: Option<&str>, parent_id__n: Option<&str>, manufacturer_id__n: Option<&str>, manufacturer__n: Option<&str>, role_id__n: Option<&str>, role__n: Option<&str>, component_type__n: Option<&str>, component_id__n: Option<&str>, component_id__lte: Option<&str>, component_id__lt: Option<&str>, component_id__gte: Option<&str>, component_id__gt: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimInventoryItemTemplatesList200Response, Error<DcimInventoryItemTemplatesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-item-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label {
        local_var_req_builder = local_var_req_builder.query(&[("label", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id {
        local_var_req_builder = local_var_req_builder.query(&[("part_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id {
        local_var_req_builder = local_var_req_builder.query(&[("parent_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer_id {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role_id {
        local_var_req_builder = local_var_req_builder.query(&[("role_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role {
        local_var_req_builder = local_var_req_builder.query(&[("role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = component_type {
        local_var_req_builder = local_var_req_builder.query(&[("component_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = component_id {
        local_var_req_builder = local_var_req_builder.query(&[("component_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__n {
        local_var_req_builder = local_var_req_builder.query(&[("label__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ic {
        local_var_req_builder = local_var_req_builder.query(&[("label__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nic {
        local_var_req_builder = local_var_req_builder.query(&[("label__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__iew {
        local_var_req_builder = local_var_req_builder.query(&[("label__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__niew {
        local_var_req_builder = local_var_req_builder.query(&[("label__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__isw {
        local_var_req_builder = local_var_req_builder.query(&[("label__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("label__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ie {
        local_var_req_builder = local_var_req_builder.query(&[("label__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nie {
        local_var_req_builder = local_var_req_builder.query(&[("label__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__empty {
        local_var_req_builder = local_var_req_builder.query(&[("label__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__ic {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__nic {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__iew {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__niew {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__isw {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__ie {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__nie {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__empty {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("parent_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer__n {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("role_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role__n {
        local_var_req_builder = local_var_req_builder.query(&[("role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = component_type__n {
        local_var_req_builder = local_var_req_builder.query(&[("component_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = component_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("component_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = component_id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("component_id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = component_id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("component_id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = component_id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("component_id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = component_id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("component_id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemTemplatesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_item_templates_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableInventoryItemTemplate) -> Result<crate::models::InventoryItemTemplate, Error<DcimInventoryItemTemplatesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-item-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemTemplatesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_item_templates_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::InventoryItemTemplate, Error<DcimInventoryItemTemplatesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-item-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemTemplatesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_item_templates_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableInventoryItemTemplate) -> Result<crate::models::InventoryItemTemplate, Error<DcimInventoryItemTemplatesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-item-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemTemplatesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_items_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimInventoryItemsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-items/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimInventoryItemsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_items_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableInventoryItem) -> Result<crate::models::InventoryItem, Error<DcimInventoryItemsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-items/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_items_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableInventoryItem) -> Result<crate::models::InventoryItem, Error<DcimInventoryItemsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-items/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_items_create(configuration: &configuration::Configuration, data: crate::models::WritableInventoryItem) -> Result<crate::models::InventoryItem, Error<DcimInventoryItemsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-items/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_items_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimInventoryItemsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-items/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimInventoryItemsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_items_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, label: Option<&str>, part_id: Option<&str>, asset_tag: Option<&str>, discovered: Option<&str>, q: Option<&str>, region_id: Option<&str>, region: Option<&str>, site_group_id: Option<&str>, site_group: Option<&str>, site_id: Option<&str>, site: Option<&str>, location_id: Option<&str>, location: Option<&str>, rack_id: Option<&str>, rack: Option<&str>, device_id: Option<&str>, device: Option<&str>, virtual_chassis_id: Option<&str>, virtual_chassis: Option<&str>, created: Option<&str>, last_updated: Option<&str>, tag: Option<&str>, parent_id: Option<&str>, manufacturer_id: Option<&str>, manufacturer: Option<&str>, role_id: Option<&str>, role: Option<&str>, component_type: Option<&str>, component_id: Option<&str>, serial: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, label__n: Option<&str>, label__ic: Option<&str>, label__nic: Option<&str>, label__iew: Option<&str>, label__niew: Option<&str>, label__isw: Option<&str>, label__nisw: Option<&str>, label__ie: Option<&str>, label__nie: Option<&str>, label__empty: Option<&str>, part_id__n: Option<&str>, part_id__ic: Option<&str>, part_id__nic: Option<&str>, part_id__iew: Option<&str>, part_id__niew: Option<&str>, part_id__isw: Option<&str>, part_id__nisw: Option<&str>, part_id__ie: Option<&str>, part_id__nie: Option<&str>, part_id__empty: Option<&str>, asset_tag__n: Option<&str>, asset_tag__ic: Option<&str>, asset_tag__nic: Option<&str>, asset_tag__iew: Option<&str>, asset_tag__niew: Option<&str>, asset_tag__isw: Option<&str>, asset_tag__nisw: Option<&str>, asset_tag__ie: Option<&str>, asset_tag__nie: Option<&str>, asset_tag__empty: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, site_group_id__n: Option<&str>, site_group__n: Option<&str>, site_id__n: Option<&str>, site__n: Option<&str>, location_id__n: Option<&str>, location__n: Option<&str>, rack_id__n: Option<&str>, rack__n: Option<&str>, device_id__n: Option<&str>, device__n: Option<&str>, virtual_chassis_id__n: Option<&str>, virtual_chassis__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, parent_id__n: Option<&str>, manufacturer_id__n: Option<&str>, manufacturer__n: Option<&str>, role_id__n: Option<&str>, role__n: Option<&str>, component_type__n: Option<&str>, component_id__n: Option<&str>, component_id__lte: Option<&str>, component_id__lt: Option<&str>, component_id__gte: Option<&str>, component_id__gt: Option<&str>, serial__n: Option<&str>, serial__ic: Option<&str>, serial__nic: Option<&str>, serial__iew: Option<&str>, serial__niew: Option<&str>, serial__isw: Option<&str>, serial__nisw: Option<&str>, serial__ie: Option<&str>, serial__nie: Option<&str>, serial__empty: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimInventoryItemsList200Response, Error<DcimInventoryItemsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-items/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label {
        local_var_req_builder = local_var_req_builder.query(&[("label", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id {
        local_var_req_builder = local_var_req_builder.query(&[("part_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = discovered {
        local_var_req_builder = local_var_req_builder.query(&[("discovered", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder = local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id {
        local_var_req_builder = local_var_req_builder.query(&[("location_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location {
        local_var_req_builder = local_var_req_builder.query(&[("location", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack {
        local_var_req_builder = local_var_req_builder.query(&[("rack", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("device_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device {
        local_var_req_builder = local_var_req_builder.query(&[("device", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id {
        local_var_req_builder = local_var_req_builder.query(&[("parent_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer_id {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role_id {
        local_var_req_builder = local_var_req_builder.query(&[("role_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role {
        local_var_req_builder = local_var_req_builder.query(&[("role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = component_type {
        local_var_req_builder = local_var_req_builder.query(&[("component_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = component_id {
        local_var_req_builder = local_var_req_builder.query(&[("component_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial {
        local_var_req_builder = local_var_req_builder.query(&[("serial", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__n {
        local_var_req_builder = local_var_req_builder.query(&[("label__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ic {
        local_var_req_builder = local_var_req_builder.query(&[("label__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nic {
        local_var_req_builder = local_var_req_builder.query(&[("label__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__iew {
        local_var_req_builder = local_var_req_builder.query(&[("label__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__niew {
        local_var_req_builder = local_var_req_builder.query(&[("label__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__isw {
        local_var_req_builder = local_var_req_builder.query(&[("label__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("label__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ie {
        local_var_req_builder = local_var_req_builder.query(&[("label__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nie {
        local_var_req_builder = local_var_req_builder.query(&[("label__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__empty {
        local_var_req_builder = local_var_req_builder.query(&[("label__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__ic {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__nic {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__iew {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__niew {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__isw {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__ie {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__nie {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_id__empty {
        local_var_req_builder = local_var_req_builder.query(&[("part_id__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__ic {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__nic {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__iew {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__niew {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__isw {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__ie {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__nie {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__empty {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder = local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("location_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location__n {
        local_var_req_builder = local_var_req_builder.query(&[("location__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("device_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device__n {
        local_var_req_builder = local_var_req_builder.query(&[("device__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("parent_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer__n {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("role_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role__n {
        local_var_req_builder = local_var_req_builder.query(&[("role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = component_type__n {
        local_var_req_builder = local_var_req_builder.query(&[("component_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = component_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("component_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = component_id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("component_id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = component_id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("component_id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = component_id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("component_id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = component_id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("component_id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__n {
        local_var_req_builder = local_var_req_builder.query(&[("serial__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__ic {
        local_var_req_builder = local_var_req_builder.query(&[("serial__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__nic {
        local_var_req_builder = local_var_req_builder.query(&[("serial__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__iew {
        local_var_req_builder = local_var_req_builder.query(&[("serial__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__niew {
        local_var_req_builder = local_var_req_builder.query(&[("serial__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__isw {
        local_var_req_builder = local_var_req_builder.query(&[("serial__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("serial__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__ie {
        local_var_req_builder = local_var_req_builder.query(&[("serial__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__nie {
        local_var_req_builder = local_var_req_builder.query(&[("serial__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__empty {
        local_var_req_builder = local_var_req_builder.query(&[("serial__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_items_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableInventoryItem) -> Result<crate::models::InventoryItem, Error<DcimInventoryItemsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-items/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_items_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::InventoryItem, Error<DcimInventoryItemsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-items/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_inventory_items_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableInventoryItem) -> Result<crate::models::InventoryItem, Error<DcimInventoryItemsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/inventory-items/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimInventoryItemsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_locations_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimLocationsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/locations/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimLocationsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_locations_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableLocation) -> Result<crate::models::Location, Error<DcimLocationsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/locations/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimLocationsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_locations_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableLocation) -> Result<crate::models::Location, Error<DcimLocationsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/locations/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimLocationsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_locations_create(configuration: &configuration::Configuration, data: crate::models::WritableLocation) -> Result<crate::models::Location, Error<DcimLocationsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/locations/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimLocationsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_locations_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimLocationsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/locations/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimLocationsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_locations_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, slug: Option<&str>, status: Option<&str>, description: Option<&str>, tenant_group_id: Option<&str>, tenant_group: Option<&str>, tenant_id: Option<&str>, tenant: Option<&str>, contact: Option<&str>, contact_role: Option<&str>, contact_group: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, region_id: Option<&str>, region: Option<&str>, site_group_id: Option<&str>, site_group: Option<&str>, site_id: Option<&str>, site: Option<&str>, parent_id: Option<&str>, parent: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, slug__n: Option<&str>, slug__ic: Option<&str>, slug__nic: Option<&str>, slug__iew: Option<&str>, slug__niew: Option<&str>, slug__isw: Option<&str>, slug__nisw: Option<&str>, slug__ie: Option<&str>, slug__nie: Option<&str>, slug__empty: Option<&str>, status__n: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, tenant_group_id__n: Option<&str>, tenant_group__n: Option<&str>, tenant_id__n: Option<&str>, tenant__n: Option<&str>, contact__n: Option<&str>, contact_role__n: Option<&str>, contact_group__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, site_group_id__n: Option<&str>, site_group__n: Option<&str>, site_id__n: Option<&str>, site__n: Option<&str>, parent_id__n: Option<&str>, parent__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimLocationsList200Response, Error<DcimLocationsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/locations/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder = local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder = local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant {
        local_var_req_builder = local_var_req_builder.query(&[("tenant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact {
        local_var_req_builder = local_var_req_builder.query(&[("contact", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_role {
        local_var_req_builder = local_var_req_builder.query(&[("contact_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_group {
        local_var_req_builder = local_var_req_builder.query(&[("contact_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder = local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id {
        local_var_req_builder = local_var_req_builder.query(&[("parent_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent {
        local_var_req_builder = local_var_req_builder.query(&[("parent", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder = local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__empty {
        local_var_req_builder = local_var_req_builder.query(&[("slug__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status__n {
        local_var_req_builder = local_var_req_builder.query(&[("status__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_role__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder = local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("parent_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent__n {
        local_var_req_builder = local_var_req_builder.query(&[("parent__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimLocationsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_locations_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableLocation) -> Result<crate::models::Location, Error<DcimLocationsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/locations/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimLocationsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_locations_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::Location, Error<DcimLocationsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/locations/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimLocationsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_locations_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableLocation) -> Result<crate::models::Location, Error<DcimLocationsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/locations/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimLocationsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_manufacturers_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimManufacturersBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/manufacturers/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimManufacturersBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_manufacturers_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::Manufacturer) -> Result<crate::models::Manufacturer, Error<DcimManufacturersBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/manufacturers/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimManufacturersBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_manufacturers_bulk_update(configuration: &configuration::Configuration, data: crate::models::Manufacturer) -> Result<crate::models::Manufacturer, Error<DcimManufacturersBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/manufacturers/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimManufacturersBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_manufacturers_create(configuration: &configuration::Configuration, data: crate::models::Manufacturer) -> Result<crate::models::Manufacturer, Error<DcimManufacturersCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/manufacturers/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimManufacturersCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_manufacturers_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimManufacturersDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/manufacturers/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimManufacturersDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_manufacturers_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, slug: Option<&str>, description: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, contact: Option<&str>, contact_role: Option<&str>, contact_group: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, slug__n: Option<&str>, slug__ic: Option<&str>, slug__nic: Option<&str>, slug__iew: Option<&str>, slug__niew: Option<&str>, slug__isw: Option<&str>, slug__nisw: Option<&str>, slug__ie: Option<&str>, slug__nie: Option<&str>, slug__empty: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, contact__n: Option<&str>, contact_role__n: Option<&str>, contact_group__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimManufacturersList200Response, Error<DcimManufacturersListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/manufacturers/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder = local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact {
        local_var_req_builder = local_var_req_builder.query(&[("contact", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_role {
        local_var_req_builder = local_var_req_builder.query(&[("contact_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_group {
        local_var_req_builder = local_var_req_builder.query(&[("contact_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder = local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__empty {
        local_var_req_builder = local_var_req_builder.query(&[("slug__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_role__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimManufacturersListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_manufacturers_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::Manufacturer) -> Result<crate::models::Manufacturer, Error<DcimManufacturersPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/manufacturers/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimManufacturersPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_manufacturers_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::Manufacturer, Error<DcimManufacturersReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/manufacturers/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimManufacturersReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_manufacturers_update(configuration: &configuration::Configuration, id: i32, data: crate::models::Manufacturer) -> Result<crate::models::Manufacturer, Error<DcimManufacturersUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/manufacturers/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimManufacturersUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_bay_templates_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimModuleBayTemplatesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-bay-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimModuleBayTemplatesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_bay_templates_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableModuleBayTemplate) -> Result<crate::models::ModuleBayTemplate, Error<DcimModuleBayTemplatesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-bay-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleBayTemplatesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_bay_templates_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableModuleBayTemplate) -> Result<crate::models::ModuleBayTemplate, Error<DcimModuleBayTemplatesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-bay-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleBayTemplatesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_bay_templates_create(configuration: &configuration::Configuration, data: crate::models::WritableModuleBayTemplate) -> Result<crate::models::ModuleBayTemplate, Error<DcimModuleBayTemplatesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-bay-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleBayTemplatesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_bay_templates_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimModuleBayTemplatesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-bay-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimModuleBayTemplatesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_bay_templates_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, devicetype_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, devicetype_id__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimModuleBayTemplatesList200Response, Error<DcimModuleBayTemplatesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-bay-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleBayTemplatesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_bay_templates_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableModuleBayTemplate) -> Result<crate::models::ModuleBayTemplate, Error<DcimModuleBayTemplatesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-bay-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleBayTemplatesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_bay_templates_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::ModuleBayTemplate, Error<DcimModuleBayTemplatesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-bay-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleBayTemplatesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_bay_templates_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableModuleBayTemplate) -> Result<crate::models::ModuleBayTemplate, Error<DcimModuleBayTemplatesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-bay-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleBayTemplatesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_bays_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimModuleBaysBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-bays/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimModuleBaysBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_bays_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableModuleBay) -> Result<crate::models::ModuleBay, Error<DcimModuleBaysBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-bays/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleBaysBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_bays_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableModuleBay) -> Result<crate::models::ModuleBay, Error<DcimModuleBaysBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-bays/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleBaysBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_bays_create(configuration: &configuration::Configuration, data: crate::models::WritableModuleBay) -> Result<crate::models::ModuleBay, Error<DcimModuleBaysCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-bays/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleBaysCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_bays_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimModuleBaysDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-bays/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimModuleBaysDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_bays_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, label: Option<&str>, description: Option<&str>, q: Option<&str>, region_id: Option<&str>, region: Option<&str>, site_group_id: Option<&str>, site_group: Option<&str>, site_id: Option<&str>, site: Option<&str>, location_id: Option<&str>, location: Option<&str>, rack_id: Option<&str>, rack: Option<&str>, device_id: Option<&str>, device: Option<&str>, virtual_chassis_id: Option<&str>, virtual_chassis: Option<&str>, created: Option<&str>, last_updated: Option<&str>, tag: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, label__n: Option<&str>, label__ic: Option<&str>, label__nic: Option<&str>, label__iew: Option<&str>, label__niew: Option<&str>, label__isw: Option<&str>, label__nisw: Option<&str>, label__ie: Option<&str>, label__nie: Option<&str>, label__empty: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, site_group_id__n: Option<&str>, site_group__n: Option<&str>, site_id__n: Option<&str>, site__n: Option<&str>, location_id__n: Option<&str>, location__n: Option<&str>, rack_id__n: Option<&str>, rack__n: Option<&str>, device_id__n: Option<&str>, device__n: Option<&str>, virtual_chassis_id__n: Option<&str>, virtual_chassis__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimModuleBaysList200Response, Error<DcimModuleBaysListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-bays/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label {
        local_var_req_builder = local_var_req_builder.query(&[("label", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder = local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id {
        local_var_req_builder = local_var_req_builder.query(&[("location_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location {
        local_var_req_builder = local_var_req_builder.query(&[("location", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack {
        local_var_req_builder = local_var_req_builder.query(&[("rack", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("device_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device {
        local_var_req_builder = local_var_req_builder.query(&[("device", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__n {
        local_var_req_builder = local_var_req_builder.query(&[("label__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ic {
        local_var_req_builder = local_var_req_builder.query(&[("label__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nic {
        local_var_req_builder = local_var_req_builder.query(&[("label__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__iew {
        local_var_req_builder = local_var_req_builder.query(&[("label__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__niew {
        local_var_req_builder = local_var_req_builder.query(&[("label__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__isw {
        local_var_req_builder = local_var_req_builder.query(&[("label__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("label__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ie {
        local_var_req_builder = local_var_req_builder.query(&[("label__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nie {
        local_var_req_builder = local_var_req_builder.query(&[("label__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__empty {
        local_var_req_builder = local_var_req_builder.query(&[("label__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder = local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("location_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location__n {
        local_var_req_builder = local_var_req_builder.query(&[("location__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("device_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device__n {
        local_var_req_builder = local_var_req_builder.query(&[("device__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleBaysListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_bays_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableModuleBay) -> Result<crate::models::ModuleBay, Error<DcimModuleBaysPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-bays/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleBaysPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_bays_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::ModuleBay, Error<DcimModuleBaysReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-bays/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleBaysReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_bays_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableModuleBay) -> Result<crate::models::ModuleBay, Error<DcimModuleBaysUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-bays/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleBaysUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_types_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimModuleTypesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-types/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimModuleTypesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_types_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableModuleType) -> Result<crate::models::ModuleType, Error<DcimModuleTypesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-types/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleTypesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_types_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableModuleType) -> Result<crate::models::ModuleType, Error<DcimModuleTypesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-types/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleTypesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_types_create(configuration: &configuration::Configuration, data: crate::models::WritableModuleType) -> Result<crate::models::ModuleType, Error<DcimModuleTypesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-types/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleTypesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_types_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimModuleTypesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-types/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimModuleTypesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_types_list(configuration: &configuration::Configuration, id: Option<&str>, model: Option<&str>, part_number: Option<&str>, weight: Option<&str>, weight_unit: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, manufacturer_id: Option<&str>, manufacturer: Option<&str>, console_ports: Option<&str>, console_server_ports: Option<&str>, power_ports: Option<&str>, power_outlets: Option<&str>, interfaces: Option<&str>, pass_through_ports: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, model__n: Option<&str>, model__ic: Option<&str>, model__nic: Option<&str>, model__iew: Option<&str>, model__niew: Option<&str>, model__isw: Option<&str>, model__nisw: Option<&str>, model__ie: Option<&str>, model__nie: Option<&str>, model__empty: Option<&str>, part_number__n: Option<&str>, part_number__ic: Option<&str>, part_number__nic: Option<&str>, part_number__iew: Option<&str>, part_number__niew: Option<&str>, part_number__isw: Option<&str>, part_number__nisw: Option<&str>, part_number__ie: Option<&str>, part_number__nie: Option<&str>, part_number__empty: Option<&str>, weight__n: Option<&str>, weight__lte: Option<&str>, weight__lt: Option<&str>, weight__gte: Option<&str>, weight__gt: Option<&str>, weight_unit__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, manufacturer_id__n: Option<&str>, manufacturer__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimModuleTypesList200Response, Error<DcimModuleTypesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-types/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model {
        local_var_req_builder = local_var_req_builder.query(&[("model", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number {
        local_var_req_builder = local_var_req_builder.query(&[("part_number", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight {
        local_var_req_builder = local_var_req_builder.query(&[("weight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight_unit {
        local_var_req_builder = local_var_req_builder.query(&[("weight_unit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer_id {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = console_ports {
        local_var_req_builder = local_var_req_builder.query(&[("console_ports", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = console_server_ports {
        local_var_req_builder = local_var_req_builder.query(&[("console_server_ports", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = power_ports {
        local_var_req_builder = local_var_req_builder.query(&[("power_ports", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = power_outlets {
        local_var_req_builder = local_var_req_builder.query(&[("power_outlets", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = interfaces {
        local_var_req_builder = local_var_req_builder.query(&[("interfaces", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = pass_through_ports {
        local_var_req_builder = local_var_req_builder.query(&[("pass_through_ports", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__n {
        local_var_req_builder = local_var_req_builder.query(&[("model__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__ic {
        local_var_req_builder = local_var_req_builder.query(&[("model__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__nic {
        local_var_req_builder = local_var_req_builder.query(&[("model__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__iew {
        local_var_req_builder = local_var_req_builder.query(&[("model__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__niew {
        local_var_req_builder = local_var_req_builder.query(&[("model__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__isw {
        local_var_req_builder = local_var_req_builder.query(&[("model__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("model__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__ie {
        local_var_req_builder = local_var_req_builder.query(&[("model__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__nie {
        local_var_req_builder = local_var_req_builder.query(&[("model__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = model__empty {
        local_var_req_builder = local_var_req_builder.query(&[("model__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__n {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__ic {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__nic {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__iew {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__niew {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__isw {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__ie {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__nie {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = part_number__empty {
        local_var_req_builder = local_var_req_builder.query(&[("part_number__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__n {
        local_var_req_builder = local_var_req_builder.query(&[("weight__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__lte {
        local_var_req_builder = local_var_req_builder.query(&[("weight__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__lt {
        local_var_req_builder = local_var_req_builder.query(&[("weight__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__gte {
        local_var_req_builder = local_var_req_builder.query(&[("weight__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__gt {
        local_var_req_builder = local_var_req_builder.query(&[("weight__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight_unit__n {
        local_var_req_builder = local_var_req_builder.query(&[("weight_unit__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer__n {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleTypesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_types_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableModuleType) -> Result<crate::models::ModuleType, Error<DcimModuleTypesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-types/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleTypesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_types_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::ModuleType, Error<DcimModuleTypesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-types/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleTypesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_module_types_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableModuleType) -> Result<crate::models::ModuleType, Error<DcimModuleTypesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/module-types/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModuleTypesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_modules_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimModulesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/modules/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimModulesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_modules_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableModule) -> Result<crate::models::Module, Error<DcimModulesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/modules/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModulesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_modules_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableModule) -> Result<crate::models::Module, Error<DcimModulesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/modules/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModulesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_modules_create(configuration: &configuration::Configuration, data: crate::models::WritableModule) -> Result<crate::models::Module, Error<DcimModulesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/modules/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModulesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_modules_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimModulesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/modules/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimModulesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_modules_list(configuration: &configuration::Configuration, id: Option<&str>, status: Option<&str>, asset_tag: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, manufacturer_id: Option<&str>, manufacturer: Option<&str>, module_type_id: Option<&str>, module_type: Option<&str>, module_bay_id: Option<&str>, device_id: Option<&str>, serial: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, status__n: Option<&str>, asset_tag__n: Option<&str>, asset_tag__ic: Option<&str>, asset_tag__nic: Option<&str>, asset_tag__iew: Option<&str>, asset_tag__niew: Option<&str>, asset_tag__isw: Option<&str>, asset_tag__nisw: Option<&str>, asset_tag__ie: Option<&str>, asset_tag__nie: Option<&str>, asset_tag__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, manufacturer_id__n: Option<&str>, manufacturer__n: Option<&str>, module_type_id__n: Option<&str>, module_type__n: Option<&str>, module_bay_id__n: Option<&str>, device_id__n: Option<&str>, serial__n: Option<&str>, serial__ic: Option<&str>, serial__nic: Option<&str>, serial__iew: Option<&str>, serial__niew: Option<&str>, serial__isw: Option<&str>, serial__nisw: Option<&str>, serial__ie: Option<&str>, serial__nie: Option<&str>, serial__empty: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimModulesList200Response, Error<DcimModulesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/modules/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder = local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer_id {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_type_id {
        local_var_req_builder = local_var_req_builder.query(&[("module_type_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_type {
        local_var_req_builder = local_var_req_builder.query(&[("module_type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_bay_id {
        local_var_req_builder = local_var_req_builder.query(&[("module_bay_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("device_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial {
        local_var_req_builder = local_var_req_builder.query(&[("serial", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status__n {
        local_var_req_builder = local_var_req_builder.query(&[("status__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__ic {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__nic {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__iew {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__niew {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__isw {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__ie {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__nie {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__empty {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer__n {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_type_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("module_type_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_type__n {
        local_var_req_builder = local_var_req_builder.query(&[("module_type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_bay_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("module_bay_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("device_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__n {
        local_var_req_builder = local_var_req_builder.query(&[("serial__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__ic {
        local_var_req_builder = local_var_req_builder.query(&[("serial__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__nic {
        local_var_req_builder = local_var_req_builder.query(&[("serial__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__iew {
        local_var_req_builder = local_var_req_builder.query(&[("serial__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__niew {
        local_var_req_builder = local_var_req_builder.query(&[("serial__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__isw {
        local_var_req_builder = local_var_req_builder.query(&[("serial__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("serial__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__ie {
        local_var_req_builder = local_var_req_builder.query(&[("serial__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__nie {
        local_var_req_builder = local_var_req_builder.query(&[("serial__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__empty {
        local_var_req_builder = local_var_req_builder.query(&[("serial__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModulesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_modules_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableModule) -> Result<crate::models::Module, Error<DcimModulesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/modules/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModulesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_modules_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::Module, Error<DcimModulesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/modules/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModulesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_modules_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableModule) -> Result<crate::models::Module, Error<DcimModulesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/modules/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimModulesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_platforms_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimPlatformsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/platforms/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimPlatformsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_platforms_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritablePlatform) -> Result<crate::models::Platform, Error<DcimPlatformsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/platforms/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPlatformsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_platforms_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritablePlatform) -> Result<crate::models::Platform, Error<DcimPlatformsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/platforms/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPlatformsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_platforms_create(configuration: &configuration::Configuration, data: crate::models::WritablePlatform) -> Result<crate::models::Platform, Error<DcimPlatformsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/platforms/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPlatformsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_platforms_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimPlatformsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/platforms/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimPlatformsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_platforms_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, slug: Option<&str>, napalm_driver: Option<&str>, description: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, manufacturer_id: Option<&str>, manufacturer: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, slug__n: Option<&str>, slug__ic: Option<&str>, slug__nic: Option<&str>, slug__iew: Option<&str>, slug__niew: Option<&str>, slug__isw: Option<&str>, slug__nisw: Option<&str>, slug__ie: Option<&str>, slug__nie: Option<&str>, slug__empty: Option<&str>, napalm_driver__n: Option<&str>, napalm_driver__ic: Option<&str>, napalm_driver__nic: Option<&str>, napalm_driver__iew: Option<&str>, napalm_driver__niew: Option<&str>, napalm_driver__isw: Option<&str>, napalm_driver__nisw: Option<&str>, napalm_driver__ie: Option<&str>, napalm_driver__nie: Option<&str>, napalm_driver__empty: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, manufacturer_id__n: Option<&str>, manufacturer__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimPlatformsList200Response, Error<DcimPlatformsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/platforms/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder = local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = napalm_driver {
        local_var_req_builder = local_var_req_builder.query(&[("napalm_driver", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer_id {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder = local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__empty {
        local_var_req_builder = local_var_req_builder.query(&[("slug__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = napalm_driver__n {
        local_var_req_builder = local_var_req_builder.query(&[("napalm_driver__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = napalm_driver__ic {
        local_var_req_builder = local_var_req_builder.query(&[("napalm_driver__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = napalm_driver__nic {
        local_var_req_builder = local_var_req_builder.query(&[("napalm_driver__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = napalm_driver__iew {
        local_var_req_builder = local_var_req_builder.query(&[("napalm_driver__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = napalm_driver__niew {
        local_var_req_builder = local_var_req_builder.query(&[("napalm_driver__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = napalm_driver__isw {
        local_var_req_builder = local_var_req_builder.query(&[("napalm_driver__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = napalm_driver__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("napalm_driver__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = napalm_driver__ie {
        local_var_req_builder = local_var_req_builder.query(&[("napalm_driver__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = napalm_driver__nie {
        local_var_req_builder = local_var_req_builder.query(&[("napalm_driver__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = napalm_driver__empty {
        local_var_req_builder = local_var_req_builder.query(&[("napalm_driver__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = manufacturer__n {
        local_var_req_builder = local_var_req_builder.query(&[("manufacturer__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPlatformsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_platforms_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritablePlatform) -> Result<crate::models::Platform, Error<DcimPlatformsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/platforms/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPlatformsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_platforms_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::Platform, Error<DcimPlatformsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/platforms/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPlatformsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_platforms_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritablePlatform) -> Result<crate::models::Platform, Error<DcimPlatformsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/platforms/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPlatformsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_feeds_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimPowerFeedsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-feeds/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimPowerFeedsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_feeds_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritablePowerFeed) -> Result<crate::models::PowerFeed, Error<DcimPowerFeedsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-feeds/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerFeedsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_feeds_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritablePowerFeed) -> Result<crate::models::PowerFeed, Error<DcimPowerFeedsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-feeds/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerFeedsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_feeds_create(configuration: &configuration::Configuration, data: crate::models::WritablePowerFeed) -> Result<crate::models::PowerFeed, Error<DcimPowerFeedsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-feeds/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerFeedsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_feeds_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimPowerFeedsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-feeds/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimPowerFeedsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_feeds_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, status: Option<&str>, r#type: Option<&str>, supply: Option<&str>, phase: Option<&str>, voltage: Option<&str>, amperage: Option<&str>, max_utilization: Option<&str>, cable_end: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, cabled: Option<&str>, occupied: Option<&str>, connected: Option<&str>, region_id: Option<&str>, region: Option<&str>, site_group_id: Option<&str>, site_group: Option<&str>, site_id: Option<&str>, site: Option<&str>, power_panel_id: Option<&str>, rack_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, status__n: Option<&str>, type__n: Option<&str>, supply__n: Option<&str>, phase__n: Option<&str>, voltage__n: Option<&str>, voltage__lte: Option<&str>, voltage__lt: Option<&str>, voltage__gte: Option<&str>, voltage__gt: Option<&str>, amperage__n: Option<&str>, amperage__lte: Option<&str>, amperage__lt: Option<&str>, amperage__gte: Option<&str>, amperage__gt: Option<&str>, max_utilization__n: Option<&str>, max_utilization__lte: Option<&str>, max_utilization__lt: Option<&str>, max_utilization__gte: Option<&str>, max_utilization__gt: Option<&str>, cable_end__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, site_group_id__n: Option<&str>, site_group__n: Option<&str>, site_id__n: Option<&str>, site__n: Option<&str>, power_panel_id__n: Option<&str>, rack_id__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimPowerFeedsList200Response, Error<DcimPowerFeedsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-feeds/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder = local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = supply {
        local_var_req_builder = local_var_req_builder.query(&[("supply", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = phase {
        local_var_req_builder = local_var_req_builder.query(&[("phase", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = voltage {
        local_var_req_builder = local_var_req_builder.query(&[("voltage", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = amperage {
        local_var_req_builder = local_var_req_builder.query(&[("amperage", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_utilization {
        local_var_req_builder = local_var_req_builder.query(&[("max_utilization", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable_end {
        local_var_req_builder = local_var_req_builder.query(&[("cable_end", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cabled {
        local_var_req_builder = local_var_req_builder.query(&[("cabled", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = occupied {
        local_var_req_builder = local_var_req_builder.query(&[("occupied", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = connected {
        local_var_req_builder = local_var_req_builder.query(&[("connected", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder = local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = power_panel_id {
        local_var_req_builder = local_var_req_builder.query(&[("power_panel_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status__n {
        local_var_req_builder = local_var_req_builder.query(&[("status__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder = local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = supply__n {
        local_var_req_builder = local_var_req_builder.query(&[("supply__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = phase__n {
        local_var_req_builder = local_var_req_builder.query(&[("phase__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = voltage__n {
        local_var_req_builder = local_var_req_builder.query(&[("voltage__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = voltage__lte {
        local_var_req_builder = local_var_req_builder.query(&[("voltage__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = voltage__lt {
        local_var_req_builder = local_var_req_builder.query(&[("voltage__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = voltage__gte {
        local_var_req_builder = local_var_req_builder.query(&[("voltage__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = voltage__gt {
        local_var_req_builder = local_var_req_builder.query(&[("voltage__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = amperage__n {
        local_var_req_builder = local_var_req_builder.query(&[("amperage__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = amperage__lte {
        local_var_req_builder = local_var_req_builder.query(&[("amperage__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = amperage__lt {
        local_var_req_builder = local_var_req_builder.query(&[("amperage__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = amperage__gte {
        local_var_req_builder = local_var_req_builder.query(&[("amperage__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = amperage__gt {
        local_var_req_builder = local_var_req_builder.query(&[("amperage__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_utilization__n {
        local_var_req_builder = local_var_req_builder.query(&[("max_utilization__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_utilization__lte {
        local_var_req_builder = local_var_req_builder.query(&[("max_utilization__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_utilization__lt {
        local_var_req_builder = local_var_req_builder.query(&[("max_utilization__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_utilization__gte {
        local_var_req_builder = local_var_req_builder.query(&[("max_utilization__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_utilization__gt {
        local_var_req_builder = local_var_req_builder.query(&[("max_utilization__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable_end__n {
        local_var_req_builder = local_var_req_builder.query(&[("cable_end__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder = local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = power_panel_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("power_panel_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerFeedsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_feeds_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritablePowerFeed) -> Result<crate::models::PowerFeed, Error<DcimPowerFeedsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-feeds/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerFeedsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_feeds_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::PowerFeed, Error<DcimPowerFeedsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-feeds/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerFeedsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
pub async fn dcim_power_feeds_trace(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::PowerFeed, Error<DcimPowerFeedsTraceError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-feeds/{id}/trace/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerFeedsTraceError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_feeds_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritablePowerFeed) -> Result<crate::models::PowerFeed, Error<DcimPowerFeedsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-feeds/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerFeedsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_outlet_templates_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimPowerOutletTemplatesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlet-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimPowerOutletTemplatesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_outlet_templates_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritablePowerOutletTemplate) -> Result<crate::models::PowerOutletTemplate, Error<DcimPowerOutletTemplatesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlet-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerOutletTemplatesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_outlet_templates_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritablePowerOutletTemplate) -> Result<crate::models::PowerOutletTemplate, Error<DcimPowerOutletTemplatesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlet-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerOutletTemplatesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_outlet_templates_create(configuration: &configuration::Configuration, data: crate::models::WritablePowerOutletTemplate) -> Result<crate::models::PowerOutletTemplate, Error<DcimPowerOutletTemplatesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlet-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerOutletTemplatesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_outlet_templates_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimPowerOutletTemplatesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlet-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimPowerOutletTemplatesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_outlet_templates_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, r#type: Option<&str>, feed_leg: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, devicetype_id: Option<&str>, moduletype_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, type__n: Option<&str>, feed_leg__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, devicetype_id__n: Option<&str>, moduletype_id__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimPowerOutletTemplatesList200Response, Error<DcimPowerOutletTemplatesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlet-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = feed_leg {
        local_var_req_builder = local_var_req_builder.query(&[("feed_leg", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = moduletype_id {
        local_var_req_builder = local_var_req_builder.query(&[("moduletype_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder = local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = feed_leg__n {
        local_var_req_builder = local_var_req_builder.query(&[("feed_leg__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = moduletype_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("moduletype_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerOutletTemplatesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_outlet_templates_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritablePowerOutletTemplate) -> Result<crate::models::PowerOutletTemplate, Error<DcimPowerOutletTemplatesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlet-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerOutletTemplatesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_outlet_templates_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::PowerOutletTemplate, Error<DcimPowerOutletTemplatesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlet-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerOutletTemplatesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_outlet_templates_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritablePowerOutletTemplate) -> Result<crate::models::PowerOutletTemplate, Error<DcimPowerOutletTemplatesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlet-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerOutletTemplatesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_outlets_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimPowerOutletsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlets/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimPowerOutletsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_outlets_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritablePowerOutlet) -> Result<crate::models::PowerOutlet, Error<DcimPowerOutletsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlets/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerOutletsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_outlets_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritablePowerOutlet) -> Result<crate::models::PowerOutlet, Error<DcimPowerOutletsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlets/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerOutletsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_outlets_create(configuration: &configuration::Configuration, data: crate::models::WritablePowerOutlet) -> Result<crate::models::PowerOutlet, Error<DcimPowerOutletsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlets/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerOutletsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_outlets_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimPowerOutletsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlets/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimPowerOutletsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_outlets_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, label: Option<&str>, feed_leg: Option<&str>, description: Option<&str>, cable_end: Option<&str>, q: Option<&str>, region_id: Option<&str>, region: Option<&str>, site_group_id: Option<&str>, site_group: Option<&str>, site_id: Option<&str>, site: Option<&str>, location_id: Option<&str>, location: Option<&str>, rack_id: Option<&str>, rack: Option<&str>, device_id: Option<&str>, device: Option<&str>, virtual_chassis_id: Option<&str>, virtual_chassis: Option<&str>, module_id: Option<&str>, created: Option<&str>, last_updated: Option<&str>, tag: Option<&str>, cabled: Option<&str>, occupied: Option<&str>, connected: Option<&str>, r#type: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, label__n: Option<&str>, label__ic: Option<&str>, label__nic: Option<&str>, label__iew: Option<&str>, label__niew: Option<&str>, label__isw: Option<&str>, label__nisw: Option<&str>, label__ie: Option<&str>, label__nie: Option<&str>, label__empty: Option<&str>, feed_leg__n: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, cable_end__n: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, site_group_id__n: Option<&str>, site_group__n: Option<&str>, site_id__n: Option<&str>, site__n: Option<&str>, location_id__n: Option<&str>, location__n: Option<&str>, rack_id__n: Option<&str>, rack__n: Option<&str>, device_id__n: Option<&str>, device__n: Option<&str>, virtual_chassis_id__n: Option<&str>, virtual_chassis__n: Option<&str>, module_id__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, type__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimPowerOutletsList200Response, Error<DcimPowerOutletsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlets/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label {
        local_var_req_builder = local_var_req_builder.query(&[("label", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = feed_leg {
        local_var_req_builder = local_var_req_builder.query(&[("feed_leg", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable_end {
        local_var_req_builder = local_var_req_builder.query(&[("cable_end", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder = local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id {
        local_var_req_builder = local_var_req_builder.query(&[("location_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location {
        local_var_req_builder = local_var_req_builder.query(&[("location", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack {
        local_var_req_builder = local_var_req_builder.query(&[("rack", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("device_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device {
        local_var_req_builder = local_var_req_builder.query(&[("device", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_id {
        local_var_req_builder = local_var_req_builder.query(&[("module_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cabled {
        local_var_req_builder = local_var_req_builder.query(&[("cabled", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = occupied {
        local_var_req_builder = local_var_req_builder.query(&[("occupied", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = connected {
        local_var_req_builder = local_var_req_builder.query(&[("connected", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__n {
        local_var_req_builder = local_var_req_builder.query(&[("label__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ic {
        local_var_req_builder = local_var_req_builder.query(&[("label__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nic {
        local_var_req_builder = local_var_req_builder.query(&[("label__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__iew {
        local_var_req_builder = local_var_req_builder.query(&[("label__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__niew {
        local_var_req_builder = local_var_req_builder.query(&[("label__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__isw {
        local_var_req_builder = local_var_req_builder.query(&[("label__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("label__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ie {
        local_var_req_builder = local_var_req_builder.query(&[("label__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nie {
        local_var_req_builder = local_var_req_builder.query(&[("label__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__empty {
        local_var_req_builder = local_var_req_builder.query(&[("label__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = feed_leg__n {
        local_var_req_builder = local_var_req_builder.query(&[("feed_leg__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable_end__n {
        local_var_req_builder = local_var_req_builder.query(&[("cable_end__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder = local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("location_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location__n {
        local_var_req_builder = local_var_req_builder.query(&[("location__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("device_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device__n {
        local_var_req_builder = local_var_req_builder.query(&[("device__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("module_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder = local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerOutletsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_outlets_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritablePowerOutlet) -> Result<crate::models::PowerOutlet, Error<DcimPowerOutletsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlets/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerOutletsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_outlets_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::PowerOutlet, Error<DcimPowerOutletsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlets/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerOutletsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
pub async fn dcim_power_outlets_trace(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::PowerOutlet, Error<DcimPowerOutletsTraceError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlets/{id}/trace/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerOutletsTraceError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_outlets_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritablePowerOutlet) -> Result<crate::models::PowerOutlet, Error<DcimPowerOutletsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-outlets/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerOutletsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_panels_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimPowerPanelsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-panels/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimPowerPanelsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_panels_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritablePowerPanel) -> Result<crate::models::PowerPanel, Error<DcimPowerPanelsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-panels/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPanelsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_panels_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritablePowerPanel) -> Result<crate::models::PowerPanel, Error<DcimPowerPanelsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-panels/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPanelsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_panels_create(configuration: &configuration::Configuration, data: crate::models::WritablePowerPanel) -> Result<crate::models::PowerPanel, Error<DcimPowerPanelsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-panels/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPanelsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_panels_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimPowerPanelsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-panels/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimPowerPanelsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_panels_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, contact: Option<&str>, contact_role: Option<&str>, contact_group: Option<&str>, region_id: Option<&str>, region: Option<&str>, site_group_id: Option<&str>, site_group: Option<&str>, site_id: Option<&str>, site: Option<&str>, location_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, contact__n: Option<&str>, contact_role__n: Option<&str>, contact_group__n: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, site_group_id__n: Option<&str>, site_group__n: Option<&str>, site_id__n: Option<&str>, site__n: Option<&str>, location_id__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimPowerPanelsList200Response, Error<DcimPowerPanelsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-panels/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact {
        local_var_req_builder = local_var_req_builder.query(&[("contact", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_role {
        local_var_req_builder = local_var_req_builder.query(&[("contact_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_group {
        local_var_req_builder = local_var_req_builder.query(&[("contact_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder = local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id {
        local_var_req_builder = local_var_req_builder.query(&[("location_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_role__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder = local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("location_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPanelsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_panels_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritablePowerPanel) -> Result<crate::models::PowerPanel, Error<DcimPowerPanelsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-panels/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPanelsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_panels_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::PowerPanel, Error<DcimPowerPanelsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-panels/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPanelsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_panels_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritablePowerPanel) -> Result<crate::models::PowerPanel, Error<DcimPowerPanelsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-panels/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPanelsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_port_templates_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimPowerPortTemplatesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimPowerPortTemplatesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_port_templates_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritablePowerPortTemplate) -> Result<crate::models::PowerPortTemplate, Error<DcimPowerPortTemplatesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPortTemplatesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_port_templates_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritablePowerPortTemplate) -> Result<crate::models::PowerPortTemplate, Error<DcimPowerPortTemplatesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPortTemplatesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_port_templates_create(configuration: &configuration::Configuration, data: crate::models::WritablePowerPortTemplate) -> Result<crate::models::PowerPortTemplate, Error<DcimPowerPortTemplatesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPortTemplatesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_port_templates_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimPowerPortTemplatesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimPowerPortTemplatesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_port_templates_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, r#type: Option<&str>, maximum_draw: Option<&str>, allocated_draw: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, devicetype_id: Option<&str>, moduletype_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, type__n: Option<&str>, maximum_draw__n: Option<&str>, maximum_draw__lte: Option<&str>, maximum_draw__lt: Option<&str>, maximum_draw__gte: Option<&str>, maximum_draw__gt: Option<&str>, allocated_draw__n: Option<&str>, allocated_draw__lte: Option<&str>, allocated_draw__lt: Option<&str>, allocated_draw__gte: Option<&str>, allocated_draw__gt: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, devicetype_id__n: Option<&str>, moduletype_id__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimPowerPortTemplatesList200Response, Error<DcimPowerPortTemplatesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = maximum_draw {
        local_var_req_builder = local_var_req_builder.query(&[("maximum_draw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allocated_draw {
        local_var_req_builder = local_var_req_builder.query(&[("allocated_draw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = moduletype_id {
        local_var_req_builder = local_var_req_builder.query(&[("moduletype_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder = local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = maximum_draw__n {
        local_var_req_builder = local_var_req_builder.query(&[("maximum_draw__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = maximum_draw__lte {
        local_var_req_builder = local_var_req_builder.query(&[("maximum_draw__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = maximum_draw__lt {
        local_var_req_builder = local_var_req_builder.query(&[("maximum_draw__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = maximum_draw__gte {
        local_var_req_builder = local_var_req_builder.query(&[("maximum_draw__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = maximum_draw__gt {
        local_var_req_builder = local_var_req_builder.query(&[("maximum_draw__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allocated_draw__n {
        local_var_req_builder = local_var_req_builder.query(&[("allocated_draw__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allocated_draw__lte {
        local_var_req_builder = local_var_req_builder.query(&[("allocated_draw__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allocated_draw__lt {
        local_var_req_builder = local_var_req_builder.query(&[("allocated_draw__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allocated_draw__gte {
        local_var_req_builder = local_var_req_builder.query(&[("allocated_draw__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allocated_draw__gt {
        local_var_req_builder = local_var_req_builder.query(&[("allocated_draw__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = moduletype_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("moduletype_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPortTemplatesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_port_templates_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritablePowerPortTemplate) -> Result<crate::models::PowerPortTemplate, Error<DcimPowerPortTemplatesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPortTemplatesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_port_templates_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::PowerPortTemplate, Error<DcimPowerPortTemplatesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPortTemplatesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_port_templates_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritablePowerPortTemplate) -> Result<crate::models::PowerPortTemplate, Error<DcimPowerPortTemplatesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPortTemplatesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_ports_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimPowerPortsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimPowerPortsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_ports_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritablePowerPort) -> Result<crate::models::PowerPort, Error<DcimPowerPortsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPortsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_ports_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritablePowerPort) -> Result<crate::models::PowerPort, Error<DcimPowerPortsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPortsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_ports_create(configuration: &configuration::Configuration, data: crate::models::WritablePowerPort) -> Result<crate::models::PowerPort, Error<DcimPowerPortsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPortsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_ports_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimPowerPortsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimPowerPortsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_ports_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, label: Option<&str>, maximum_draw: Option<&str>, allocated_draw: Option<&str>, description: Option<&str>, cable_end: Option<&str>, q: Option<&str>, region_id: Option<&str>, region: Option<&str>, site_group_id: Option<&str>, site_group: Option<&str>, site_id: Option<&str>, site: Option<&str>, location_id: Option<&str>, location: Option<&str>, rack_id: Option<&str>, rack: Option<&str>, device_id: Option<&str>, device: Option<&str>, virtual_chassis_id: Option<&str>, virtual_chassis: Option<&str>, module_id: Option<&str>, created: Option<&str>, last_updated: Option<&str>, tag: Option<&str>, cabled: Option<&str>, occupied: Option<&str>, connected: Option<&str>, r#type: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, label__n: Option<&str>, label__ic: Option<&str>, label__nic: Option<&str>, label__iew: Option<&str>, label__niew: Option<&str>, label__isw: Option<&str>, label__nisw: Option<&str>, label__ie: Option<&str>, label__nie: Option<&str>, label__empty: Option<&str>, maximum_draw__n: Option<&str>, maximum_draw__lte: Option<&str>, maximum_draw__lt: Option<&str>, maximum_draw__gte: Option<&str>, maximum_draw__gt: Option<&str>, allocated_draw__n: Option<&str>, allocated_draw__lte: Option<&str>, allocated_draw__lt: Option<&str>, allocated_draw__gte: Option<&str>, allocated_draw__gt: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, cable_end__n: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, site_group_id__n: Option<&str>, site_group__n: Option<&str>, site_id__n: Option<&str>, site__n: Option<&str>, location_id__n: Option<&str>, location__n: Option<&str>, rack_id__n: Option<&str>, rack__n: Option<&str>, device_id__n: Option<&str>, device__n: Option<&str>, virtual_chassis_id__n: Option<&str>, virtual_chassis__n: Option<&str>, module_id__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, type__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimPowerPortsList200Response, Error<DcimPowerPortsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label {
        local_var_req_builder = local_var_req_builder.query(&[("label", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = maximum_draw {
        local_var_req_builder = local_var_req_builder.query(&[("maximum_draw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allocated_draw {
        local_var_req_builder = local_var_req_builder.query(&[("allocated_draw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable_end {
        local_var_req_builder = local_var_req_builder.query(&[("cable_end", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder = local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id {
        local_var_req_builder = local_var_req_builder.query(&[("location_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location {
        local_var_req_builder = local_var_req_builder.query(&[("location", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack {
        local_var_req_builder = local_var_req_builder.query(&[("rack", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("device_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device {
        local_var_req_builder = local_var_req_builder.query(&[("device", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_id {
        local_var_req_builder = local_var_req_builder.query(&[("module_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cabled {
        local_var_req_builder = local_var_req_builder.query(&[("cabled", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = occupied {
        local_var_req_builder = local_var_req_builder.query(&[("occupied", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = connected {
        local_var_req_builder = local_var_req_builder.query(&[("connected", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__n {
        local_var_req_builder = local_var_req_builder.query(&[("label__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ic {
        local_var_req_builder = local_var_req_builder.query(&[("label__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nic {
        local_var_req_builder = local_var_req_builder.query(&[("label__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__iew {
        local_var_req_builder = local_var_req_builder.query(&[("label__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__niew {
        local_var_req_builder = local_var_req_builder.query(&[("label__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__isw {
        local_var_req_builder = local_var_req_builder.query(&[("label__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("label__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ie {
        local_var_req_builder = local_var_req_builder.query(&[("label__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nie {
        local_var_req_builder = local_var_req_builder.query(&[("label__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__empty {
        local_var_req_builder = local_var_req_builder.query(&[("label__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = maximum_draw__n {
        local_var_req_builder = local_var_req_builder.query(&[("maximum_draw__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = maximum_draw__lte {
        local_var_req_builder = local_var_req_builder.query(&[("maximum_draw__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = maximum_draw__lt {
        local_var_req_builder = local_var_req_builder.query(&[("maximum_draw__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = maximum_draw__gte {
        local_var_req_builder = local_var_req_builder.query(&[("maximum_draw__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = maximum_draw__gt {
        local_var_req_builder = local_var_req_builder.query(&[("maximum_draw__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allocated_draw__n {
        local_var_req_builder = local_var_req_builder.query(&[("allocated_draw__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allocated_draw__lte {
        local_var_req_builder = local_var_req_builder.query(&[("allocated_draw__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allocated_draw__lt {
        local_var_req_builder = local_var_req_builder.query(&[("allocated_draw__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allocated_draw__gte {
        local_var_req_builder = local_var_req_builder.query(&[("allocated_draw__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = allocated_draw__gt {
        local_var_req_builder = local_var_req_builder.query(&[("allocated_draw__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable_end__n {
        local_var_req_builder = local_var_req_builder.query(&[("cable_end__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder = local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("location_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location__n {
        local_var_req_builder = local_var_req_builder.query(&[("location__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("device_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device__n {
        local_var_req_builder = local_var_req_builder.query(&[("device__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("module_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder = local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPortsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_ports_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritablePowerPort) -> Result<crate::models::PowerPort, Error<DcimPowerPortsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPortsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_ports_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::PowerPort, Error<DcimPowerPortsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPortsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
pub async fn dcim_power_ports_trace(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::PowerPort, Error<DcimPowerPortsTraceError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-ports/{id}/trace/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPortsTraceError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_power_ports_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritablePowerPort) -> Result<crate::models::PowerPort, Error<DcimPowerPortsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/power-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimPowerPortsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rack_reservations_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimRackReservationsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rack-reservations/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimRackReservationsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rack_reservations_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableRackReservation) -> Result<crate::models::RackReservation, Error<DcimRackReservationsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rack-reservations/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRackReservationsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rack_reservations_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableRackReservation) -> Result<crate::models::RackReservation, Error<DcimRackReservationsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rack-reservations/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRackReservationsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rack_reservations_create(configuration: &configuration::Configuration, data: crate::models::WritableRackReservation) -> Result<crate::models::RackReservation, Error<DcimRackReservationsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rack-reservations/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRackReservationsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rack_reservations_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimRackReservationsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rack-reservations/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimRackReservationsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rack_reservations_list(configuration: &configuration::Configuration, id: Option<&str>, created: Option<&str>, description: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, tenant_group_id: Option<&str>, tenant_group: Option<&str>, tenant_id: Option<&str>, tenant: Option<&str>, rack_id: Option<&str>, site_id: Option<&str>, site: Option<&str>, region_id: Option<&str>, region: Option<&str>, site_group_id: Option<&str>, site_group: Option<&str>, location_id: Option<&str>, location: Option<&str>, user_id: Option<&str>, user: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, tenant_group_id__n: Option<&str>, tenant_group__n: Option<&str>, tenant_id__n: Option<&str>, tenant__n: Option<&str>, rack_id__n: Option<&str>, site_id__n: Option<&str>, site__n: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, site_group_id__n: Option<&str>, site_group__n: Option<&str>, location_id__n: Option<&str>, location__n: Option<&str>, user_id__n: Option<&str>, user__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimRackReservationsList200Response, Error<DcimRackReservationsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rack-reservations/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant {
        local_var_req_builder = local_var_req_builder.query(&[("tenant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder = local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id {
        local_var_req_builder = local_var_req_builder.query(&[("location_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location {
        local_var_req_builder = local_var_req_builder.query(&[("location", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_id {
        local_var_req_builder = local_var_req_builder.query(&[("user_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user {
        local_var_req_builder = local_var_req_builder.query(&[("user", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder = local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("location_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location__n {
        local_var_req_builder = local_var_req_builder.query(&[("location__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("user_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = user__n {
        local_var_req_builder = local_var_req_builder.query(&[("user__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRackReservationsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rack_reservations_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableRackReservation) -> Result<crate::models::RackReservation, Error<DcimRackReservationsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rack-reservations/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRackReservationsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rack_reservations_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::RackReservation, Error<DcimRackReservationsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rack-reservations/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRackReservationsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rack_reservations_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableRackReservation) -> Result<crate::models::RackReservation, Error<DcimRackReservationsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rack-reservations/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRackReservationsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rack_roles_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimRackRolesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rack-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimRackRolesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rack_roles_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::RackRole) -> Result<crate::models::RackRole, Error<DcimRackRolesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rack-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRackRolesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rack_roles_bulk_update(configuration: &configuration::Configuration, data: crate::models::RackRole) -> Result<crate::models::RackRole, Error<DcimRackRolesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rack-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRackRolesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rack_roles_create(configuration: &configuration::Configuration, data: crate::models::RackRole) -> Result<crate::models::RackRole, Error<DcimRackRolesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rack-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRackRolesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rack_roles_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimRackRolesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rack-roles/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimRackRolesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rack_roles_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, slug: Option<&str>, color: Option<&str>, description: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, slug__n: Option<&str>, slug__ic: Option<&str>, slug__nic: Option<&str>, slug__iew: Option<&str>, slug__niew: Option<&str>, slug__isw: Option<&str>, slug__nisw: Option<&str>, slug__ie: Option<&str>, slug__nie: Option<&str>, slug__empty: Option<&str>, color__n: Option<&str>, color__ic: Option<&str>, color__nic: Option<&str>, color__iew: Option<&str>, color__niew: Option<&str>, color__isw: Option<&str>, color__nisw: Option<&str>, color__ie: Option<&str>, color__nie: Option<&str>, color__empty: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimRackRolesList200Response, Error<DcimRackRolesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rack-roles/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder = local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color {
        local_var_req_builder = local_var_req_builder.query(&[("color", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder = local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__empty {
        local_var_req_builder = local_var_req_builder.query(&[("slug__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__n {
        local_var_req_builder = local_var_req_builder.query(&[("color__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__ic {
        local_var_req_builder = local_var_req_builder.query(&[("color__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nic {
        local_var_req_builder = local_var_req_builder.query(&[("color__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__iew {
        local_var_req_builder = local_var_req_builder.query(&[("color__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__niew {
        local_var_req_builder = local_var_req_builder.query(&[("color__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__isw {
        local_var_req_builder = local_var_req_builder.query(&[("color__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("color__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__ie {
        local_var_req_builder = local_var_req_builder.query(&[("color__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nie {
        local_var_req_builder = local_var_req_builder.query(&[("color__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__empty {
        local_var_req_builder = local_var_req_builder.query(&[("color__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRackRolesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rack_roles_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::RackRole) -> Result<crate::models::RackRole, Error<DcimRackRolesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rack-roles/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRackRolesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rack_roles_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::RackRole, Error<DcimRackRolesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rack-roles/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRackRolesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rack_roles_update(configuration: &configuration::Configuration, id: i32, data: crate::models::RackRole) -> Result<crate::models::RackRole, Error<DcimRackRolesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rack-roles/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRackRolesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_racks_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimRacksBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/racks/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimRacksBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_racks_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableRack) -> Result<crate::models::Rack, Error<DcimRacksBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/racks/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRacksBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_racks_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableRack) -> Result<crate::models::Rack, Error<DcimRacksBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/racks/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRacksBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_racks_create(configuration: &configuration::Configuration, data: crate::models::WritableRack) -> Result<crate::models::Rack, Error<DcimRacksCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/racks/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRacksCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_racks_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimRacksDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/racks/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimRacksDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Rack elevation representing the list of rack units. Also supports rendering the elevation as an SVG.
pub async fn dcim_racks_elevation(configuration: &configuration::Configuration, id: i32, q: Option<&str>, face: Option<&str>, render: Option<&str>, unit_width: Option<i32>, unit_height: Option<i32>, legend_width: Option<i32>, margin_width: Option<i32>, exclude: Option<i32>, expand_devices: Option<bool>, include_images: Option<bool>) -> Result<Vec<crate::models::RackUnit>, Error<DcimRacksElevationError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/racks/{id}/elevation/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = face {
        local_var_req_builder = local_var_req_builder.query(&[("face", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = render {
        local_var_req_builder = local_var_req_builder.query(&[("render", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unit_width {
        local_var_req_builder = local_var_req_builder.query(&[("unit_width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = unit_height {
        local_var_req_builder = local_var_req_builder.query(&[("unit_height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = legend_width {
        local_var_req_builder = local_var_req_builder.query(&[("legend_width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = margin_width {
        local_var_req_builder = local_var_req_builder.query(&[("margin_width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = exclude {
        local_var_req_builder = local_var_req_builder.query(&[("exclude", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = expand_devices {
        local_var_req_builder = local_var_req_builder.query(&[("expand_devices", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = include_images {
        local_var_req_builder = local_var_req_builder.query(&[("include_images", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRacksElevationError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_racks_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, facility_id: Option<&str>, asset_tag: Option<&str>, u_height: Option<&str>, desc_units: Option<&str>, outer_width: Option<&str>, outer_depth: Option<&str>, outer_unit: Option<&str>, mounting_depth: Option<&str>, weight: Option<&str>, max_weight: Option<&str>, weight_unit: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, tenant_group_id: Option<&str>, tenant_group: Option<&str>, tenant_id: Option<&str>, tenant: Option<&str>, contact: Option<&str>, contact_role: Option<&str>, contact_group: Option<&str>, region_id: Option<&str>, region: Option<&str>, site_group_id: Option<&str>, site_group: Option<&str>, site_id: Option<&str>, site: Option<&str>, location_id: Option<&str>, location: Option<&str>, status: Option<&str>, r#type: Option<&str>, width: Option<&str>, role_id: Option<&str>, role: Option<&str>, serial: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, facility_id__n: Option<&str>, facility_id__ic: Option<&str>, facility_id__nic: Option<&str>, facility_id__iew: Option<&str>, facility_id__niew: Option<&str>, facility_id__isw: Option<&str>, facility_id__nisw: Option<&str>, facility_id__ie: Option<&str>, facility_id__nie: Option<&str>, facility_id__empty: Option<&str>, asset_tag__n: Option<&str>, asset_tag__ic: Option<&str>, asset_tag__nic: Option<&str>, asset_tag__iew: Option<&str>, asset_tag__niew: Option<&str>, asset_tag__isw: Option<&str>, asset_tag__nisw: Option<&str>, asset_tag__ie: Option<&str>, asset_tag__nie: Option<&str>, asset_tag__empty: Option<&str>, u_height__n: Option<&str>, u_height__lte: Option<&str>, u_height__lt: Option<&str>, u_height__gte: Option<&str>, u_height__gt: Option<&str>, outer_width__n: Option<&str>, outer_width__lte: Option<&str>, outer_width__lt: Option<&str>, outer_width__gte: Option<&str>, outer_width__gt: Option<&str>, outer_depth__n: Option<&str>, outer_depth__lte: Option<&str>, outer_depth__lt: Option<&str>, outer_depth__gte: Option<&str>, outer_depth__gt: Option<&str>, outer_unit__n: Option<&str>, mounting_depth__n: Option<&str>, mounting_depth__lte: Option<&str>, mounting_depth__lt: Option<&str>, mounting_depth__gte: Option<&str>, mounting_depth__gt: Option<&str>, weight__n: Option<&str>, weight__lte: Option<&str>, weight__lt: Option<&str>, weight__gte: Option<&str>, weight__gt: Option<&str>, max_weight__n: Option<&str>, max_weight__lte: Option<&str>, max_weight__lt: Option<&str>, max_weight__gte: Option<&str>, max_weight__gt: Option<&str>, weight_unit__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, tenant_group_id__n: Option<&str>, tenant_group__n: Option<&str>, tenant_id__n: Option<&str>, tenant__n: Option<&str>, contact__n: Option<&str>, contact_role__n: Option<&str>, contact_group__n: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, site_group_id__n: Option<&str>, site_group__n: Option<&str>, site_id__n: Option<&str>, site__n: Option<&str>, location_id__n: Option<&str>, location__n: Option<&str>, status__n: Option<&str>, type__n: Option<&str>, width__n: Option<&str>, role_id__n: Option<&str>, role__n: Option<&str>, serial__n: Option<&str>, serial__ic: Option<&str>, serial__nic: Option<&str>, serial__iew: Option<&str>, serial__niew: Option<&str>, serial__isw: Option<&str>, serial__nisw: Option<&str>, serial__ie: Option<&str>, serial__nie: Option<&str>, serial__empty: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimRacksList200Response, Error<DcimRacksListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/racks/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility_id {
        local_var_req_builder = local_var_req_builder.query(&[("facility_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = u_height {
        local_var_req_builder = local_var_req_builder.query(&[("u_height", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = desc_units {
        local_var_req_builder = local_var_req_builder.query(&[("desc_units", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = outer_width {
        local_var_req_builder = local_var_req_builder.query(&[("outer_width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = outer_depth {
        local_var_req_builder = local_var_req_builder.query(&[("outer_depth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = outer_unit {
        local_var_req_builder = local_var_req_builder.query(&[("outer_unit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mounting_depth {
        local_var_req_builder = local_var_req_builder.query(&[("mounting_depth", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight {
        local_var_req_builder = local_var_req_builder.query(&[("weight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_weight {
        local_var_req_builder = local_var_req_builder.query(&[("max_weight", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight_unit {
        local_var_req_builder = local_var_req_builder.query(&[("weight_unit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant {
        local_var_req_builder = local_var_req_builder.query(&[("tenant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact {
        local_var_req_builder = local_var_req_builder.query(&[("contact", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_role {
        local_var_req_builder = local_var_req_builder.query(&[("contact_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_group {
        local_var_req_builder = local_var_req_builder.query(&[("contact_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder = local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id {
        local_var_req_builder = local_var_req_builder.query(&[("location_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location {
        local_var_req_builder = local_var_req_builder.query(&[("location", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder = local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width {
        local_var_req_builder = local_var_req_builder.query(&[("width", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role_id {
        local_var_req_builder = local_var_req_builder.query(&[("role_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role {
        local_var_req_builder = local_var_req_builder.query(&[("role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial {
        local_var_req_builder = local_var_req_builder.query(&[("serial", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("facility_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility_id__ic {
        local_var_req_builder = local_var_req_builder.query(&[("facility_id__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility_id__nic {
        local_var_req_builder = local_var_req_builder.query(&[("facility_id__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility_id__iew {
        local_var_req_builder = local_var_req_builder.query(&[("facility_id__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility_id__niew {
        local_var_req_builder = local_var_req_builder.query(&[("facility_id__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility_id__isw {
        local_var_req_builder = local_var_req_builder.query(&[("facility_id__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility_id__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("facility_id__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility_id__ie {
        local_var_req_builder = local_var_req_builder.query(&[("facility_id__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility_id__nie {
        local_var_req_builder = local_var_req_builder.query(&[("facility_id__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility_id__empty {
        local_var_req_builder = local_var_req_builder.query(&[("facility_id__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__ic {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__nic {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__iew {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__niew {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__isw {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__ie {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__nie {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asset_tag__empty {
        local_var_req_builder = local_var_req_builder.query(&[("asset_tag__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = u_height__n {
        local_var_req_builder = local_var_req_builder.query(&[("u_height__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = u_height__lte {
        local_var_req_builder = local_var_req_builder.query(&[("u_height__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = u_height__lt {
        local_var_req_builder = local_var_req_builder.query(&[("u_height__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = u_height__gte {
        local_var_req_builder = local_var_req_builder.query(&[("u_height__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = u_height__gt {
        local_var_req_builder = local_var_req_builder.query(&[("u_height__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = outer_width__n {
        local_var_req_builder = local_var_req_builder.query(&[("outer_width__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = outer_width__lte {
        local_var_req_builder = local_var_req_builder.query(&[("outer_width__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = outer_width__lt {
        local_var_req_builder = local_var_req_builder.query(&[("outer_width__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = outer_width__gte {
        local_var_req_builder = local_var_req_builder.query(&[("outer_width__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = outer_width__gt {
        local_var_req_builder = local_var_req_builder.query(&[("outer_width__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = outer_depth__n {
        local_var_req_builder = local_var_req_builder.query(&[("outer_depth__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = outer_depth__lte {
        local_var_req_builder = local_var_req_builder.query(&[("outer_depth__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = outer_depth__lt {
        local_var_req_builder = local_var_req_builder.query(&[("outer_depth__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = outer_depth__gte {
        local_var_req_builder = local_var_req_builder.query(&[("outer_depth__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = outer_depth__gt {
        local_var_req_builder = local_var_req_builder.query(&[("outer_depth__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = outer_unit__n {
        local_var_req_builder = local_var_req_builder.query(&[("outer_unit__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mounting_depth__n {
        local_var_req_builder = local_var_req_builder.query(&[("mounting_depth__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mounting_depth__lte {
        local_var_req_builder = local_var_req_builder.query(&[("mounting_depth__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mounting_depth__lt {
        local_var_req_builder = local_var_req_builder.query(&[("mounting_depth__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mounting_depth__gte {
        local_var_req_builder = local_var_req_builder.query(&[("mounting_depth__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = mounting_depth__gt {
        local_var_req_builder = local_var_req_builder.query(&[("mounting_depth__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__n {
        local_var_req_builder = local_var_req_builder.query(&[("weight__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__lte {
        local_var_req_builder = local_var_req_builder.query(&[("weight__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__lt {
        local_var_req_builder = local_var_req_builder.query(&[("weight__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__gte {
        local_var_req_builder = local_var_req_builder.query(&[("weight__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight__gt {
        local_var_req_builder = local_var_req_builder.query(&[("weight__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_weight__n {
        local_var_req_builder = local_var_req_builder.query(&[("max_weight__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_weight__lte {
        local_var_req_builder = local_var_req_builder.query(&[("max_weight__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_weight__lt {
        local_var_req_builder = local_var_req_builder.query(&[("max_weight__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_weight__gte {
        local_var_req_builder = local_var_req_builder.query(&[("max_weight__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = max_weight__gt {
        local_var_req_builder = local_var_req_builder.query(&[("max_weight__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = weight_unit__n {
        local_var_req_builder = local_var_req_builder.query(&[("weight_unit__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_role__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder = local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("location_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location__n {
        local_var_req_builder = local_var_req_builder.query(&[("location__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status__n {
        local_var_req_builder = local_var_req_builder.query(&[("status__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder = local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = width__n {
        local_var_req_builder = local_var_req_builder.query(&[("width__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("role_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = role__n {
        local_var_req_builder = local_var_req_builder.query(&[("role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__n {
        local_var_req_builder = local_var_req_builder.query(&[("serial__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__ic {
        local_var_req_builder = local_var_req_builder.query(&[("serial__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__nic {
        local_var_req_builder = local_var_req_builder.query(&[("serial__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__iew {
        local_var_req_builder = local_var_req_builder.query(&[("serial__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__niew {
        local_var_req_builder = local_var_req_builder.query(&[("serial__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__isw {
        local_var_req_builder = local_var_req_builder.query(&[("serial__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("serial__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__ie {
        local_var_req_builder = local_var_req_builder.query(&[("serial__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__nie {
        local_var_req_builder = local_var_req_builder.query(&[("serial__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = serial__empty {
        local_var_req_builder = local_var_req_builder.query(&[("serial__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRacksListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_racks_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableRack) -> Result<crate::models::Rack, Error<DcimRacksPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/racks/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRacksPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_racks_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::Rack, Error<DcimRacksReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/racks/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRacksReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_racks_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableRack) -> Result<crate::models::Rack, Error<DcimRacksUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/racks/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRacksUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rear_port_templates_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimRearPortTemplatesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimRearPortTemplatesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rear_port_templates_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableRearPortTemplate) -> Result<crate::models::RearPortTemplate, Error<DcimRearPortTemplatesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRearPortTemplatesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rear_port_templates_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableRearPortTemplate) -> Result<crate::models::RearPortTemplate, Error<DcimRearPortTemplatesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRearPortTemplatesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rear_port_templates_create(configuration: &configuration::Configuration, data: crate::models::WritableRearPortTemplate) -> Result<crate::models::RearPortTemplate, Error<DcimRearPortTemplatesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRearPortTemplatesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rear_port_templates_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimRearPortTemplatesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimRearPortTemplatesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rear_port_templates_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, r#type: Option<&str>, color: Option<&str>, positions: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, devicetype_id: Option<&str>, moduletype_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, type__n: Option<&str>, color__n: Option<&str>, color__ic: Option<&str>, color__nic: Option<&str>, color__iew: Option<&str>, color__niew: Option<&str>, color__isw: Option<&str>, color__nisw: Option<&str>, color__ie: Option<&str>, color__nie: Option<&str>, color__empty: Option<&str>, positions__n: Option<&str>, positions__lte: Option<&str>, positions__lt: Option<&str>, positions__gte: Option<&str>, positions__gt: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, devicetype_id__n: Option<&str>, moduletype_id__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimRearPortTemplatesList200Response, Error<DcimRearPortTemplatesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-port-templates/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color {
        local_var_req_builder = local_var_req_builder.query(&[("color", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = positions {
        local_var_req_builder = local_var_req_builder.query(&[("positions", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = moduletype_id {
        local_var_req_builder = local_var_req_builder.query(&[("moduletype_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder = local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__n {
        local_var_req_builder = local_var_req_builder.query(&[("color__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__ic {
        local_var_req_builder = local_var_req_builder.query(&[("color__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nic {
        local_var_req_builder = local_var_req_builder.query(&[("color__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__iew {
        local_var_req_builder = local_var_req_builder.query(&[("color__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__niew {
        local_var_req_builder = local_var_req_builder.query(&[("color__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__isw {
        local_var_req_builder = local_var_req_builder.query(&[("color__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("color__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__ie {
        local_var_req_builder = local_var_req_builder.query(&[("color__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nie {
        local_var_req_builder = local_var_req_builder.query(&[("color__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__empty {
        local_var_req_builder = local_var_req_builder.query(&[("color__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = positions__n {
        local_var_req_builder = local_var_req_builder.query(&[("positions__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = positions__lte {
        local_var_req_builder = local_var_req_builder.query(&[("positions__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = positions__lt {
        local_var_req_builder = local_var_req_builder.query(&[("positions__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = positions__gte {
        local_var_req_builder = local_var_req_builder.query(&[("positions__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = positions__gt {
        local_var_req_builder = local_var_req_builder.query(&[("positions__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = devicetype_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("devicetype_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = moduletype_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("moduletype_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRearPortTemplatesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rear_port_templates_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableRearPortTemplate) -> Result<crate::models::RearPortTemplate, Error<DcimRearPortTemplatesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRearPortTemplatesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rear_port_templates_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::RearPortTemplate, Error<DcimRearPortTemplatesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRearPortTemplatesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rear_port_templates_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableRearPortTemplate) -> Result<crate::models::RearPortTemplate, Error<DcimRearPortTemplatesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-port-templates/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRearPortTemplatesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rear_ports_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimRearPortsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimRearPortsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rear_ports_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableRearPort) -> Result<crate::models::RearPort, Error<DcimRearPortsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRearPortsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rear_ports_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableRearPort) -> Result<crate::models::RearPort, Error<DcimRearPortsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRearPortsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rear_ports_create(configuration: &configuration::Configuration, data: crate::models::WritableRearPort) -> Result<crate::models::RearPort, Error<DcimRearPortsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRearPortsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rear_ports_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimRearPortsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimRearPortsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rear_ports_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, label: Option<&str>, r#type: Option<&str>, color: Option<&str>, positions: Option<&str>, description: Option<&str>, cable_end: Option<&str>, q: Option<&str>, region_id: Option<&str>, region: Option<&str>, site_group_id: Option<&str>, site_group: Option<&str>, site_id: Option<&str>, site: Option<&str>, location_id: Option<&str>, location: Option<&str>, rack_id: Option<&str>, rack: Option<&str>, device_id: Option<&str>, device: Option<&str>, virtual_chassis_id: Option<&str>, virtual_chassis: Option<&str>, module_id: Option<&str>, created: Option<&str>, last_updated: Option<&str>, tag: Option<&str>, cabled: Option<&str>, occupied: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, label__n: Option<&str>, label__ic: Option<&str>, label__nic: Option<&str>, label__iew: Option<&str>, label__niew: Option<&str>, label__isw: Option<&str>, label__nisw: Option<&str>, label__ie: Option<&str>, label__nie: Option<&str>, label__empty: Option<&str>, type__n: Option<&str>, color__n: Option<&str>, color__ic: Option<&str>, color__nic: Option<&str>, color__iew: Option<&str>, color__niew: Option<&str>, color__isw: Option<&str>, color__nisw: Option<&str>, color__ie: Option<&str>, color__nie: Option<&str>, color__empty: Option<&str>, positions__n: Option<&str>, positions__lte: Option<&str>, positions__lt: Option<&str>, positions__gte: Option<&str>, positions__gt: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, cable_end__n: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, site_group_id__n: Option<&str>, site_group__n: Option<&str>, site_id__n: Option<&str>, site__n: Option<&str>, location_id__n: Option<&str>, location__n: Option<&str>, rack_id__n: Option<&str>, rack__n: Option<&str>, device_id__n: Option<&str>, device__n: Option<&str>, virtual_chassis_id__n: Option<&str>, virtual_chassis__n: Option<&str>, module_id__n: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimRearPortsList200Response, Error<DcimRearPortsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-ports/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label {
        local_var_req_builder = local_var_req_builder.query(&[("label", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = r#type {
        local_var_req_builder = local_var_req_builder.query(&[("type", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color {
        local_var_req_builder = local_var_req_builder.query(&[("color", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = positions {
        local_var_req_builder = local_var_req_builder.query(&[("positions", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable_end {
        local_var_req_builder = local_var_req_builder.query(&[("cable_end", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder = local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id {
        local_var_req_builder = local_var_req_builder.query(&[("location_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location {
        local_var_req_builder = local_var_req_builder.query(&[("location", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack {
        local_var_req_builder = local_var_req_builder.query(&[("rack", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("device_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device {
        local_var_req_builder = local_var_req_builder.query(&[("device", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_id {
        local_var_req_builder = local_var_req_builder.query(&[("module_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cabled {
        local_var_req_builder = local_var_req_builder.query(&[("cabled", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = occupied {
        local_var_req_builder = local_var_req_builder.query(&[("occupied", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__n {
        local_var_req_builder = local_var_req_builder.query(&[("label__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ic {
        local_var_req_builder = local_var_req_builder.query(&[("label__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nic {
        local_var_req_builder = local_var_req_builder.query(&[("label__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__iew {
        local_var_req_builder = local_var_req_builder.query(&[("label__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__niew {
        local_var_req_builder = local_var_req_builder.query(&[("label__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__isw {
        local_var_req_builder = local_var_req_builder.query(&[("label__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("label__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__ie {
        local_var_req_builder = local_var_req_builder.query(&[("label__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__nie {
        local_var_req_builder = local_var_req_builder.query(&[("label__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = label__empty {
        local_var_req_builder = local_var_req_builder.query(&[("label__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = type__n {
        local_var_req_builder = local_var_req_builder.query(&[("type__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__n {
        local_var_req_builder = local_var_req_builder.query(&[("color__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__ic {
        local_var_req_builder = local_var_req_builder.query(&[("color__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nic {
        local_var_req_builder = local_var_req_builder.query(&[("color__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__iew {
        local_var_req_builder = local_var_req_builder.query(&[("color__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__niew {
        local_var_req_builder = local_var_req_builder.query(&[("color__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__isw {
        local_var_req_builder = local_var_req_builder.query(&[("color__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("color__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__ie {
        local_var_req_builder = local_var_req_builder.query(&[("color__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__nie {
        local_var_req_builder = local_var_req_builder.query(&[("color__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = color__empty {
        local_var_req_builder = local_var_req_builder.query(&[("color__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = positions__n {
        local_var_req_builder = local_var_req_builder.query(&[("positions__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = positions__lte {
        local_var_req_builder = local_var_req_builder.query(&[("positions__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = positions__lt {
        local_var_req_builder = local_var_req_builder.query(&[("positions__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = positions__gte {
        local_var_req_builder = local_var_req_builder.query(&[("positions__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = positions__gt {
        local_var_req_builder = local_var_req_builder.query(&[("positions__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = cable_end__n {
        local_var_req_builder = local_var_req_builder.query(&[("cable_end__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder = local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("location_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = location__n {
        local_var_req_builder = local_var_req_builder.query(&[("location__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = rack__n {
        local_var_req_builder = local_var_req_builder.query(&[("rack__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("device_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device__n {
        local_var_req_builder = local_var_req_builder.query(&[("device__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = virtual_chassis__n {
        local_var_req_builder = local_var_req_builder.query(&[("virtual_chassis__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = module_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("module_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRearPortsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rear_ports_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableRearPort) -> Result<crate::models::RearPort, Error<DcimRearPortsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRearPortsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

/// Return all CablePaths which traverse a given pass-through port.
pub async fn dcim_rear_ports_paths(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::RearPort, Error<DcimRearPortsPathsError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-ports/{id}/paths/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRearPortsPathsError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rear_ports_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::RearPort, Error<DcimRearPortsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRearPortsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_rear_ports_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableRearPort) -> Result<crate::models::RearPort, Error<DcimRearPortsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/rear-ports/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRearPortsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_regions_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimRegionsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/regions/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimRegionsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_regions_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableRegion) -> Result<crate::models::Region, Error<DcimRegionsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/regions/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRegionsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_regions_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableRegion) -> Result<crate::models::Region, Error<DcimRegionsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/regions/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRegionsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_regions_create(configuration: &configuration::Configuration, data: crate::models::WritableRegion) -> Result<crate::models::Region, Error<DcimRegionsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/regions/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRegionsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_regions_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimRegionsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/regions/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimRegionsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_regions_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, slug: Option<&str>, description: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, contact: Option<&str>, contact_role: Option<&str>, contact_group: Option<&str>, parent_id: Option<&str>, parent: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, slug__n: Option<&str>, slug__ic: Option<&str>, slug__nic: Option<&str>, slug__iew: Option<&str>, slug__niew: Option<&str>, slug__isw: Option<&str>, slug__nisw: Option<&str>, slug__ie: Option<&str>, slug__nie: Option<&str>, slug__empty: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, contact__n: Option<&str>, contact_role__n: Option<&str>, contact_group__n: Option<&str>, parent_id__n: Option<&str>, parent__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimRegionsList200Response, Error<DcimRegionsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/regions/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder = local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact {
        local_var_req_builder = local_var_req_builder.query(&[("contact", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_role {
        local_var_req_builder = local_var_req_builder.query(&[("contact_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_group {
        local_var_req_builder = local_var_req_builder.query(&[("contact_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id {
        local_var_req_builder = local_var_req_builder.query(&[("parent_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent {
        local_var_req_builder = local_var_req_builder.query(&[("parent", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder = local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__empty {
        local_var_req_builder = local_var_req_builder.query(&[("slug__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_role__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("parent_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent__n {
        local_var_req_builder = local_var_req_builder.query(&[("parent__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRegionsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_regions_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableRegion) -> Result<crate::models::Region, Error<DcimRegionsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/regions/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRegionsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_regions_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::Region, Error<DcimRegionsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/regions/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRegionsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_regions_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableRegion) -> Result<crate::models::Region, Error<DcimRegionsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/regions/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimRegionsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_site_groups_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimSiteGroupsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/site-groups/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimSiteGroupsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_site_groups_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableSiteGroup) -> Result<crate::models::SiteGroup, Error<DcimSiteGroupsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/site-groups/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimSiteGroupsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_site_groups_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableSiteGroup) -> Result<crate::models::SiteGroup, Error<DcimSiteGroupsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/site-groups/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimSiteGroupsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_site_groups_create(configuration: &configuration::Configuration, data: crate::models::WritableSiteGroup) -> Result<crate::models::SiteGroup, Error<DcimSiteGroupsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/site-groups/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimSiteGroupsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_site_groups_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimSiteGroupsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/site-groups/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimSiteGroupsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_site_groups_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, slug: Option<&str>, description: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, contact: Option<&str>, contact_role: Option<&str>, contact_group: Option<&str>, parent_id: Option<&str>, parent: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, slug__n: Option<&str>, slug__ic: Option<&str>, slug__nic: Option<&str>, slug__iew: Option<&str>, slug__niew: Option<&str>, slug__isw: Option<&str>, slug__nisw: Option<&str>, slug__ie: Option<&str>, slug__nie: Option<&str>, slug__empty: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, contact__n: Option<&str>, contact_role__n: Option<&str>, contact_group__n: Option<&str>, parent_id__n: Option<&str>, parent__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimSiteGroupsList200Response, Error<DcimSiteGroupsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/site-groups/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder = local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact {
        local_var_req_builder = local_var_req_builder.query(&[("contact", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_role {
        local_var_req_builder = local_var_req_builder.query(&[("contact_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_group {
        local_var_req_builder = local_var_req_builder.query(&[("contact_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id {
        local_var_req_builder = local_var_req_builder.query(&[("parent_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent {
        local_var_req_builder = local_var_req_builder.query(&[("parent", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder = local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__empty {
        local_var_req_builder = local_var_req_builder.query(&[("slug__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_role__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("parent_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = parent__n {
        local_var_req_builder = local_var_req_builder.query(&[("parent__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimSiteGroupsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_site_groups_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableSiteGroup) -> Result<crate::models::SiteGroup, Error<DcimSiteGroupsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/site-groups/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimSiteGroupsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_site_groups_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::SiteGroup, Error<DcimSiteGroupsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/site-groups/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimSiteGroupsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_site_groups_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableSiteGroup) -> Result<crate::models::SiteGroup, Error<DcimSiteGroupsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/site-groups/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimSiteGroupsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_sites_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimSitesBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/sites/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimSitesBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_sites_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableSite) -> Result<crate::models::Site, Error<DcimSitesBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/sites/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimSitesBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_sites_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableSite) -> Result<crate::models::Site, Error<DcimSitesBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/sites/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimSitesBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_sites_create(configuration: &configuration::Configuration, data: crate::models::WritableSite) -> Result<crate::models::Site, Error<DcimSitesCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/sites/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimSitesCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_sites_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimSitesDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/sites/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimSitesDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_sites_list(configuration: &configuration::Configuration, id: Option<&str>, name: Option<&str>, slug: Option<&str>, facility: Option<&str>, latitude: Option<&str>, longitude: Option<&str>, description: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, tenant_group_id: Option<&str>, tenant_group: Option<&str>, tenant_id: Option<&str>, tenant: Option<&str>, contact: Option<&str>, contact_role: Option<&str>, contact_group: Option<&str>, status: Option<&str>, region_id: Option<&str>, region: Option<&str>, group_id: Option<&str>, group: Option<&str>, asn: Option<&str>, asn_id: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, slug__n: Option<&str>, slug__ic: Option<&str>, slug__nic: Option<&str>, slug__iew: Option<&str>, slug__niew: Option<&str>, slug__isw: Option<&str>, slug__nisw: Option<&str>, slug__ie: Option<&str>, slug__nie: Option<&str>, slug__empty: Option<&str>, facility__n: Option<&str>, facility__ic: Option<&str>, facility__nic: Option<&str>, facility__iew: Option<&str>, facility__niew: Option<&str>, facility__isw: Option<&str>, facility__nisw: Option<&str>, facility__ie: Option<&str>, facility__nie: Option<&str>, facility__empty: Option<&str>, latitude__n: Option<&str>, latitude__lte: Option<&str>, latitude__lt: Option<&str>, latitude__gte: Option<&str>, latitude__gt: Option<&str>, longitude__n: Option<&str>, longitude__lte: Option<&str>, longitude__lt: Option<&str>, longitude__gte: Option<&str>, longitude__gt: Option<&str>, description__n: Option<&str>, description__ic: Option<&str>, description__nic: Option<&str>, description__iew: Option<&str>, description__niew: Option<&str>, description__isw: Option<&str>, description__nisw: Option<&str>, description__ie: Option<&str>, description__nie: Option<&str>, description__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, tenant_group_id__n: Option<&str>, tenant_group__n: Option<&str>, tenant_id__n: Option<&str>, tenant__n: Option<&str>, contact__n: Option<&str>, contact_role__n: Option<&str>, contact_group__n: Option<&str>, status__n: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, group_id__n: Option<&str>, group__n: Option<&str>, asn__n: Option<&str>, asn_id__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimSitesList200Response, Error<DcimSitesListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/sites/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug {
        local_var_req_builder = local_var_req_builder.query(&[("slug", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility {
        local_var_req_builder = local_var_req_builder.query(&[("facility", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = latitude {
        local_var_req_builder = local_var_req_builder.query(&[("latitude", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = longitude {
        local_var_req_builder = local_var_req_builder.query(&[("longitude", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description {
        local_var_req_builder = local_var_req_builder.query(&[("description", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant {
        local_var_req_builder = local_var_req_builder.query(&[("tenant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact {
        local_var_req_builder = local_var_req_builder.query(&[("contact", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_role {
        local_var_req_builder = local_var_req_builder.query(&[("contact_role", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_group {
        local_var_req_builder = local_var_req_builder.query(&[("contact_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder = local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_id {
        local_var_req_builder = local_var_req_builder.query(&[("group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group {
        local_var_req_builder = local_var_req_builder.query(&[("group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asn {
        local_var_req_builder = local_var_req_builder.query(&[("asn", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asn_id {
        local_var_req_builder = local_var_req_builder.query(&[("asn_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__n {
        local_var_req_builder = local_var_req_builder.query(&[("slug__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nic {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__iew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__niew {
        local_var_req_builder = local_var_req_builder.query(&[("slug__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__isw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__ie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__nie {
        local_var_req_builder = local_var_req_builder.query(&[("slug__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = slug__empty {
        local_var_req_builder = local_var_req_builder.query(&[("slug__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility__n {
        local_var_req_builder = local_var_req_builder.query(&[("facility__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility__ic {
        local_var_req_builder = local_var_req_builder.query(&[("facility__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility__nic {
        local_var_req_builder = local_var_req_builder.query(&[("facility__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility__iew {
        local_var_req_builder = local_var_req_builder.query(&[("facility__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility__niew {
        local_var_req_builder = local_var_req_builder.query(&[("facility__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility__isw {
        local_var_req_builder = local_var_req_builder.query(&[("facility__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("facility__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility__ie {
        local_var_req_builder = local_var_req_builder.query(&[("facility__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility__nie {
        local_var_req_builder = local_var_req_builder.query(&[("facility__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = facility__empty {
        local_var_req_builder = local_var_req_builder.query(&[("facility__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = latitude__n {
        local_var_req_builder = local_var_req_builder.query(&[("latitude__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = latitude__lte {
        local_var_req_builder = local_var_req_builder.query(&[("latitude__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = latitude__lt {
        local_var_req_builder = local_var_req_builder.query(&[("latitude__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = latitude__gte {
        local_var_req_builder = local_var_req_builder.query(&[("latitude__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = latitude__gt {
        local_var_req_builder = local_var_req_builder.query(&[("latitude__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = longitude__n {
        local_var_req_builder = local_var_req_builder.query(&[("longitude__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = longitude__lte {
        local_var_req_builder = local_var_req_builder.query(&[("longitude__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = longitude__lt {
        local_var_req_builder = local_var_req_builder.query(&[("longitude__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = longitude__gte {
        local_var_req_builder = local_var_req_builder.query(&[("longitude__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = longitude__gt {
        local_var_req_builder = local_var_req_builder.query(&[("longitude__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__n {
        local_var_req_builder = local_var_req_builder.query(&[("description__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ic {
        local_var_req_builder = local_var_req_builder.query(&[("description__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nic {
        local_var_req_builder = local_var_req_builder.query(&[("description__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__iew {
        local_var_req_builder = local_var_req_builder.query(&[("description__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__niew {
        local_var_req_builder = local_var_req_builder.query(&[("description__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__isw {
        local_var_req_builder = local_var_req_builder.query(&[("description__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("description__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__ie {
        local_var_req_builder = local_var_req_builder.query(&[("description__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__nie {
        local_var_req_builder = local_var_req_builder.query(&[("description__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = description__empty {
        local_var_req_builder = local_var_req_builder.query(&[("description__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_role__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_role__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = contact_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("contact_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status__n {
        local_var_req_builder = local_var_req_builder.query(&[("status__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = group__n {
        local_var_req_builder = local_var_req_builder.query(&[("group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asn__n {
        local_var_req_builder = local_var_req_builder.query(&[("asn__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = asn_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("asn_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimSitesListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_sites_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableSite) -> Result<crate::models::Site, Error<DcimSitesPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/sites/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimSitesPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_sites_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::Site, Error<DcimSitesReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/sites/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimSitesReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_sites_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableSite) -> Result<crate::models::Site, Error<DcimSitesUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/sites/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimSitesUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_virtual_chassis_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimVirtualChassisBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/virtual-chassis/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimVirtualChassisBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_virtual_chassis_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableVirtualChassis) -> Result<crate::models::VirtualChassis, Error<DcimVirtualChassisBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/virtual-chassis/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimVirtualChassisBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_virtual_chassis_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableVirtualChassis) -> Result<crate::models::VirtualChassis, Error<DcimVirtualChassisBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/virtual-chassis/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimVirtualChassisBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_virtual_chassis_create(configuration: &configuration::Configuration, data: crate::models::WritableVirtualChassis) -> Result<crate::models::VirtualChassis, Error<DcimVirtualChassisCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/virtual-chassis/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimVirtualChassisCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_virtual_chassis_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimVirtualChassisDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/virtual-chassis/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimVirtualChassisDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_virtual_chassis_list(configuration: &configuration::Configuration, id: Option<&str>, domain: Option<&str>, name: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, master_id: Option<&str>, master: Option<&str>, region_id: Option<&str>, region: Option<&str>, site_group_id: Option<&str>, site_group: Option<&str>, site_id: Option<&str>, site: Option<&str>, tenant_id: Option<&str>, tenant: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, domain__n: Option<&str>, domain__ic: Option<&str>, domain__nic: Option<&str>, domain__iew: Option<&str>, domain__niew: Option<&str>, domain__isw: Option<&str>, domain__nisw: Option<&str>, domain__ie: Option<&str>, domain__nie: Option<&str>, domain__empty: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, master_id__n: Option<&str>, master__n: Option<&str>, region_id__n: Option<&str>, region__n: Option<&str>, site_group_id__n: Option<&str>, site_group__n: Option<&str>, site_id__n: Option<&str>, site__n: Option<&str>, tenant_id__n: Option<&str>, tenant__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimVirtualChassisList200Response, Error<DcimVirtualChassisListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/virtual-chassis/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = domain {
        local_var_req_builder = local_var_req_builder.query(&[("domain", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = master_id {
        local_var_req_builder = local_var_req_builder.query(&[("master_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = master {
        local_var_req_builder = local_var_req_builder.query(&[("master", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id {
        local_var_req_builder = local_var_req_builder.query(&[("region_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region {
        local_var_req_builder = local_var_req_builder.query(&[("region", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group {
        local_var_req_builder = local_var_req_builder.query(&[("site_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id {
        local_var_req_builder = local_var_req_builder.query(&[("site_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site {
        local_var_req_builder = local_var_req_builder.query(&[("site", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant {
        local_var_req_builder = local_var_req_builder.query(&[("tenant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = domain__n {
        local_var_req_builder = local_var_req_builder.query(&[("domain__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = domain__ic {
        local_var_req_builder = local_var_req_builder.query(&[("domain__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = domain__nic {
        local_var_req_builder = local_var_req_builder.query(&[("domain__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = domain__iew {
        local_var_req_builder = local_var_req_builder.query(&[("domain__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = domain__niew {
        local_var_req_builder = local_var_req_builder.query(&[("domain__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = domain__isw {
        local_var_req_builder = local_var_req_builder.query(&[("domain__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = domain__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("domain__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = domain__ie {
        local_var_req_builder = local_var_req_builder.query(&[("domain__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = domain__nie {
        local_var_req_builder = local_var_req_builder.query(&[("domain__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = domain__empty {
        local_var_req_builder = local_var_req_builder.query(&[("domain__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = master_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("master_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = master__n {
        local_var_req_builder = local_var_req_builder.query(&[("master__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("region_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = region__n {
        local_var_req_builder = local_var_req_builder.query(&[("region__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("site_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = site__n {
        local_var_req_builder = local_var_req_builder.query(&[("site__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimVirtualChassisListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_virtual_chassis_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableVirtualChassis) -> Result<crate::models::VirtualChassis, Error<DcimVirtualChassisPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/virtual-chassis/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimVirtualChassisPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_virtual_chassis_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::VirtualChassis, Error<DcimVirtualChassisReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/virtual-chassis/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimVirtualChassisReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_virtual_chassis_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableVirtualChassis) -> Result<crate::models::VirtualChassis, Error<DcimVirtualChassisUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/virtual-chassis/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimVirtualChassisUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_virtual_device_contexts_bulk_delete(configuration: &configuration::Configuration, ) -> Result<(), Error<DcimVirtualDeviceContextsBulkDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/virtual-device-contexts/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimVirtualDeviceContextsBulkDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_virtual_device_contexts_bulk_partial_update(configuration: &configuration::Configuration, data: crate::models::WritableVirtualDeviceContext) -> Result<crate::models::VirtualDeviceContext, Error<DcimVirtualDeviceContextsBulkPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/virtual-device-contexts/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimVirtualDeviceContextsBulkPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_virtual_device_contexts_bulk_update(configuration: &configuration::Configuration, data: crate::models::WritableVirtualDeviceContext) -> Result<crate::models::VirtualDeviceContext, Error<DcimVirtualDeviceContextsBulkUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/virtual-device-contexts/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimVirtualDeviceContextsBulkUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_virtual_device_contexts_create(configuration: &configuration::Configuration, data: crate::models::WritableVirtualDeviceContext) -> Result<crate::models::VirtualDeviceContext, Error<DcimVirtualDeviceContextsCreateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/virtual-device-contexts/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::POST, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimVirtualDeviceContextsCreateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_virtual_device_contexts_delete(configuration: &configuration::Configuration, id: i32) -> Result<(), Error<DcimVirtualDeviceContextsDeleteError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/virtual-device-contexts/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::DELETE, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        Ok(())
    } else {
        let local_var_entity: Option<DcimVirtualDeviceContextsDeleteError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_virtual_device_contexts_list(configuration: &configuration::Configuration, id: Option<&str>, device: Option<&str>, name: Option<&str>, created: Option<&str>, last_updated: Option<&str>, q: Option<&str>, tag: Option<&str>, tenant_group_id: Option<&str>, tenant_group: Option<&str>, tenant_id: Option<&str>, tenant: Option<&str>, device_id: Option<&str>, status: Option<&str>, has_primary_ip: Option<&str>, id__n: Option<&str>, id__lte: Option<&str>, id__lt: Option<&str>, id__gte: Option<&str>, id__gt: Option<&str>, device__n: Option<&str>, name__n: Option<&str>, name__ic: Option<&str>, name__nic: Option<&str>, name__iew: Option<&str>, name__niew: Option<&str>, name__isw: Option<&str>, name__nisw: Option<&str>, name__ie: Option<&str>, name__nie: Option<&str>, name__empty: Option<&str>, created__n: Option<&str>, created__lte: Option<&str>, created__lt: Option<&str>, created__gte: Option<&str>, created__gt: Option<&str>, last_updated__n: Option<&str>, last_updated__lte: Option<&str>, last_updated__lt: Option<&str>, last_updated__gte: Option<&str>, last_updated__gt: Option<&str>, tag__n: Option<&str>, tenant_group_id__n: Option<&str>, tenant_group__n: Option<&str>, tenant_id__n: Option<&str>, tenant__n: Option<&str>, device_id__n: Option<&str>, status__n: Option<&str>, ordering: Option<&str>, limit: Option<i32>, offset: Option<i32>) -> Result<crate::models::DcimVirtualDeviceContextsList200Response, Error<DcimVirtualDeviceContextsListError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/virtual-device-contexts/", local_var_configuration.base_path);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_str) = id {
        local_var_req_builder = local_var_req_builder.query(&[("id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device {
        local_var_req_builder = local_var_req_builder.query(&[("device", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name {
        local_var_req_builder = local_var_req_builder.query(&[("name", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created {
        local_var_req_builder = local_var_req_builder.query(&[("created", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = q {
        local_var_req_builder = local_var_req_builder.query(&[("q", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag {
        local_var_req_builder = local_var_req_builder.query(&[("tag", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant {
        local_var_req_builder = local_var_req_builder.query(&[("tenant", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id {
        local_var_req_builder = local_var_req_builder.query(&[("device_id", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status {
        local_var_req_builder = local_var_req_builder.query(&[("status", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = has_primary_ip {
        local_var_req_builder = local_var_req_builder.query(&[("has_primary_ip", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__n {
        local_var_req_builder = local_var_req_builder.query(&[("id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lte {
        local_var_req_builder = local_var_req_builder.query(&[("id__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__lt {
        local_var_req_builder = local_var_req_builder.query(&[("id__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gte {
        local_var_req_builder = local_var_req_builder.query(&[("id__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = id__gt {
        local_var_req_builder = local_var_req_builder.query(&[("id__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device__n {
        local_var_req_builder = local_var_req_builder.query(&[("device__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__n {
        local_var_req_builder = local_var_req_builder.query(&[("name__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ic {
        local_var_req_builder = local_var_req_builder.query(&[("name__ic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nic {
        local_var_req_builder = local_var_req_builder.query(&[("name__nic", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__iew {
        local_var_req_builder = local_var_req_builder.query(&[("name__iew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__niew {
        local_var_req_builder = local_var_req_builder.query(&[("name__niew", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__isw {
        local_var_req_builder = local_var_req_builder.query(&[("name__isw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nisw {
        local_var_req_builder = local_var_req_builder.query(&[("name__nisw", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__ie {
        local_var_req_builder = local_var_req_builder.query(&[("name__ie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__nie {
        local_var_req_builder = local_var_req_builder.query(&[("name__nie", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = name__empty {
        local_var_req_builder = local_var_req_builder.query(&[("name__empty", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__n {
        local_var_req_builder = local_var_req_builder.query(&[("created__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lte {
        local_var_req_builder = local_var_req_builder.query(&[("created__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__lt {
        local_var_req_builder = local_var_req_builder.query(&[("created__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gte {
        local_var_req_builder = local_var_req_builder.query(&[("created__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = created__gt {
        local_var_req_builder = local_var_req_builder.query(&[("created__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__n {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__lt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__lt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gte {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gte", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = last_updated__gt {
        local_var_req_builder = local_var_req_builder.query(&[("last_updated__gt", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tag__n {
        local_var_req_builder = local_var_req_builder.query(&[("tag__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_group__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_group__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = tenant__n {
        local_var_req_builder = local_var_req_builder.query(&[("tenant__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = device_id__n {
        local_var_req_builder = local_var_req_builder.query(&[("device_id__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = status__n {
        local_var_req_builder = local_var_req_builder.query(&[("status__n", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = ordering {
        local_var_req_builder = local_var_req_builder.query(&[("ordering", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = limit {
        local_var_req_builder = local_var_req_builder.query(&[("limit", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_str) = offset {
        local_var_req_builder = local_var_req_builder.query(&[("offset", &local_var_str.to_string())]);
    }
    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimVirtualDeviceContextsListError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_virtual_device_contexts_partial_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableVirtualDeviceContext) -> Result<crate::models::VirtualDeviceContext, Error<DcimVirtualDeviceContextsPartialUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/virtual-device-contexts/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PATCH, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimVirtualDeviceContextsPartialUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_virtual_device_contexts_read(configuration: &configuration::Configuration, id: i32) -> Result<crate::models::VirtualDeviceContext, Error<DcimVirtualDeviceContextsReadError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/virtual-device-contexts/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::GET, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimVirtualDeviceContextsReadError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

pub async fn dcim_virtual_device_contexts_update(configuration: &configuration::Configuration, id: i32, data: crate::models::WritableVirtualDeviceContext) -> Result<crate::models::VirtualDeviceContext, Error<DcimVirtualDeviceContextsUpdateError>> {
    let local_var_configuration = configuration;

    let local_var_client = &local_var_configuration.client;

    let local_var_uri_str = format!("{}/dcim/virtual-device-contexts/{id}/", local_var_configuration.base_path, id=id);
    let mut local_var_req_builder = local_var_client.request(reqwest::Method::PUT, local_var_uri_str.as_str());

    if let Some(ref local_var_user_agent) = local_var_configuration.user_agent {
        local_var_req_builder = local_var_req_builder.header(reqwest::header::USER_AGENT, local_var_user_agent.clone());
    }
    if let Some(ref local_var_apikey) = local_var_configuration.api_key {
        let local_var_key = local_var_apikey.key.clone();
        let local_var_value = match local_var_apikey.prefix {
            Some(ref local_var_prefix) => format!("{} {}", local_var_prefix, local_var_key),
            None => local_var_key,
        };
        local_var_req_builder = local_var_req_builder.header("Authorization", local_var_value);
    };
    local_var_req_builder = local_var_req_builder.json(&data);

    let local_var_req = local_var_req_builder.build()?;
    let local_var_resp = local_var_client.execute(local_var_req).await?;

    let local_var_status = local_var_resp.status();
    let local_var_content = local_var_resp.text().await?;

    if !local_var_status.is_client_error() && !local_var_status.is_server_error() {
        serde_json::from_str(&local_var_content).map_err(Error::from)
    } else {
        let local_var_entity: Option<DcimVirtualDeviceContextsUpdateError> = serde_json::from_str(&local_var_content).ok();
        let local_var_error = ResponseContent { status: local_var_status, content: local_var_content, entity: local_var_entity };
        Err(Error::ResponseError(local_var_error))
    }
}

